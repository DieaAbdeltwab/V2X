
0_GP_KIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e40  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  08004f70  08004f70  00014f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005434  08005434  00020050  2**0
                  CONTENTS
  4 .ARM          00000008  08005434  08005434  00015434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800543c  0800543c  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800543c  0800543c  0001543c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005440  08005440  00015440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  08005444  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000050  08005494  00020050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08005494  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007207  00000000  00000000  00020079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000166a  00000000  00000000  00027280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006b8  00000000  00000000  000288f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005b8  00000000  00000000  00028fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000201f7  00000000  00000000  00029560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007142  00000000  00000000  00049757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0001578f  00000000  00000000  00050899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00066028  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a58  00000000  00000000  00066078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000050 	.word	0x20000050
 800014c:	00000000 	.word	0x00000000
 8000150:	08004f58 	.word	0x08004f58

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000054 	.word	0x20000054
 800016c:	08004f58 	.word	0x08004f58

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	3c01      	subs	r4, #1
 80002ac:	bf28      	it	cs
 80002ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b2:	d2e9      	bcs.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__aeabi_d2f>:
 800090c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000910:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000914:	bf24      	itt	cs
 8000916:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800091a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800091e:	d90d      	bls.n	800093c <__aeabi_d2f+0x30>
 8000920:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000924:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000928:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800092c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000930:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000934:	bf08      	it	eq
 8000936:	f020 0001 	biceq.w	r0, r0, #1
 800093a:	4770      	bx	lr
 800093c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000940:	d121      	bne.n	8000986 <__aeabi_d2f+0x7a>
 8000942:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000946:	bfbc      	itt	lt
 8000948:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800094c:	4770      	bxlt	lr
 800094e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000952:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000956:	f1c2 0218 	rsb	r2, r2, #24
 800095a:	f1c2 0c20 	rsb	ip, r2, #32
 800095e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000962:	fa20 f002 	lsr.w	r0, r0, r2
 8000966:	bf18      	it	ne
 8000968:	f040 0001 	orrne.w	r0, r0, #1
 800096c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000970:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000974:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000978:	ea40 000c 	orr.w	r0, r0, ip
 800097c:	fa23 f302 	lsr.w	r3, r3, r2
 8000980:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000984:	e7cc      	b.n	8000920 <__aeabi_d2f+0x14>
 8000986:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800098a:	d107      	bne.n	800099c <__aeabi_d2f+0x90>
 800098c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000990:	bf1e      	ittt	ne
 8000992:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000996:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800099a:	4770      	bxne	lr
 800099c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop

080009ac <__aeabi_frsub>:
 80009ac:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009b0:	e002      	b.n	80009b8 <__addsf3>
 80009b2:	bf00      	nop

080009b4 <__aeabi_fsub>:
 80009b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009b8 <__addsf3>:
 80009b8:	0042      	lsls	r2, r0, #1
 80009ba:	bf1f      	itttt	ne
 80009bc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009c0:	ea92 0f03 	teqne	r2, r3
 80009c4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009c8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009cc:	d06a      	beq.n	8000aa4 <__addsf3+0xec>
 80009ce:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009d2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009d6:	bfc1      	itttt	gt
 80009d8:	18d2      	addgt	r2, r2, r3
 80009da:	4041      	eorgt	r1, r0
 80009dc:	4048      	eorgt	r0, r1
 80009de:	4041      	eorgt	r1, r0
 80009e0:	bfb8      	it	lt
 80009e2:	425b      	neglt	r3, r3
 80009e4:	2b19      	cmp	r3, #25
 80009e6:	bf88      	it	hi
 80009e8:	4770      	bxhi	lr
 80009ea:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009f2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009f6:	bf18      	it	ne
 80009f8:	4240      	negne	r0, r0
 80009fa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009fe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a02:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a06:	bf18      	it	ne
 8000a08:	4249      	negne	r1, r1
 8000a0a:	ea92 0f03 	teq	r2, r3
 8000a0e:	d03f      	beq.n	8000a90 <__addsf3+0xd8>
 8000a10:	f1a2 0201 	sub.w	r2, r2, #1
 8000a14:	fa41 fc03 	asr.w	ip, r1, r3
 8000a18:	eb10 000c 	adds.w	r0, r0, ip
 8000a1c:	f1c3 0320 	rsb	r3, r3, #32
 8000a20:	fa01 f103 	lsl.w	r1, r1, r3
 8000a24:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a28:	d502      	bpl.n	8000a30 <__addsf3+0x78>
 8000a2a:	4249      	negs	r1, r1
 8000a2c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a30:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a34:	d313      	bcc.n	8000a5e <__addsf3+0xa6>
 8000a36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a3a:	d306      	bcc.n	8000a4a <__addsf3+0x92>
 8000a3c:	0840      	lsrs	r0, r0, #1
 8000a3e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a42:	f102 0201 	add.w	r2, r2, #1
 8000a46:	2afe      	cmp	r2, #254	; 0xfe
 8000a48:	d251      	bcs.n	8000aee <__addsf3+0x136>
 8000a4a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a52:	bf08      	it	eq
 8000a54:	f020 0001 	biceq.w	r0, r0, #1
 8000a58:	ea40 0003 	orr.w	r0, r0, r3
 8000a5c:	4770      	bx	lr
 8000a5e:	0049      	lsls	r1, r1, #1
 8000a60:	eb40 0000 	adc.w	r0, r0, r0
 8000a64:	3a01      	subs	r2, #1
 8000a66:	bf28      	it	cs
 8000a68:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a6c:	d2ed      	bcs.n	8000a4a <__addsf3+0x92>
 8000a6e:	fab0 fc80 	clz	ip, r0
 8000a72:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a76:	ebb2 020c 	subs.w	r2, r2, ip
 8000a7a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a7e:	bfaa      	itet	ge
 8000a80:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a84:	4252      	neglt	r2, r2
 8000a86:	4318      	orrge	r0, r3
 8000a88:	bfbc      	itt	lt
 8000a8a:	40d0      	lsrlt	r0, r2
 8000a8c:	4318      	orrlt	r0, r3
 8000a8e:	4770      	bx	lr
 8000a90:	f092 0f00 	teq	r2, #0
 8000a94:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a98:	bf06      	itte	eq
 8000a9a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a9e:	3201      	addeq	r2, #1
 8000aa0:	3b01      	subne	r3, #1
 8000aa2:	e7b5      	b.n	8000a10 <__addsf3+0x58>
 8000aa4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000aa8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000aac:	bf18      	it	ne
 8000aae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ab2:	d021      	beq.n	8000af8 <__addsf3+0x140>
 8000ab4:	ea92 0f03 	teq	r2, r3
 8000ab8:	d004      	beq.n	8000ac4 <__addsf3+0x10c>
 8000aba:	f092 0f00 	teq	r2, #0
 8000abe:	bf08      	it	eq
 8000ac0:	4608      	moveq	r0, r1
 8000ac2:	4770      	bx	lr
 8000ac4:	ea90 0f01 	teq	r0, r1
 8000ac8:	bf1c      	itt	ne
 8000aca:	2000      	movne	r0, #0
 8000acc:	4770      	bxne	lr
 8000ace:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ad2:	d104      	bne.n	8000ade <__addsf3+0x126>
 8000ad4:	0040      	lsls	r0, r0, #1
 8000ad6:	bf28      	it	cs
 8000ad8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000adc:	4770      	bx	lr
 8000ade:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ae2:	bf3c      	itt	cc
 8000ae4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bxcc	lr
 8000aea:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aee:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000af2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af6:	4770      	bx	lr
 8000af8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000afc:	bf16      	itet	ne
 8000afe:	4608      	movne	r0, r1
 8000b00:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b04:	4601      	movne	r1, r0
 8000b06:	0242      	lsls	r2, r0, #9
 8000b08:	bf06      	itte	eq
 8000b0a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b0e:	ea90 0f01 	teqeq	r0, r1
 8000b12:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_ui2f>:
 8000b18:	f04f 0300 	mov.w	r3, #0
 8000b1c:	e004      	b.n	8000b28 <__aeabi_i2f+0x8>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_i2f>:
 8000b20:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b24:	bf48      	it	mi
 8000b26:	4240      	negmi	r0, r0
 8000b28:	ea5f 0c00 	movs.w	ip, r0
 8000b2c:	bf08      	it	eq
 8000b2e:	4770      	bxeq	lr
 8000b30:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b34:	4601      	mov	r1, r0
 8000b36:	f04f 0000 	mov.w	r0, #0
 8000b3a:	e01c      	b.n	8000b76 <__aeabi_l2f+0x2a>

08000b3c <__aeabi_ul2f>:
 8000b3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b40:	bf08      	it	eq
 8000b42:	4770      	bxeq	lr
 8000b44:	f04f 0300 	mov.w	r3, #0
 8000b48:	e00a      	b.n	8000b60 <__aeabi_l2f+0x14>
 8000b4a:	bf00      	nop

08000b4c <__aeabi_l2f>:
 8000b4c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b50:	bf08      	it	eq
 8000b52:	4770      	bxeq	lr
 8000b54:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b58:	d502      	bpl.n	8000b60 <__aeabi_l2f+0x14>
 8000b5a:	4240      	negs	r0, r0
 8000b5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b60:	ea5f 0c01 	movs.w	ip, r1
 8000b64:	bf02      	ittt	eq
 8000b66:	4684      	moveq	ip, r0
 8000b68:	4601      	moveq	r1, r0
 8000b6a:	2000      	moveq	r0, #0
 8000b6c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b70:	bf08      	it	eq
 8000b72:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b76:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b7a:	fabc f28c 	clz	r2, ip
 8000b7e:	3a08      	subs	r2, #8
 8000b80:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b84:	db10      	blt.n	8000ba8 <__aeabi_l2f+0x5c>
 8000b86:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b8a:	4463      	add	r3, ip
 8000b8c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b98:	fa20 f202 	lsr.w	r2, r0, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	f020 0001 	biceq.w	r0, r0, #1
 8000ba6:	4770      	bx	lr
 8000ba8:	f102 0220 	add.w	r2, r2, #32
 8000bac:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bb0:	f1c2 0220 	rsb	r2, r2, #32
 8000bb4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bb8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bbc:	eb43 0002 	adc.w	r0, r3, r2
 8000bc0:	bf08      	it	eq
 8000bc2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_fmul>:
 8000bc8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bcc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bd0:	bf1e      	ittt	ne
 8000bd2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bd6:	ea92 0f0c 	teqne	r2, ip
 8000bda:	ea93 0f0c 	teqne	r3, ip
 8000bde:	d06f      	beq.n	8000cc0 <__aeabi_fmul+0xf8>
 8000be0:	441a      	add	r2, r3
 8000be2:	ea80 0c01 	eor.w	ip, r0, r1
 8000be6:	0240      	lsls	r0, r0, #9
 8000be8:	bf18      	it	ne
 8000bea:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bee:	d01e      	beq.n	8000c2e <__aeabi_fmul+0x66>
 8000bf0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bf4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bf8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bfc:	fba0 3101 	umull	r3, r1, r0, r1
 8000c00:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c04:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c08:	bf3e      	ittt	cc
 8000c0a:	0049      	lslcc	r1, r1, #1
 8000c0c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c10:	005b      	lslcc	r3, r3, #1
 8000c12:	ea40 0001 	orr.w	r0, r0, r1
 8000c16:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c1a:	2afd      	cmp	r2, #253	; 0xfd
 8000c1c:	d81d      	bhi.n	8000c5a <__aeabi_fmul+0x92>
 8000c1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c22:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c26:	bf08      	it	eq
 8000c28:	f020 0001 	biceq.w	r0, r0, #1
 8000c2c:	4770      	bx	lr
 8000c2e:	f090 0f00 	teq	r0, #0
 8000c32:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c36:	bf08      	it	eq
 8000c38:	0249      	lsleq	r1, r1, #9
 8000c3a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c3e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c42:	3a7f      	subs	r2, #127	; 0x7f
 8000c44:	bfc2      	ittt	gt
 8000c46:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c4a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c4e:	4770      	bxgt	lr
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	f04f 0300 	mov.w	r3, #0
 8000c58:	3a01      	subs	r2, #1
 8000c5a:	dc5d      	bgt.n	8000d18 <__aeabi_fmul+0x150>
 8000c5c:	f112 0f19 	cmn.w	r2, #25
 8000c60:	bfdc      	itt	le
 8000c62:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c66:	4770      	bxle	lr
 8000c68:	f1c2 0200 	rsb	r2, r2, #0
 8000c6c:	0041      	lsls	r1, r0, #1
 8000c6e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c72:	f1c2 0220 	rsb	r2, r2, #32
 8000c76:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c7a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c7e:	f140 0000 	adc.w	r0, r0, #0
 8000c82:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c86:	bf08      	it	eq
 8000c88:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c8c:	4770      	bx	lr
 8000c8e:	f092 0f00 	teq	r2, #0
 8000c92:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c96:	bf02      	ittt	eq
 8000c98:	0040      	lsleq	r0, r0, #1
 8000c9a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c9e:	3a01      	subeq	r2, #1
 8000ca0:	d0f9      	beq.n	8000c96 <__aeabi_fmul+0xce>
 8000ca2:	ea40 000c 	orr.w	r0, r0, ip
 8000ca6:	f093 0f00 	teq	r3, #0
 8000caa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cae:	bf02      	ittt	eq
 8000cb0:	0049      	lsleq	r1, r1, #1
 8000cb2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000cb6:	3b01      	subeq	r3, #1
 8000cb8:	d0f9      	beq.n	8000cae <__aeabi_fmul+0xe6>
 8000cba:	ea41 010c 	orr.w	r1, r1, ip
 8000cbe:	e78f      	b.n	8000be0 <__aeabi_fmul+0x18>
 8000cc0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cc4:	ea92 0f0c 	teq	r2, ip
 8000cc8:	bf18      	it	ne
 8000cca:	ea93 0f0c 	teqne	r3, ip
 8000cce:	d00a      	beq.n	8000ce6 <__aeabi_fmul+0x11e>
 8000cd0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cd4:	bf18      	it	ne
 8000cd6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cda:	d1d8      	bne.n	8000c8e <__aeabi_fmul+0xc6>
 8000cdc:	ea80 0001 	eor.w	r0, r0, r1
 8000ce0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ce4:	4770      	bx	lr
 8000ce6:	f090 0f00 	teq	r0, #0
 8000cea:	bf17      	itett	ne
 8000cec:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cf0:	4608      	moveq	r0, r1
 8000cf2:	f091 0f00 	teqne	r1, #0
 8000cf6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cfa:	d014      	beq.n	8000d26 <__aeabi_fmul+0x15e>
 8000cfc:	ea92 0f0c 	teq	r2, ip
 8000d00:	d101      	bne.n	8000d06 <__aeabi_fmul+0x13e>
 8000d02:	0242      	lsls	r2, r0, #9
 8000d04:	d10f      	bne.n	8000d26 <__aeabi_fmul+0x15e>
 8000d06:	ea93 0f0c 	teq	r3, ip
 8000d0a:	d103      	bne.n	8000d14 <__aeabi_fmul+0x14c>
 8000d0c:	024b      	lsls	r3, r1, #9
 8000d0e:	bf18      	it	ne
 8000d10:	4608      	movne	r0, r1
 8000d12:	d108      	bne.n	8000d26 <__aeabi_fmul+0x15e>
 8000d14:	ea80 0001 	eor.w	r0, r0, r1
 8000d18:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d24:	4770      	bx	lr
 8000d26:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d2a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d2e:	4770      	bx	lr

08000d30 <__aeabi_fdiv>:
 8000d30:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d34:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d38:	bf1e      	ittt	ne
 8000d3a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d3e:	ea92 0f0c 	teqne	r2, ip
 8000d42:	ea93 0f0c 	teqne	r3, ip
 8000d46:	d069      	beq.n	8000e1c <__aeabi_fdiv+0xec>
 8000d48:	eba2 0203 	sub.w	r2, r2, r3
 8000d4c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d50:	0249      	lsls	r1, r1, #9
 8000d52:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d56:	d037      	beq.n	8000dc8 <__aeabi_fdiv+0x98>
 8000d58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d5c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d60:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d64:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	bf38      	it	cc
 8000d6c:	005b      	lslcc	r3, r3, #1
 8000d6e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d72:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d76:	428b      	cmp	r3, r1
 8000d78:	bf24      	itt	cs
 8000d7a:	1a5b      	subcs	r3, r3, r1
 8000d7c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d80:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d84:	bf24      	itt	cs
 8000d86:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d8a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d8e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d92:	bf24      	itt	cs
 8000d94:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d98:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d9c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000da0:	bf24      	itt	cs
 8000da2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000da6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000daa:	011b      	lsls	r3, r3, #4
 8000dac:	bf18      	it	ne
 8000dae:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000db2:	d1e0      	bne.n	8000d76 <__aeabi_fdiv+0x46>
 8000db4:	2afd      	cmp	r2, #253	; 0xfd
 8000db6:	f63f af50 	bhi.w	8000c5a <__aeabi_fmul+0x92>
 8000dba:	428b      	cmp	r3, r1
 8000dbc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dc0:	bf08      	it	eq
 8000dc2:	f020 0001 	biceq.w	r0, r0, #1
 8000dc6:	4770      	bx	lr
 8000dc8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dcc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dd0:	327f      	adds	r2, #127	; 0x7f
 8000dd2:	bfc2      	ittt	gt
 8000dd4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dd8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ddc:	4770      	bxgt	lr
 8000dde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de2:	f04f 0300 	mov.w	r3, #0
 8000de6:	3a01      	subs	r2, #1
 8000de8:	e737      	b.n	8000c5a <__aeabi_fmul+0x92>
 8000dea:	f092 0f00 	teq	r2, #0
 8000dee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000df2:	bf02      	ittt	eq
 8000df4:	0040      	lsleq	r0, r0, #1
 8000df6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dfa:	3a01      	subeq	r2, #1
 8000dfc:	d0f9      	beq.n	8000df2 <__aeabi_fdiv+0xc2>
 8000dfe:	ea40 000c 	orr.w	r0, r0, ip
 8000e02:	f093 0f00 	teq	r3, #0
 8000e06:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e0a:	bf02      	ittt	eq
 8000e0c:	0049      	lsleq	r1, r1, #1
 8000e0e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e12:	3b01      	subeq	r3, #1
 8000e14:	d0f9      	beq.n	8000e0a <__aeabi_fdiv+0xda>
 8000e16:	ea41 010c 	orr.w	r1, r1, ip
 8000e1a:	e795      	b.n	8000d48 <__aeabi_fdiv+0x18>
 8000e1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e20:	ea92 0f0c 	teq	r2, ip
 8000e24:	d108      	bne.n	8000e38 <__aeabi_fdiv+0x108>
 8000e26:	0242      	lsls	r2, r0, #9
 8000e28:	f47f af7d 	bne.w	8000d26 <__aeabi_fmul+0x15e>
 8000e2c:	ea93 0f0c 	teq	r3, ip
 8000e30:	f47f af70 	bne.w	8000d14 <__aeabi_fmul+0x14c>
 8000e34:	4608      	mov	r0, r1
 8000e36:	e776      	b.n	8000d26 <__aeabi_fmul+0x15e>
 8000e38:	ea93 0f0c 	teq	r3, ip
 8000e3c:	d104      	bne.n	8000e48 <__aeabi_fdiv+0x118>
 8000e3e:	024b      	lsls	r3, r1, #9
 8000e40:	f43f af4c 	beq.w	8000cdc <__aeabi_fmul+0x114>
 8000e44:	4608      	mov	r0, r1
 8000e46:	e76e      	b.n	8000d26 <__aeabi_fmul+0x15e>
 8000e48:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e4c:	bf18      	it	ne
 8000e4e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e52:	d1ca      	bne.n	8000dea <__aeabi_fdiv+0xba>
 8000e54:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e58:	f47f af5c 	bne.w	8000d14 <__aeabi_fmul+0x14c>
 8000e5c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e60:	f47f af3c 	bne.w	8000cdc <__aeabi_fmul+0x114>
 8000e64:	e75f      	b.n	8000d26 <__aeabi_fmul+0x15e>
 8000e66:	bf00      	nop

08000e68 <__aeabi_f2uiz>:
 8000e68:	0042      	lsls	r2, r0, #1
 8000e6a:	d20e      	bcs.n	8000e8a <__aeabi_f2uiz+0x22>
 8000e6c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e70:	d30b      	bcc.n	8000e8a <__aeabi_f2uiz+0x22>
 8000e72:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e76:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e7a:	d409      	bmi.n	8000e90 <__aeabi_f2uiz+0x28>
 8000e7c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e84:	fa23 f002 	lsr.w	r0, r3, r2
 8000e88:	4770      	bx	lr
 8000e8a:	f04f 0000 	mov.w	r0, #0
 8000e8e:	4770      	bx	lr
 8000e90:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e94:	d101      	bne.n	8000e9a <__aeabi_f2uiz+0x32>
 8000e96:	0242      	lsls	r2, r0, #9
 8000e98:	d102      	bne.n	8000ea0 <__aeabi_f2uiz+0x38>
 8000e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8000e9e:	4770      	bx	lr
 8000ea0:	f04f 0000 	mov.w	r0, #0
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <__aeabi_uldivmod>:
 8000ea8:	b953      	cbnz	r3, 8000ec0 <__aeabi_uldivmod+0x18>
 8000eaa:	b94a      	cbnz	r2, 8000ec0 <__aeabi_uldivmod+0x18>
 8000eac:	2900      	cmp	r1, #0
 8000eae:	bf08      	it	eq
 8000eb0:	2800      	cmpeq	r0, #0
 8000eb2:	bf1c      	itt	ne
 8000eb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000eb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ebc:	f000 b976 	b.w	80011ac <__aeabi_idiv0>
 8000ec0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ec4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ec8:	f000 f806 	bl	8000ed8 <__udivmoddi4>
 8000ecc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ed0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ed4:	b004      	add	sp, #16
 8000ed6:	4770      	bx	lr

08000ed8 <__udivmoddi4>:
 8000ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000edc:	9e08      	ldr	r6, [sp, #32]
 8000ede:	460d      	mov	r5, r1
 8000ee0:	4604      	mov	r4, r0
 8000ee2:	4688      	mov	r8, r1
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d14d      	bne.n	8000f84 <__udivmoddi4+0xac>
 8000ee8:	428a      	cmp	r2, r1
 8000eea:	4694      	mov	ip, r2
 8000eec:	d968      	bls.n	8000fc0 <__udivmoddi4+0xe8>
 8000eee:	fab2 f282 	clz	r2, r2
 8000ef2:	b152      	cbz	r2, 8000f0a <__udivmoddi4+0x32>
 8000ef4:	fa01 f302 	lsl.w	r3, r1, r2
 8000ef8:	f1c2 0120 	rsb	r1, r2, #32
 8000efc:	fa20 f101 	lsr.w	r1, r0, r1
 8000f00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f04:	ea41 0803 	orr.w	r8, r1, r3
 8000f08:	4094      	lsls	r4, r2
 8000f0a:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000f0e:	fbb8 f7f1 	udiv	r7, r8, r1
 8000f12:	fa1f fe8c 	uxth.w	lr, ip
 8000f16:	fb01 8817 	mls	r8, r1, r7, r8
 8000f1a:	fb07 f00e 	mul.w	r0, r7, lr
 8000f1e:	0c23      	lsrs	r3, r4, #16
 8000f20:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f24:	4298      	cmp	r0, r3
 8000f26:	d90a      	bls.n	8000f3e <__udivmoddi4+0x66>
 8000f28:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2c:	f107 35ff 	add.w	r5, r7, #4294967295
 8000f30:	f080 811e 	bcs.w	8001170 <__udivmoddi4+0x298>
 8000f34:	4298      	cmp	r0, r3
 8000f36:	f240 811b 	bls.w	8001170 <__udivmoddi4+0x298>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4463      	add	r3, ip
 8000f3e:	1a1b      	subs	r3, r3, r0
 8000f40:	fbb3 f0f1 	udiv	r0, r3, r1
 8000f44:	fb01 3310 	mls	r3, r1, r0, r3
 8000f48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f4c:	b2a4      	uxth	r4, r4
 8000f4e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f52:	45a6      	cmp	lr, r4
 8000f54:	d90a      	bls.n	8000f6c <__udivmoddi4+0x94>
 8000f56:	eb1c 0404 	adds.w	r4, ip, r4
 8000f5a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f5e:	f080 8109 	bcs.w	8001174 <__udivmoddi4+0x29c>
 8000f62:	45a6      	cmp	lr, r4
 8000f64:	f240 8106 	bls.w	8001174 <__udivmoddi4+0x29c>
 8000f68:	4464      	add	r4, ip
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	eba4 040e 	sub.w	r4, r4, lr
 8000f72:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000f76:	b11e      	cbz	r6, 8000f80 <__udivmoddi4+0xa8>
 8000f78:	2300      	movs	r3, #0
 8000f7a:	40d4      	lsrs	r4, r2
 8000f7c:	e9c6 4300 	strd	r4, r3, [r6]
 8000f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f84:	428b      	cmp	r3, r1
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0xc2>
 8000f88:	2e00      	cmp	r6, #0
 8000f8a:	f000 80ee 	beq.w	800116a <__udivmoddi4+0x292>
 8000f8e:	2100      	movs	r1, #0
 8000f90:	e9c6 0500 	strd	r0, r5, [r6]
 8000f94:	4608      	mov	r0, r1
 8000f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f9a:	fab3 f183 	clz	r1, r3
 8000f9e:	2900      	cmp	r1, #0
 8000fa0:	d14a      	bne.n	8001038 <__udivmoddi4+0x160>
 8000fa2:	42ab      	cmp	r3, r5
 8000fa4:	d302      	bcc.n	8000fac <__udivmoddi4+0xd4>
 8000fa6:	4282      	cmp	r2, r0
 8000fa8:	f200 80fc 	bhi.w	80011a4 <__udivmoddi4+0x2cc>
 8000fac:	1a84      	subs	r4, r0, r2
 8000fae:	eb65 0303 	sbc.w	r3, r5, r3
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	4698      	mov	r8, r3
 8000fb6:	2e00      	cmp	r6, #0
 8000fb8:	d0e2      	beq.n	8000f80 <__udivmoddi4+0xa8>
 8000fba:	e9c6 4800 	strd	r4, r8, [r6]
 8000fbe:	e7df      	b.n	8000f80 <__udivmoddi4+0xa8>
 8000fc0:	b902      	cbnz	r2, 8000fc4 <__udivmoddi4+0xec>
 8000fc2:	deff      	udf	#255	; 0xff
 8000fc4:	fab2 f282 	clz	r2, r2
 8000fc8:	2a00      	cmp	r2, #0
 8000fca:	f040 8091 	bne.w	80010f0 <__udivmoddi4+0x218>
 8000fce:	eba1 000c 	sub.w	r0, r1, ip
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fd8:	fa1f fe8c 	uxth.w	lr, ip
 8000fdc:	fbb0 f3f7 	udiv	r3, r0, r7
 8000fe0:	fb07 0013 	mls	r0, r7, r3, r0
 8000fe4:	0c25      	lsrs	r5, r4, #16
 8000fe6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000fea:	fb0e f003 	mul.w	r0, lr, r3
 8000fee:	42a8      	cmp	r0, r5
 8000ff0:	d908      	bls.n	8001004 <__udivmoddi4+0x12c>
 8000ff2:	eb1c 0505 	adds.w	r5, ip, r5
 8000ff6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ffa:	d202      	bcs.n	8001002 <__udivmoddi4+0x12a>
 8000ffc:	42a8      	cmp	r0, r5
 8000ffe:	f200 80ce 	bhi.w	800119e <__udivmoddi4+0x2c6>
 8001002:	4643      	mov	r3, r8
 8001004:	1a2d      	subs	r5, r5, r0
 8001006:	fbb5 f0f7 	udiv	r0, r5, r7
 800100a:	fb07 5510 	mls	r5, r7, r0, r5
 800100e:	fb0e fe00 	mul.w	lr, lr, r0
 8001012:	b2a4      	uxth	r4, r4
 8001014:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001018:	45a6      	cmp	lr, r4
 800101a:	d908      	bls.n	800102e <__udivmoddi4+0x156>
 800101c:	eb1c 0404 	adds.w	r4, ip, r4
 8001020:	f100 35ff 	add.w	r5, r0, #4294967295
 8001024:	d202      	bcs.n	800102c <__udivmoddi4+0x154>
 8001026:	45a6      	cmp	lr, r4
 8001028:	f200 80b6 	bhi.w	8001198 <__udivmoddi4+0x2c0>
 800102c:	4628      	mov	r0, r5
 800102e:	eba4 040e 	sub.w	r4, r4, lr
 8001032:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001036:	e79e      	b.n	8000f76 <__udivmoddi4+0x9e>
 8001038:	f1c1 0720 	rsb	r7, r1, #32
 800103c:	408b      	lsls	r3, r1
 800103e:	fa22 fc07 	lsr.w	ip, r2, r7
 8001042:	ea4c 0c03 	orr.w	ip, ip, r3
 8001046:	fa25 fa07 	lsr.w	sl, r5, r7
 800104a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800104e:	fbba f8f9 	udiv	r8, sl, r9
 8001052:	fa20 f307 	lsr.w	r3, r0, r7
 8001056:	fb09 aa18 	mls	sl, r9, r8, sl
 800105a:	408d      	lsls	r5, r1
 800105c:	fa1f fe8c 	uxth.w	lr, ip
 8001060:	431d      	orrs	r5, r3
 8001062:	fa00 f301 	lsl.w	r3, r0, r1
 8001066:	fb08 f00e 	mul.w	r0, r8, lr
 800106a:	0c2c      	lsrs	r4, r5, #16
 800106c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001070:	42a0      	cmp	r0, r4
 8001072:	fa02 f201 	lsl.w	r2, r2, r1
 8001076:	d90b      	bls.n	8001090 <__udivmoddi4+0x1b8>
 8001078:	eb1c 0404 	adds.w	r4, ip, r4
 800107c:	f108 3aff 	add.w	sl, r8, #4294967295
 8001080:	f080 8088 	bcs.w	8001194 <__udivmoddi4+0x2bc>
 8001084:	42a0      	cmp	r0, r4
 8001086:	f240 8085 	bls.w	8001194 <__udivmoddi4+0x2bc>
 800108a:	f1a8 0802 	sub.w	r8, r8, #2
 800108e:	4464      	add	r4, ip
 8001090:	1a24      	subs	r4, r4, r0
 8001092:	fbb4 f0f9 	udiv	r0, r4, r9
 8001096:	fb09 4410 	mls	r4, r9, r0, r4
 800109a:	fb00 fe0e 	mul.w	lr, r0, lr
 800109e:	b2ad      	uxth	r5, r5
 80010a0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80010a4:	45a6      	cmp	lr, r4
 80010a6:	d908      	bls.n	80010ba <__udivmoddi4+0x1e2>
 80010a8:	eb1c 0404 	adds.w	r4, ip, r4
 80010ac:	f100 35ff 	add.w	r5, r0, #4294967295
 80010b0:	d26c      	bcs.n	800118c <__udivmoddi4+0x2b4>
 80010b2:	45a6      	cmp	lr, r4
 80010b4:	d96a      	bls.n	800118c <__udivmoddi4+0x2b4>
 80010b6:	3802      	subs	r0, #2
 80010b8:	4464      	add	r4, ip
 80010ba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80010be:	fba0 9502 	umull	r9, r5, r0, r2
 80010c2:	eba4 040e 	sub.w	r4, r4, lr
 80010c6:	42ac      	cmp	r4, r5
 80010c8:	46c8      	mov	r8, r9
 80010ca:	46ae      	mov	lr, r5
 80010cc:	d356      	bcc.n	800117c <__udivmoddi4+0x2a4>
 80010ce:	d053      	beq.n	8001178 <__udivmoddi4+0x2a0>
 80010d0:	2e00      	cmp	r6, #0
 80010d2:	d069      	beq.n	80011a8 <__udivmoddi4+0x2d0>
 80010d4:	ebb3 0208 	subs.w	r2, r3, r8
 80010d8:	eb64 040e 	sbc.w	r4, r4, lr
 80010dc:	fa22 f301 	lsr.w	r3, r2, r1
 80010e0:	fa04 f707 	lsl.w	r7, r4, r7
 80010e4:	431f      	orrs	r7, r3
 80010e6:	40cc      	lsrs	r4, r1
 80010e8:	e9c6 7400 	strd	r7, r4, [r6]
 80010ec:	2100      	movs	r1, #0
 80010ee:	e747      	b.n	8000f80 <__udivmoddi4+0xa8>
 80010f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80010f4:	f1c2 0120 	rsb	r1, r2, #32
 80010f8:	fa25 f301 	lsr.w	r3, r5, r1
 80010fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001100:	fa20 f101 	lsr.w	r1, r0, r1
 8001104:	4095      	lsls	r5, r2
 8001106:	430d      	orrs	r5, r1
 8001108:	fbb3 f1f7 	udiv	r1, r3, r7
 800110c:	fb07 3311 	mls	r3, r7, r1, r3
 8001110:	fa1f fe8c 	uxth.w	lr, ip
 8001114:	0c28      	lsrs	r0, r5, #16
 8001116:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800111a:	fb01 f30e 	mul.w	r3, r1, lr
 800111e:	4283      	cmp	r3, r0
 8001120:	fa04 f402 	lsl.w	r4, r4, r2
 8001124:	d908      	bls.n	8001138 <__udivmoddi4+0x260>
 8001126:	eb1c 0000 	adds.w	r0, ip, r0
 800112a:	f101 38ff 	add.w	r8, r1, #4294967295
 800112e:	d22f      	bcs.n	8001190 <__udivmoddi4+0x2b8>
 8001130:	4283      	cmp	r3, r0
 8001132:	d92d      	bls.n	8001190 <__udivmoddi4+0x2b8>
 8001134:	3902      	subs	r1, #2
 8001136:	4460      	add	r0, ip
 8001138:	1ac0      	subs	r0, r0, r3
 800113a:	fbb0 f3f7 	udiv	r3, r0, r7
 800113e:	fb07 0013 	mls	r0, r7, r3, r0
 8001142:	b2ad      	uxth	r5, r5
 8001144:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001148:	fb03 f00e 	mul.w	r0, r3, lr
 800114c:	42a8      	cmp	r0, r5
 800114e:	d908      	bls.n	8001162 <__udivmoddi4+0x28a>
 8001150:	eb1c 0505 	adds.w	r5, ip, r5
 8001154:	f103 38ff 	add.w	r8, r3, #4294967295
 8001158:	d216      	bcs.n	8001188 <__udivmoddi4+0x2b0>
 800115a:	42a8      	cmp	r0, r5
 800115c:	d914      	bls.n	8001188 <__udivmoddi4+0x2b0>
 800115e:	3b02      	subs	r3, #2
 8001160:	4465      	add	r5, ip
 8001162:	1a28      	subs	r0, r5, r0
 8001164:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001168:	e738      	b.n	8000fdc <__udivmoddi4+0x104>
 800116a:	4631      	mov	r1, r6
 800116c:	4630      	mov	r0, r6
 800116e:	e707      	b.n	8000f80 <__udivmoddi4+0xa8>
 8001170:	462f      	mov	r7, r5
 8001172:	e6e4      	b.n	8000f3e <__udivmoddi4+0x66>
 8001174:	4618      	mov	r0, r3
 8001176:	e6f9      	b.n	8000f6c <__udivmoddi4+0x94>
 8001178:	454b      	cmp	r3, r9
 800117a:	d2a9      	bcs.n	80010d0 <__udivmoddi4+0x1f8>
 800117c:	ebb9 0802 	subs.w	r8, r9, r2
 8001180:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001184:	3801      	subs	r0, #1
 8001186:	e7a3      	b.n	80010d0 <__udivmoddi4+0x1f8>
 8001188:	4643      	mov	r3, r8
 800118a:	e7ea      	b.n	8001162 <__udivmoddi4+0x28a>
 800118c:	4628      	mov	r0, r5
 800118e:	e794      	b.n	80010ba <__udivmoddi4+0x1e2>
 8001190:	4641      	mov	r1, r8
 8001192:	e7d1      	b.n	8001138 <__udivmoddi4+0x260>
 8001194:	46d0      	mov	r8, sl
 8001196:	e77b      	b.n	8001090 <__udivmoddi4+0x1b8>
 8001198:	4464      	add	r4, ip
 800119a:	3802      	subs	r0, #2
 800119c:	e747      	b.n	800102e <__udivmoddi4+0x156>
 800119e:	3b02      	subs	r3, #2
 80011a0:	4465      	add	r5, ip
 80011a2:	e72f      	b.n	8001004 <__udivmoddi4+0x12c>
 80011a4:	4608      	mov	r0, r1
 80011a6:	e706      	b.n	8000fb6 <__udivmoddi4+0xde>
 80011a8:	4631      	mov	r1, r6
 80011aa:	e6e9      	b.n	8000f80 <__udivmoddi4+0xa8>

080011ac <__aeabi_idiv0>:
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop

080011b0 <MADC_vInit>:
/************************************************************************/
/*                     Functions  implementations                      	*/
/************************************************************************/

void MADC_vInit( void )
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
	//MRCC_vEnablePeriphralCLK( RCC_APB2, APB2ENR_ADC1EN ) ;

	// EN/DIS power for ADC to be turned on/off:
	#if ADC_ON == ENABLE

	SET_BIT( ADC->CR2, ADON ) ;
 80011b4:	4b3a      	ldr	r3, [pc, #232]	; (80012a0 <MADC_vInit+0xf0>)
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	4a39      	ldr	r2, [pc, #228]	; (80012a0 <MADC_vInit+0xf0>)
 80011ba:	f043 0301 	orr.w	r3, r3, #1
 80011be:	6093      	str	r3, [r2, #8]
	#endif

	// Select ADC prescalers(2/4/6/8):
	#if ADC_PRESCALER == DIV_BY_2

	CLR_BIT( ADC->CCR, ADCPRE0 ) ;
 80011c0:	4b37      	ldr	r3, [pc, #220]	; (80012a0 <MADC_vInit+0xf0>)
 80011c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011c4:	4a36      	ldr	r2, [pc, #216]	; (80012a0 <MADC_vInit+0xf0>)
 80011c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ca:	6513      	str	r3, [r2, #80]	; 0x50
	CLR_BIT( ADC->CCR, ADCPRE0 ) ;
 80011cc:	4b34      	ldr	r3, [pc, #208]	; (80012a0 <MADC_vInit+0xf0>)
 80011ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011d0:	4a33      	ldr	r2, [pc, #204]	; (80012a0 <MADC_vInit+0xf0>)
 80011d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011d6:	6513      	str	r3, [r2, #80]	; 0x50


	// Select ADC Resolution(12/10/8/6):
	#if RESOLUTION == _12_BITS

	CLR_BIT( ADC->CR1, RES0 ) ;
 80011d8:	4b31      	ldr	r3, [pc, #196]	; (80012a0 <MADC_vInit+0xf0>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	4a30      	ldr	r2, [pc, #192]	; (80012a0 <MADC_vInit+0xf0>)
 80011de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80011e2:	6053      	str	r3, [r2, #4]
	CLR_BIT( ADC->CR1, RES1 ) ;
 80011e4:	4b2e      	ldr	r3, [pc, #184]	; (80012a0 <MADC_vInit+0xf0>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	4a2d      	ldr	r2, [pc, #180]	; (80012a0 <MADC_vInit+0xf0>)
 80011ea:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80011ee:	6053      	str	r3, [r2, #4]


	// ADC Data Alignment(Right/Left):
	#if DATA_ALIGN == RIGHT

	CLR_BIT( ADC->CR2, ALIGN ) ;
 80011f0:	4b2b      	ldr	r3, [pc, #172]	; (80012a0 <MADC_vInit+0xf0>)
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	4a2a      	ldr	r2, [pc, #168]	; (80012a0 <MADC_vInit+0xf0>)
 80011f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80011fa:	6093      	str	r3, [r2, #8]

	SET_BIT( ADC->CR1, JEOCIE ) ;

	#elif JEOCIE_MODE == DISABLE

	CLR_BIT( ADC->CR1, JEOCIE ) ;
 80011fc:	4b28      	ldr	r3, [pc, #160]	; (80012a0 <MADC_vInit+0xf0>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	4a27      	ldr	r2, [pc, #156]	; (80012a0 <MADC_vInit+0xf0>)
 8001202:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001206:	6053      	str	r3, [r2, #4]

	SET_BIT( ADC->CR1, EOCIE ) ;

	#elif EOCIE_MODE == DISABLE

	CLR_BIT( ADC->CR1, EOCIE ) ;
 8001208:	4b25      	ldr	r3, [pc, #148]	; (80012a0 <MADC_vInit+0xf0>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	4a24      	ldr	r2, [pc, #144]	; (80012a0 <MADC_vInit+0xf0>)
 800120e:	f023 0320 	bic.w	r3, r3, #32
 8001212:	6053      	str	r3, [r2, #4]

	SET_BIT( ADC->CR1, OVRIE ) ;

	#elif OVERRUN_INT == DISABLE

	CLR_BIT( ADC->CR1, OVRIE ) ;
 8001214:	4b22      	ldr	r3, [pc, #136]	; (80012a0 <MADC_vInit+0xf0>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	4a21      	ldr	r2, [pc, #132]	; (80012a0 <MADC_vInit+0xf0>)
 800121a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800121e:	6053      	str	r3, [r2, #4]
	#endif

	// Select Regular channel sequence length(1/2/3/.../16):
	#if REG_SQ_LENGTH == _1_CONV

	CLR_BIT( ADC->SQR1, L0 ) ;
 8001220:	4b1f      	ldr	r3, [pc, #124]	; (80012a0 <MADC_vInit+0xf0>)
 8001222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001224:	4a1e      	ldr	r2, [pc, #120]	; (80012a0 <MADC_vInit+0xf0>)
 8001226:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800122a:	62d3      	str	r3, [r2, #44]	; 0x2c
	CLR_BIT( ADC->SQR1, L1 ) ;
 800122c:	4b1c      	ldr	r3, [pc, #112]	; (80012a0 <MADC_vInit+0xf0>)
 800122e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001230:	4a1b      	ldr	r2, [pc, #108]	; (80012a0 <MADC_vInit+0xf0>)
 8001232:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001236:	62d3      	str	r3, [r2, #44]	; 0x2c
	CLR_BIT( ADC->SQR1, L2 ) ;
 8001238:	4b19      	ldr	r3, [pc, #100]	; (80012a0 <MADC_vInit+0xf0>)
 800123a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800123c:	4a18      	ldr	r2, [pc, #96]	; (80012a0 <MADC_vInit+0xf0>)
 800123e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001242:	62d3      	str	r3, [r2, #44]	; 0x2c
	CLR_BIT( ADC->SQR1, L3 ) ;
 8001244:	4b16      	ldr	r3, [pc, #88]	; (80012a0 <MADC_vInit+0xf0>)
 8001246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001248:	4a15      	ldr	r2, [pc, #84]	; (80012a0 <MADC_vInit+0xf0>)
 800124a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800124e:	62d3      	str	r3, [r2, #44]	; 0x2c

	SET_BIT( ADC->CR1, SCAN ) ;

	#elif SCAN_MODE == DISABLE

	CLR_BIT( ADC->CR1, SCAN ) ;
 8001250:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <MADC_vInit+0xf0>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	4a12      	ldr	r2, [pc, #72]	; (80012a0 <MADC_vInit+0xf0>)
 8001256:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800125a:	6053      	str	r3, [r2, #4]

	SET_BIT( ADC->CR1, DISCEN ) ;

	#elif DISC_MODE == DISABLE

	CLR_BIT( ADC->CR1, DISCEN ) ;
 800125c:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <MADC_vInit+0xf0>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	4a0f      	ldr	r2, [pc, #60]	; (80012a0 <MADC_vInit+0xf0>)
 8001262:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001266:	6053      	str	r3, [r2, #4]
	#endif

	// Discontinuous mode channel count(1/2/3/4/.../8):
	#if DISC_CHANNEL_NUM == _1_CHANNEL

	CLR_BIT( ADC->CR1, DISCNUM0 ) ;
 8001268:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <MADC_vInit+0xf0>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	4a0c      	ldr	r2, [pc, #48]	; (80012a0 <MADC_vInit+0xf0>)
 800126e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001272:	6053      	str	r3, [r2, #4]
	CLR_BIT( ADC->CR1, DISCNUM1 ) ;
 8001274:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <MADC_vInit+0xf0>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	4a09      	ldr	r2, [pc, #36]	; (80012a0 <MADC_vInit+0xf0>)
 800127a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800127e:	6053      	str	r3, [r2, #4]
	CLR_BIT( ADC->CR1, DISCNUM2 ) ;
 8001280:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <MADC_vInit+0xf0>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	4a06      	ldr	r2, [pc, #24]	; (80012a0 <MADC_vInit+0xf0>)
 8001286:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800128a:	6053      	str	r3, [r2, #4]
	#endif

	// EN/DIS Continuous mode:
	#if CONT_CONV == ENABLE

	SET_BIT( ADC->CR2, CONT ) ;
 800128c:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <MADC_vInit+0xf0>)
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	4a03      	ldr	r2, [pc, #12]	; (80012a0 <MADC_vInit+0xf0>)
 8001292:	f043 0302 	orr.w	r3, r3, #2
 8001296:	6093      	str	r3, [r2, #8]

	CLR_BIT( ADC->CR2, CONT ) ;

	#endif

}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr
 80012a0:	40012400 	.word	0x40012400

080012a4 <MADC_vSelectChannel>:

/********************************************************************************************************************/
/*******************************************************************************************************************/

void MADC_vSelectChannel( uint8_t A_u8ChannelNum )
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	71fb      	strb	r3, [r7, #7]

	// Select Regular channel(1/2/3/.../16)
	ADC->SQR3 = (ADC->SQR3 & SQ1_BIT_MANIPULATION) | ( A_u8ChannelNum ) ;
 80012ae:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <MADC_vSelectChannel+0x24>)
 80012b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012b2:	f023 021f 	bic.w	r2, r3, #31
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	4903      	ldr	r1, [pc, #12]	; (80012c8 <MADC_vSelectChannel+0x24>)
 80012ba:	4313      	orrs	r3, r2
 80012bc:	634b      	str	r3, [r1, #52]	; 0x34

}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr
 80012c8:	40012400 	.word	0x40012400

080012cc <MADC_u16ConvertToDigital>:

/********************************************************************************************************************/
/*******************************************************************************************************************/

uint16_t MADC_u16ConvertToDigital( uint8_t A_u8ChannelNum )
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]

	// Select Regular channel(1/2/3/.../16)
	ADC->SQR3 = (ADC->SQR3 & SQ1_BIT_MANIPULATION) | ( A_u8ChannelNum ) ;
 80012d6:	4b12      	ldr	r3, [pc, #72]	; (8001320 <MADC_u16ConvertToDigital+0x54>)
 80012d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012da:	f023 021f 	bic.w	r2, r3, #31
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	490f      	ldr	r1, [pc, #60]	; (8001320 <MADC_u16ConvertToDigital+0x54>)
 80012e2:	4313      	orrs	r3, r2
 80012e4:	634b      	str	r3, [r1, #52]	; 0x34

	// Start conversion of regular channels:
	SET_BIT( ADC->CR2, SWSTART ) ;
 80012e6:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <MADC_u16ConvertToDigital+0x54>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	4a0d      	ldr	r2, [pc, #52]	; (8001320 <MADC_u16ConvertToDigital+0x54>)
 80012ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80012f0:	6093      	str	r3, [r2, #8]

	// Poll on the end of coversion flag until it's raised:
	while( GET_BIT(ADC->SR, EOC) != ADC_FLAG_SET ) ;
 80012f2:	bf00      	nop
 80012f4:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <MADC_u16ConvertToDigital+0x54>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	085b      	lsrs	r3, r3, #1
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d1f8      	bne.n	80012f4 <MADC_u16ConvertToDigital+0x28>

	// Clear the flag:
	CLR_BIT( ADC->SR, EOC ) ;
 8001302:	4b07      	ldr	r3, [pc, #28]	; (8001320 <MADC_u16ConvertToDigital+0x54>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a06      	ldr	r2, [pc, #24]	; (8001320 <MADC_u16ConvertToDigital+0x54>)
 8001308:	f023 0302 	bic.w	r3, r3, #2
 800130c:	6013      	str	r3, [r2, #0]

	// Return ADC Data:
	return ADC->DR ;
 800130e:	4b04      	ldr	r3, [pc, #16]	; (8001320 <MADC_u16ConvertToDigital+0x54>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001312:	b29b      	uxth	r3, r3

}
 8001314:	4618      	mov	r0, r3
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	40012400 	.word	0x40012400

08001324 <MADC_vEnable>:

/********************************************************************************************************************/
/*******************************************************************************************************************/

void MADC_vEnable( void )
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0

	// EN CLK on APB2 bus to be able to operate ADC peripheral:
	//MRCC_vEnablePeriphralCLK( RCC_APB2, APB2ENR_ADC1EN ) ;

	// Power on ADC:
	SET_BIT( ADC->CR2, ADON ) ;
 8001328:	4b04      	ldr	r3, [pc, #16]	; (800133c <MADC_vEnable+0x18>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	4a03      	ldr	r2, [pc, #12]	; (800133c <MADC_vEnable+0x18>)
 800132e:	f043 0301 	orr.w	r3, r3, #1
 8001332:	6093      	str	r3, [r2, #8]

}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr
 800133c:	40012400 	.word	0x40012400

08001340 <MAFIO_u8EXTIPortRemap>:
 *
 ******************************************************************************
 */

uint8_t   MAFIO_u8EXTIPortRemap ( AFIO_LineNumber_t Copy_LineNumber , AFIO_PortMap_t Copy_PortMap )
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	460a      	mov	r2, r1
 800134a:	71fb      	strb	r3, [r7, #7]
 800134c:	4613      	mov	r3, r2
 800134e:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK;
 8001350:	2301      	movs	r3, #1
 8001352:	73fb      	strb	r3, [r7, #15]
	if ( Copy_LineNumber <= AFIO_LINE15 &&  Copy_PortMap <= AFIO_Port_G )
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	2b0f      	cmp	r3, #15
 8001358:	d82d      	bhi.n	80013b6 <MAFIO_u8EXTIPortRemap+0x76>
 800135a:	79bb      	ldrb	r3, [r7, #6]
 800135c:	2b06      	cmp	r3, #6
 800135e:	d82a      	bhi.n	80013b6 <MAFIO_u8EXTIPortRemap+0x76>
	{
		uint8_t Local_u8Reg  = Copy_LineNumber / AFIO_PORT_REMAP_ACCESS ;
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	089b      	lsrs	r3, r3, #2
 8001364:	73bb      	strb	r3, [r7, #14]
		uint8_t Local_u8Line = Copy_LineNumber % AFIO_PORT_REMAP_ACCESS ;
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	f003 0303 	and.w	r3, r3, #3
 800136c:	737b      	strb	r3, [r7, #13]
		AFIO -> EXTICR[ Local_u8Reg ] &=~ ( ( AFIO_PORT_EXTI_REMAP_MASK ) << ( Local_u8Line * AFIO_PORT_REMAP_ACCESS ) ) ;
 800136e:	4a16      	ldr	r2, [pc, #88]	; (80013c8 <MAFIO_u8EXTIPortRemap+0x88>)
 8001370:	7bbb      	ldrb	r3, [r7, #14]
 8001372:	3302      	adds	r3, #2
 8001374:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001378:	7b7b      	ldrb	r3, [r7, #13]
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	210f      	movs	r1, #15
 800137e:	fa01 f303 	lsl.w	r3, r1, r3
 8001382:	43db      	mvns	r3, r3
 8001384:	4618      	mov	r0, r3
 8001386:	4910      	ldr	r1, [pc, #64]	; (80013c8 <MAFIO_u8EXTIPortRemap+0x88>)
 8001388:	7bbb      	ldrb	r3, [r7, #14]
 800138a:	4002      	ands	r2, r0
 800138c:	3302      	adds	r3, #2
 800138e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		AFIO -> EXTICR[ Local_u8Reg ] |=  ( ( Copy_PortMap ) << ( Local_u8Line * AFIO_PORT_REMAP_ACCESS ) ) ;
 8001392:	4a0d      	ldr	r2, [pc, #52]	; (80013c8 <MAFIO_u8EXTIPortRemap+0x88>)
 8001394:	7bbb      	ldrb	r3, [r7, #14]
 8001396:	3302      	adds	r3, #2
 8001398:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800139c:	79b9      	ldrb	r1, [r7, #6]
 800139e:	7b7b      	ldrb	r3, [r7, #13]
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	fa01 f303 	lsl.w	r3, r1, r3
 80013a6:	4618      	mov	r0, r3
 80013a8:	4907      	ldr	r1, [pc, #28]	; (80013c8 <MAFIO_u8EXTIPortRemap+0x88>)
 80013aa:	7bbb      	ldrb	r3, [r7, #14]
 80013ac:	4302      	orrs	r2, r0
 80013ae:	3302      	adds	r3, #2
 80013b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	{
 80013b4:	e001      	b.n	80013ba <MAFIO_u8EXTIPortRemap+0x7a>
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
 80013b6:	2300      	movs	r3, #0
 80013b8:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState ;
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc80      	pop	{r7}
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	40010000 	.word	0x40010000

080013cc <MAFIO_u8TIM3PortRemap>:
 *
 ******************************************************************************
 */

uint8_t   MAFIO_u8TIM3PortRemap (  TIM3_REMAP_t Copy_RemapType )
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK;
 80013d6:	2301      	movs	r3, #1
 80013d8:	73fb      	strb	r3, [r7, #15]
	if ( Copy_RemapType <= FULL_REMAP  )
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	2b03      	cmp	r3, #3
 80013de:	d80e      	bhi.n	80013fe <MAFIO_u8TIM3PortRemap+0x32>
	{
		AFIO -> MAPR &=~ ( ( AFIO_PORT_TIM3_REMAP_MASK ) << ( AFIO_MAPR_PIN_TIM3_REMAP   ) ) ;
 80013e0:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <MAFIO_u8TIM3PortRemap+0x44>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	4a0a      	ldr	r2, [pc, #40]	; (8001410 <MAFIO_u8TIM3PortRemap+0x44>)
 80013e6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80013ea:	6053      	str	r3, [r2, #4]
		AFIO -> MAPR |=  ( ( Copy_RemapType ) << ( AFIO_MAPR_PIN_TIM3_REMAP  ) ) ;
 80013ec:	4b08      	ldr	r3, [pc, #32]	; (8001410 <MAFIO_u8TIM3PortRemap+0x44>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	79fa      	ldrb	r2, [r7, #7]
 80013f2:	0292      	lsls	r2, r2, #10
 80013f4:	4611      	mov	r1, r2
 80013f6:	4a06      	ldr	r2, [pc, #24]	; (8001410 <MAFIO_u8TIM3PortRemap+0x44>)
 80013f8:	430b      	orrs	r3, r1
 80013fa:	6053      	str	r3, [r2, #4]
 80013fc:	e001      	b.n	8001402 <MAFIO_u8TIM3PortRemap+0x36>
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
 80013fe:	2300      	movs	r3, #0
 8001400:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState ;
 8001402:	7bfb      	ldrb	r3, [r7, #15]
}
 8001404:	4618      	mov	r0, r3
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	40010000 	.word	0x40010000

08001414 <SCARKIT_voidInit>:
static int   Local_intAdcValue      = 0       ;
/*************************************************************************************************************************************/
/********************************************************* Functions implementations *************************************************/
/*************************************************************************************************************************************/
void SCARKIT_voidInit( void )
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
	/*----------------------------------------------------------------*/
	MGPIO_u8SetPinDirection( CARKIT_ADC_VOLT_PIN , INPUT_ANALOG );
 8001418:	2200      	movs	r2, #0
 800141a:	2100      	movs	r1, #0
 800141c:	2001      	movs	r0, #1
 800141e:	f000 fc35 	bl	8001c8c <MGPIO_u8SetPinDirection>
	MADC_vInit();
 8001422:	f7ff fec5 	bl	80011b0 <MADC_vInit>
	MADC_vEnable();
 8001426:	f7ff ff7d 	bl	8001324 <MADC_vEnable>
	MADC_vSelectChannel    (CARKIT_ADC_VOLT_CHANNEL);
 800142a:	2008      	movs	r0, #8
 800142c:	f7ff ff3a 	bl	80012a4 <MADC_vSelectChannel>
	/*----------------------------------------------------------------*/
	MAFIO_u8TIM3PortRemap  (CARKIT_TIMER_PORT_REMAP);
 8001430:	2002      	movs	r0, #2
 8001432:	f7ff ffcb 	bl	80013cc <MAFIO_u8TIM3PortRemap>
	MGPIO_u8SetPinDirection(CARKIT_L298N_EN_A_PIN , OUTPUT_SPEED_2MHZ_AFPP );
 8001436:	220a      	movs	r2, #10
 8001438:	2101      	movs	r1, #1
 800143a:	2001      	movs	r0, #1
 800143c:	f000 fc26 	bl	8001c8c <MGPIO_u8SetPinDirection>
	STIMERS_u8GeneratePWM  (CARKIT_SPEED_TIMER_CHANNEL_R, CARKIT_L298N_FREQ , CARKIT_L298N_INIT_SPEED );
 8001440:	2332      	movs	r3, #50	; 0x32
 8001442:	f240 2212 	movw	r2, #530	; 0x212
 8001446:	2101      	movs	r1, #1
 8001448:	2001      	movs	r0, #1
 800144a:	f002 fa05 	bl	8003858 <STIMERS_u8GeneratePWM>
	MGPIO_u8SetPinDirection(CARKIT_L298N_IN_1_PIN , OUTPUT_SPEED_2MHZ_PP );
 800144e:	2202      	movs	r2, #2
 8001450:	2106      	movs	r1, #6
 8001452:	2001      	movs	r0, #1
 8001454:	f000 fc1a 	bl	8001c8c <MGPIO_u8SetPinDirection>
	MGPIO_u8SetPinDirection(CARKIT_L298N_IN_2_PIN , OUTPUT_SPEED_2MHZ_PP );
 8001458:	2202      	movs	r2, #2
 800145a:	2107      	movs	r1, #7
 800145c:	2001      	movs	r0, #1
 800145e:	f000 fc15 	bl	8001c8c <MGPIO_u8SetPinDirection>
	/*----------------------------------------------------------------*/
	MGPIO_u8SetPinDirection(CARKIT_L298N_EN_B_PIN, OUTPUT_SPEED_2MHZ_AFPP );
 8001462:	220a      	movs	r2, #10
 8001464:	2105      	movs	r1, #5
 8001466:	2001      	movs	r0, #1
 8001468:	f000 fc10 	bl	8001c8c <MGPIO_u8SetPinDirection>
	STIMERS_u8GeneratePWM  (CARKIT_SPEED_TIMER_CHANNEL_L, CARKIT_L298N_FREQ , CARKIT_L298N_INIT_SPEED );
 800146c:	2332      	movs	r3, #50	; 0x32
 800146e:	f240 2212 	movw	r2, #530	; 0x212
 8001472:	2103      	movs	r1, #3
 8001474:	2001      	movs	r0, #1
 8001476:	f002 f9ef 	bl	8003858 <STIMERS_u8GeneratePWM>
	MGPIO_u8SetPinDirection(CARKIT_L298N_IN_3_PIN, OUTPUT_SPEED_2MHZ_PP );
 800147a:	2202      	movs	r2, #2
 800147c:	2108      	movs	r1, #8
 800147e:	2001      	movs	r0, #1
 8001480:	f000 fc04 	bl	8001c8c <MGPIO_u8SetPinDirection>
	MGPIO_u8SetPinDirection(CARKIT_L298N_IN_4_PIN, OUTPUT_SPEED_2MHZ_PP );
 8001484:	2202      	movs	r2, #2
 8001486:	2109      	movs	r1, #9
 8001488:	2001      	movs	r0, #1
 800148a:	f000 fbff 	bl	8001c8c <MGPIO_u8SetPinDirection>
	/*----------------------------------------------------------------*/
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
	...

08001494 <SCARKIT_u8GetVoltageValue>:
uint8_t SCARKIT_u8GetVoltageValue( void )
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
	Local_intAdcValue      = MADC_u16ConvertToDigital(CARKIT_ADC_VOLT_CHANNEL);
 8001498:	2008      	movs	r0, #8
 800149a:	f7ff ff17 	bl	80012cc <MADC_u16ConvertToDigital>
 800149e:	4603      	mov	r3, r0
 80014a0:	461a      	mov	r2, r3
 80014a2:	4b1e      	ldr	r3, [pc, #120]	; (800151c <SCARKIT_u8GetVoltageValue+0x88>)
 80014a4:	601a      	str	r2, [r3, #0]
	Local_floatAdcVoltage  = (Local_intAdcValue * Local_floatRefVoltage) / 4096.0;
 80014a6:	4b1d      	ldr	r3, [pc, #116]	; (800151c <SCARKIT_u8GetVoltageValue+0x88>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fb38 	bl	8000b20 <__aeabi_i2f>
 80014b0:	4602      	mov	r2, r0
 80014b2:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <SCARKIT_u8GetVoltageValue+0x8c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4619      	mov	r1, r3
 80014b8:	4610      	mov	r0, r2
 80014ba:	f7ff fb85 	bl	8000bc8 <__aeabi_fmul>
 80014be:	4603      	mov	r3, r0
 80014c0:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff fc33 	bl	8000d30 <__aeabi_fdiv>
 80014ca:	4603      	mov	r3, r0
 80014cc:	461a      	mov	r2, r3
 80014ce:	4b15      	ldr	r3, [pc, #84]	; (8001524 <SCARKIT_u8GetVoltageValue+0x90>)
 80014d0:	601a      	str	r2, [r3, #0]
	Local_floatInVoltage   = Local_floatAdcVoltage*((Local_floatR1+Local_floatR2)/Local_floatR2);
 80014d2:	4b15      	ldr	r3, [pc, #84]	; (8001528 <SCARKIT_u8GetVoltageValue+0x94>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a15      	ldr	r2, [pc, #84]	; (800152c <SCARKIT_u8GetVoltageValue+0x98>)
 80014d8:	6812      	ldr	r2, [r2, #0]
 80014da:	4611      	mov	r1, r2
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff fa6b 	bl	80009b8 <__addsf3>
 80014e2:	4603      	mov	r3, r0
 80014e4:	461a      	mov	r2, r3
 80014e6:	4b11      	ldr	r3, [pc, #68]	; (800152c <SCARKIT_u8GetVoltageValue+0x98>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4619      	mov	r1, r3
 80014ec:	4610      	mov	r0, r2
 80014ee:	f7ff fc1f 	bl	8000d30 <__aeabi_fdiv>
 80014f2:	4603      	mov	r3, r0
 80014f4:	461a      	mov	r2, r3
 80014f6:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <SCARKIT_u8GetVoltageValue+0x90>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4619      	mov	r1, r3
 80014fc:	4610      	mov	r0, r2
 80014fe:	f7ff fb63 	bl	8000bc8 <__aeabi_fmul>
 8001502:	4603      	mov	r3, r0
 8001504:	461a      	mov	r2, r3
 8001506:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <SCARKIT_u8GetVoltageValue+0x9c>)
 8001508:	601a      	str	r2, [r3, #0]
	return (uint8_t)Local_floatInVoltage ;
 800150a:	4b09      	ldr	r3, [pc, #36]	; (8001530 <SCARKIT_u8GetVoltageValue+0x9c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff fcaa 	bl	8000e68 <__aeabi_f2uiz>
 8001514:	4603      	mov	r3, r0
 8001516:	b2db      	uxtb	r3, r3
}
 8001518:	4618      	mov	r0, r3
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20000074 	.word	0x20000074
 8001520:	20000008 	.word	0x20000008
 8001524:	2000006c 	.word	0x2000006c
 8001528:	20000000 	.word	0x20000000
 800152c:	20000004 	.word	0x20000004
 8001530:	20000070 	.word	0x20000070

08001534 <SCARKIT_voidCarSpeed>:
void SCARKIT_voidCarSpeed ( CarSpeedWheel_t Copy_SpeedWheel , uint8_t Copy_u8SpeedPercentageValue )
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	460a      	mov	r2, r1
 800153e:	71fb      	strb	r3, [r7, #7]
 8001540:	4613      	mov	r3, r2
 8001542:	71bb      	strb	r3, [r7, #6]
	if ( Copy_u8SpeedPercentageValue > 90 )
 8001544:	79bb      	ldrb	r3, [r7, #6]
 8001546:	2b5a      	cmp	r3, #90	; 0x5a
 8001548:	d902      	bls.n	8001550 <SCARKIT_voidCarSpeed+0x1c>
	{
		Copy_u8SpeedPercentageValue = 90 ;
 800154a:	235a      	movs	r3, #90	; 0x5a
 800154c:	71bb      	strb	r3, [r7, #6]
 800154e:	e004      	b.n	800155a <SCARKIT_voidCarSpeed+0x26>
	}
	else if ( Copy_u8SpeedPercentageValue < 30 )
 8001550:	79bb      	ldrb	r3, [r7, #6]
 8001552:	2b1d      	cmp	r3, #29
 8001554:	d801      	bhi.n	800155a <SCARKIT_voidCarSpeed+0x26>
	{
		Copy_u8SpeedPercentageValue = 30 ;
 8001556:	231e      	movs	r3, #30
 8001558:	71bb      	strb	r3, [r7, #6]
	}
	/*************************************************************************************************/
	if ( Copy_SpeedWheel == SPEED_RIGHT_WHEEL )
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d106      	bne.n	800156e <SCARKIT_voidCarSpeed+0x3a>
	{
		STIMERS_u8GeneratePWM  (CARKIT_SPEED_TIMER_CHANNEL_R, 150 , Copy_u8SpeedPercentageValue );
 8001560:	79bb      	ldrb	r3, [r7, #6]
 8001562:	2296      	movs	r2, #150	; 0x96
 8001564:	2101      	movs	r1, #1
 8001566:	2001      	movs	r0, #1
 8001568:	f002 f976 	bl	8003858 <STIMERS_u8GeneratePWM>
	{
		STIMERS_u8GeneratePWM  (CARKIT_SPEED_TIMER_CHANNEL_R, 150 , Copy_u8SpeedPercentageValue );
		STIMERS_u8GeneratePWM  (CARKIT_SPEED_TIMER_CHANNEL_L, 150 , Copy_u8SpeedPercentageValue );
	}
	/*************************************************************************************************/
}
 800156c:	e018      	b.n	80015a0 <SCARKIT_voidCarSpeed+0x6c>
	else if ( Copy_SpeedWheel == SPEED_LEFT_WHEEL )
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d106      	bne.n	8001582 <SCARKIT_voidCarSpeed+0x4e>
		STIMERS_u8GeneratePWM  (CARKIT_SPEED_TIMER_CHANNEL_L, 150 , Copy_u8SpeedPercentageValue );
 8001574:	79bb      	ldrb	r3, [r7, #6]
 8001576:	2296      	movs	r2, #150	; 0x96
 8001578:	2103      	movs	r1, #3
 800157a:	2001      	movs	r0, #1
 800157c:	f002 f96c 	bl	8003858 <STIMERS_u8GeneratePWM>
}
 8001580:	e00e      	b.n	80015a0 <SCARKIT_voidCarSpeed+0x6c>
	else if ( Copy_SpeedWheel == SPEED_BOTH_WHEEL )
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	2b02      	cmp	r3, #2
 8001586:	d10b      	bne.n	80015a0 <SCARKIT_voidCarSpeed+0x6c>
		STIMERS_u8GeneratePWM  (CARKIT_SPEED_TIMER_CHANNEL_R, 150 , Copy_u8SpeedPercentageValue );
 8001588:	79bb      	ldrb	r3, [r7, #6]
 800158a:	2296      	movs	r2, #150	; 0x96
 800158c:	2101      	movs	r1, #1
 800158e:	2001      	movs	r0, #1
 8001590:	f002 f962 	bl	8003858 <STIMERS_u8GeneratePWM>
		STIMERS_u8GeneratePWM  (CARKIT_SPEED_TIMER_CHANNEL_L, 150 , Copy_u8SpeedPercentageValue );
 8001594:	79bb      	ldrb	r3, [r7, #6]
 8001596:	2296      	movs	r2, #150	; 0x96
 8001598:	2103      	movs	r1, #3
 800159a:	2001      	movs	r0, #1
 800159c:	f002 f95c 	bl	8003858 <STIMERS_u8GeneratePWM>
}
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <SCARKIT_voidCarDirection>:
void SCARKIT_voidCarDirection ( CarDirection_t Copy_Direction  )
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]
	if ( Copy_Direction == CAR_FORWARD )
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d114      	bne.n	80015e2 <SCARKIT_voidCarDirection+0x3a>
	{
		MGPIO_u8SetPinValue(CARKIT_L298N_IN_1_PIN, HIGH );
 80015b8:	2201      	movs	r2, #1
 80015ba:	2106      	movs	r1, #6
 80015bc:	2001      	movs	r0, #1
 80015be:	f000 fbb3 	bl	8001d28 <MGPIO_u8SetPinValue>
		MGPIO_u8SetPinValue(CARKIT_L298N_IN_2_PIN, LOW  );
 80015c2:	2200      	movs	r2, #0
 80015c4:	2107      	movs	r1, #7
 80015c6:	2001      	movs	r0, #1
 80015c8:	f000 fbae 	bl	8001d28 <MGPIO_u8SetPinValue>
		MGPIO_u8SetPinValue(CARKIT_L298N_IN_3_PIN, HIGH );
 80015cc:	2201      	movs	r2, #1
 80015ce:	2108      	movs	r1, #8
 80015d0:	2001      	movs	r0, #1
 80015d2:	f000 fba9 	bl	8001d28 <MGPIO_u8SetPinValue>
		MGPIO_u8SetPinValue(CARKIT_L298N_IN_4_PIN, LOW  );
 80015d6:	2200      	movs	r2, #0
 80015d8:	2109      	movs	r1, #9
 80015da:	2001      	movs	r0, #1
 80015dc:	f000 fba4 	bl	8001d28 <MGPIO_u8SetPinValue>
		MGPIO_u8SetPinValue(CARKIT_L298N_IN_1_PIN, LOW );
		MGPIO_u8SetPinValue(CARKIT_L298N_IN_2_PIN, LOW );
		MGPIO_u8SetPinValue(CARKIT_L298N_IN_3_PIN, LOW );
		MGPIO_u8SetPinValue(CARKIT_L298N_IN_4_PIN, LOW );
	}
}
 80015e0:	e05e      	b.n	80016a0 <SCARKIT_voidCarDirection+0xf8>
	else if ( Copy_Direction ==  CAR_LEFT)
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d114      	bne.n	8001612 <SCARKIT_voidCarDirection+0x6a>
		MGPIO_u8SetPinValue(CARKIT_L298N_IN_1_PIN, LOW  );
 80015e8:	2200      	movs	r2, #0
 80015ea:	2106      	movs	r1, #6
 80015ec:	2001      	movs	r0, #1
 80015ee:	f000 fb9b 	bl	8001d28 <MGPIO_u8SetPinValue>
		MGPIO_u8SetPinValue(CARKIT_L298N_IN_2_PIN, HIGH );
 80015f2:	2201      	movs	r2, #1
 80015f4:	2107      	movs	r1, #7
 80015f6:	2001      	movs	r0, #1
 80015f8:	f000 fb96 	bl	8001d28 <MGPIO_u8SetPinValue>
		MGPIO_u8SetPinValue(CARKIT_L298N_IN_3_PIN, HIGH );
 80015fc:	2201      	movs	r2, #1
 80015fe:	2108      	movs	r1, #8
 8001600:	2001      	movs	r0, #1
 8001602:	f000 fb91 	bl	8001d28 <MGPIO_u8SetPinValue>
		MGPIO_u8SetPinValue(CARKIT_L298N_IN_4_PIN, LOW  );
 8001606:	2200      	movs	r2, #0
 8001608:	2109      	movs	r1, #9
 800160a:	2001      	movs	r0, #1
 800160c:	f000 fb8c 	bl	8001d28 <MGPIO_u8SetPinValue>
}
 8001610:	e046      	b.n	80016a0 <SCARKIT_voidCarDirection+0xf8>
	else if ( Copy_Direction == CAR_RIGHT )
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d114      	bne.n	8001642 <SCARKIT_voidCarDirection+0x9a>
		MGPIO_u8SetPinValue(CARKIT_L298N_IN_1_PIN, HIGH );
 8001618:	2201      	movs	r2, #1
 800161a:	2106      	movs	r1, #6
 800161c:	2001      	movs	r0, #1
 800161e:	f000 fb83 	bl	8001d28 <MGPIO_u8SetPinValue>
		MGPIO_u8SetPinValue(CARKIT_L298N_IN_2_PIN, LOW  );
 8001622:	2200      	movs	r2, #0
 8001624:	2107      	movs	r1, #7
 8001626:	2001      	movs	r0, #1
 8001628:	f000 fb7e 	bl	8001d28 <MGPIO_u8SetPinValue>
		MGPIO_u8SetPinValue(CARKIT_L298N_IN_3_PIN, LOW  );
 800162c:	2200      	movs	r2, #0
 800162e:	2108      	movs	r1, #8
 8001630:	2001      	movs	r0, #1
 8001632:	f000 fb79 	bl	8001d28 <MGPIO_u8SetPinValue>
		MGPIO_u8SetPinValue(CARKIT_L298N_IN_4_PIN, HIGH );
 8001636:	2201      	movs	r2, #1
 8001638:	2109      	movs	r1, #9
 800163a:	2001      	movs	r0, #1
 800163c:	f000 fb74 	bl	8001d28 <MGPIO_u8SetPinValue>
}
 8001640:	e02e      	b.n	80016a0 <SCARKIT_voidCarDirection+0xf8>
	else if ( Copy_Direction == CAR_BACKWARD )
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	2b03      	cmp	r3, #3
 8001646:	d114      	bne.n	8001672 <SCARKIT_voidCarDirection+0xca>
		MGPIO_u8SetPinValue(CARKIT_L298N_IN_1_PIN, LOW  );
 8001648:	2200      	movs	r2, #0
 800164a:	2106      	movs	r1, #6
 800164c:	2001      	movs	r0, #1
 800164e:	f000 fb6b 	bl	8001d28 <MGPIO_u8SetPinValue>
		MGPIO_u8SetPinValue(CARKIT_L298N_IN_2_PIN, HIGH );
 8001652:	2201      	movs	r2, #1
 8001654:	2107      	movs	r1, #7
 8001656:	2001      	movs	r0, #1
 8001658:	f000 fb66 	bl	8001d28 <MGPIO_u8SetPinValue>
		MGPIO_u8SetPinValue(CARKIT_L298N_IN_3_PIN, LOW  );
 800165c:	2200      	movs	r2, #0
 800165e:	2108      	movs	r1, #8
 8001660:	2001      	movs	r0, #1
 8001662:	f000 fb61 	bl	8001d28 <MGPIO_u8SetPinValue>
		MGPIO_u8SetPinValue(CARKIT_L298N_IN_4_PIN, HIGH );
 8001666:	2201      	movs	r2, #1
 8001668:	2109      	movs	r1, #9
 800166a:	2001      	movs	r0, #1
 800166c:	f000 fb5c 	bl	8001d28 <MGPIO_u8SetPinValue>
}
 8001670:	e016      	b.n	80016a0 <SCARKIT_voidCarDirection+0xf8>
	else if ( Copy_Direction == CAR_STOP )
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	2b04      	cmp	r3, #4
 8001676:	d113      	bne.n	80016a0 <SCARKIT_voidCarDirection+0xf8>
		MGPIO_u8SetPinValue(CARKIT_L298N_IN_1_PIN, LOW );
 8001678:	2200      	movs	r2, #0
 800167a:	2106      	movs	r1, #6
 800167c:	2001      	movs	r0, #1
 800167e:	f000 fb53 	bl	8001d28 <MGPIO_u8SetPinValue>
		MGPIO_u8SetPinValue(CARKIT_L298N_IN_2_PIN, LOW );
 8001682:	2200      	movs	r2, #0
 8001684:	2107      	movs	r1, #7
 8001686:	2001      	movs	r0, #1
 8001688:	f000 fb4e 	bl	8001d28 <MGPIO_u8SetPinValue>
		MGPIO_u8SetPinValue(CARKIT_L298N_IN_3_PIN, LOW );
 800168c:	2200      	movs	r2, #0
 800168e:	2108      	movs	r1, #8
 8001690:	2001      	movs	r0, #1
 8001692:	f000 fb49 	bl	8001d28 <MGPIO_u8SetPinValue>
		MGPIO_u8SetPinValue(CARKIT_L298N_IN_4_PIN, LOW );
 8001696:	2200      	movs	r2, #0
 8001698:	2109      	movs	r1, #9
 800169a:	2001      	movs	r0, #1
 800169c:	f000 fb44 	bl	8001d28 <MGPIO_u8SetPinValue>
}
 80016a0:	bf00      	nop
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <MDMA_u8ClearFlag>:
 *
 *
 ******************************************************************************
 */
static uint8_t  MDMA_u8ClearFlag( Channel_t Copy_ChannelIndex , Flags_t Copy_Flag )
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	460a      	mov	r2, r1
 80016b2:	71fb      	strb	r3, [r7, #7]
 80016b4:	4613      	mov	r3, r2
 80016b6:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK;
 80016b8:	2301      	movs	r3, #1
 80016ba:	73fb      	strb	r3, [r7, #15]
	if ( Copy_ChannelIndex <= DMA_CHANNEL7 &&  Copy_Flag <= DMA_TEIF )
 80016bc:	79fb      	ldrb	r3, [r7, #7]
 80016be:	2b06      	cmp	r3, #6
 80016c0:	d812      	bhi.n	80016e8 <MDMA_u8ClearFlag+0x40>
 80016c2:	79bb      	ldrb	r3, [r7, #6]
 80016c4:	2b03      	cmp	r3, #3
 80016c6:	d80f      	bhi.n	80016e8 <MDMA_u8ClearFlag+0x40>
	{
		Copy_ChannelIndex *= DMA_FLAG_BIT_ACCESS ;
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	71fb      	strb	r3, [r7, #7]
	    DMA->IFCR  |= DMA_FLAG_MASK << (Copy_ChannelIndex + Copy_Flag) ;
 80016ce:	4b0a      	ldr	r3, [pc, #40]	; (80016f8 <MDMA_u8ClearFlag+0x50>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	79f9      	ldrb	r1, [r7, #7]
 80016d4:	79ba      	ldrb	r2, [r7, #6]
 80016d6:	440a      	add	r2, r1
 80016d8:	2101      	movs	r1, #1
 80016da:	fa01 f202 	lsl.w	r2, r1, r2
 80016de:	4611      	mov	r1, r2
 80016e0:	4a05      	ldr	r2, [pc, #20]	; (80016f8 <MDMA_u8ClearFlag+0x50>)
 80016e2:	430b      	orrs	r3, r1
 80016e4:	6053      	str	r3, [r2, #4]
 80016e6:	e001      	b.n	80016ec <MDMA_u8ClearFlag+0x44>
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
 80016e8:	2300      	movs	r3, #0
 80016ea:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState ;
 80016ec:	7bfb      	ldrb	r3, [r7, #15]

}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3714      	adds	r7, #20
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr
 80016f8:	40020000 	.word	0x40020000

080016fc <DMA1_Channel1_IRQHandler>:
/*************************************************************************************************************************************/
/********************************************************* Handlers implementations **************************************************/
/*************************************************************************************************************************************/
void DMA1_Channel1_IRQHandler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
	MDMA_u8ClearFlag( DMA_CHANNEL1 , DMA_GIF  );
 8001700:	2100      	movs	r1, #0
 8001702:	2000      	movs	r0, #0
 8001704:	f7ff ffd0 	bl	80016a8 <MDMA_u8ClearFlag>
	MDMA_u8ClearFlag( DMA_CHANNEL1 , DMA_TCIF );
 8001708:	2101      	movs	r1, #1
 800170a:	2000      	movs	r0, #0
 800170c:	f7ff ffcc 	bl	80016a8 <MDMA_u8ClearFlag>
	MDMA_u8ClearFlag( DMA_CHANNEL1 , DMA_HTIF );
 8001710:	2102      	movs	r1, #2
 8001712:	2000      	movs	r0, #0
 8001714:	f7ff ffc8 	bl	80016a8 <MDMA_u8ClearFlag>
	MDMA_u8ClearFlag( DMA_CHANNEL1 , DMA_TEIF );
 8001718:	2103      	movs	r1, #3
 800171a:	2000      	movs	r0, #0
 800171c:	f7ff ffc4 	bl	80016a8 <MDMA_u8ClearFlag>
	if ( DMA_ApfChannelCallBack[DMA_CHANNEL1] != NULL )
 8001720:	4b04      	ldr	r3, [pc, #16]	; (8001734 <DMA1_Channel1_IRQHandler+0x38>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d002      	beq.n	800172e <DMA1_Channel1_IRQHandler+0x32>
	{
		 DMA_ApfChannelCallBack[DMA_CHANNEL1]();
 8001728:	4b02      	ldr	r3, [pc, #8]	; (8001734 <DMA1_Channel1_IRQHandler+0x38>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4798      	blx	r3

	}

}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000078 	.word	0x20000078

08001738 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
	MDMA_u8ClearFlag( DMA_CHANNEL2 , DMA_GIF  );
 800173c:	2100      	movs	r1, #0
 800173e:	2001      	movs	r0, #1
 8001740:	f7ff ffb2 	bl	80016a8 <MDMA_u8ClearFlag>
	MDMA_u8ClearFlag( DMA_CHANNEL2 , DMA_TCIF );
 8001744:	2101      	movs	r1, #1
 8001746:	2001      	movs	r0, #1
 8001748:	f7ff ffae 	bl	80016a8 <MDMA_u8ClearFlag>
	MDMA_u8ClearFlag( DMA_CHANNEL2 , DMA_HTIF );
 800174c:	2102      	movs	r1, #2
 800174e:	2001      	movs	r0, #1
 8001750:	f7ff ffaa 	bl	80016a8 <MDMA_u8ClearFlag>
	MDMA_u8ClearFlag( DMA_CHANNEL2 , DMA_TEIF );
 8001754:	2103      	movs	r1, #3
 8001756:	2001      	movs	r0, #1
 8001758:	f7ff ffa6 	bl	80016a8 <MDMA_u8ClearFlag>
	if ( DMA_ApfChannelCallBack[DMA_CHANNEL2] != NULL )
 800175c:	4b04      	ldr	r3, [pc, #16]	; (8001770 <DMA1_Channel2_IRQHandler+0x38>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d002      	beq.n	800176a <DMA1_Channel2_IRQHandler+0x32>
	{
		 DMA_ApfChannelCallBack[DMA_CHANNEL2]();
 8001764:	4b02      	ldr	r3, [pc, #8]	; (8001770 <DMA1_Channel2_IRQHandler+0x38>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	4798      	blx	r3
	}

}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000078 	.word	0x20000078

08001774 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
	MDMA_u8ClearFlag( DMA_CHANNEL3 , DMA_GIF  );
 8001778:	2100      	movs	r1, #0
 800177a:	2002      	movs	r0, #2
 800177c:	f7ff ff94 	bl	80016a8 <MDMA_u8ClearFlag>
	MDMA_u8ClearFlag( DMA_CHANNEL3 , DMA_TCIF );
 8001780:	2101      	movs	r1, #1
 8001782:	2002      	movs	r0, #2
 8001784:	f7ff ff90 	bl	80016a8 <MDMA_u8ClearFlag>
	MDMA_u8ClearFlag( DMA_CHANNEL3 , DMA_HTIF );
 8001788:	2102      	movs	r1, #2
 800178a:	2002      	movs	r0, #2
 800178c:	f7ff ff8c 	bl	80016a8 <MDMA_u8ClearFlag>
	MDMA_u8ClearFlag( DMA_CHANNEL3 , DMA_TEIF );
 8001790:	2103      	movs	r1, #3
 8001792:	2002      	movs	r0, #2
 8001794:	f7ff ff88 	bl	80016a8 <MDMA_u8ClearFlag>
	if ( DMA_ApfChannelCallBack[DMA_CHANNEL3] != NULL )
 8001798:	4b04      	ldr	r3, [pc, #16]	; (80017ac <DMA1_Channel3_IRQHandler+0x38>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d002      	beq.n	80017a6 <DMA1_Channel3_IRQHandler+0x32>
	{
		 DMA_ApfChannelCallBack[DMA_CHANNEL3]();
 80017a0:	4b02      	ldr	r3, [pc, #8]	; (80017ac <DMA1_Channel3_IRQHandler+0x38>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	4798      	blx	r3
	}

}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000078 	.word	0x20000078

080017b0 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
	MDMA_u8ClearFlag( DMA_CHANNEL4 , DMA_GIF  );
 80017b4:	2100      	movs	r1, #0
 80017b6:	2003      	movs	r0, #3
 80017b8:	f7ff ff76 	bl	80016a8 <MDMA_u8ClearFlag>
	MDMA_u8ClearFlag( DMA_CHANNEL4 , DMA_TCIF );
 80017bc:	2101      	movs	r1, #1
 80017be:	2003      	movs	r0, #3
 80017c0:	f7ff ff72 	bl	80016a8 <MDMA_u8ClearFlag>
	MDMA_u8ClearFlag( DMA_CHANNEL4 , DMA_HTIF );
 80017c4:	2102      	movs	r1, #2
 80017c6:	2003      	movs	r0, #3
 80017c8:	f7ff ff6e 	bl	80016a8 <MDMA_u8ClearFlag>
	MDMA_u8ClearFlag( DMA_CHANNEL4 , DMA_TEIF );
 80017cc:	2103      	movs	r1, #3
 80017ce:	2003      	movs	r0, #3
 80017d0:	f7ff ff6a 	bl	80016a8 <MDMA_u8ClearFlag>
	if ( DMA_ApfChannelCallBack[DMA_CHANNEL4] != NULL )
 80017d4:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <DMA1_Channel4_IRQHandler+0x38>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d002      	beq.n	80017e2 <DMA1_Channel4_IRQHandler+0x32>
	{
		 DMA_ApfChannelCallBack[DMA_CHANNEL4]();
 80017dc:	4b02      	ldr	r3, [pc, #8]	; (80017e8 <DMA1_Channel4_IRQHandler+0x38>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	4798      	blx	r3
	}

}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000078 	.word	0x20000078

080017ec <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
	MDMA_u8ClearFlag( DMA_CHANNEL5 , DMA_GIF  );
 80017f0:	2100      	movs	r1, #0
 80017f2:	2004      	movs	r0, #4
 80017f4:	f7ff ff58 	bl	80016a8 <MDMA_u8ClearFlag>
	MDMA_u8ClearFlag( DMA_CHANNEL5 , DMA_TCIF );
 80017f8:	2101      	movs	r1, #1
 80017fa:	2004      	movs	r0, #4
 80017fc:	f7ff ff54 	bl	80016a8 <MDMA_u8ClearFlag>
	MDMA_u8ClearFlag( DMA_CHANNEL5 , DMA_HTIF );
 8001800:	2102      	movs	r1, #2
 8001802:	2004      	movs	r0, #4
 8001804:	f7ff ff50 	bl	80016a8 <MDMA_u8ClearFlag>
	MDMA_u8ClearFlag( DMA_CHANNEL5 , DMA_TEIF );
 8001808:	2103      	movs	r1, #3
 800180a:	2004      	movs	r0, #4
 800180c:	f7ff ff4c 	bl	80016a8 <MDMA_u8ClearFlag>
	if ( DMA_ApfChannelCallBack[DMA_CHANNEL5] != NULL )
 8001810:	4b04      	ldr	r3, [pc, #16]	; (8001824 <DMA1_Channel5_IRQHandler+0x38>)
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d002      	beq.n	800181e <DMA1_Channel5_IRQHandler+0x32>
	{
		 DMA_ApfChannelCallBack[DMA_CHANNEL5]();
 8001818:	4b02      	ldr	r3, [pc, #8]	; (8001824 <DMA1_Channel5_IRQHandler+0x38>)
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	4798      	blx	r3
	}

}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20000078 	.word	0x20000078

08001828 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
	MDMA_u8ClearFlag( DMA_CHANNEL6 , DMA_GIF  );
 800182c:	2100      	movs	r1, #0
 800182e:	2005      	movs	r0, #5
 8001830:	f7ff ff3a 	bl	80016a8 <MDMA_u8ClearFlag>
	MDMA_u8ClearFlag( DMA_CHANNEL6 , DMA_TCIF );
 8001834:	2101      	movs	r1, #1
 8001836:	2005      	movs	r0, #5
 8001838:	f7ff ff36 	bl	80016a8 <MDMA_u8ClearFlag>
	MDMA_u8ClearFlag( DMA_CHANNEL6 , DMA_HTIF );
 800183c:	2102      	movs	r1, #2
 800183e:	2005      	movs	r0, #5
 8001840:	f7ff ff32 	bl	80016a8 <MDMA_u8ClearFlag>
	MDMA_u8ClearFlag( DMA_CHANNEL6 , DMA_TEIF );
 8001844:	2103      	movs	r1, #3
 8001846:	2005      	movs	r0, #5
 8001848:	f7ff ff2e 	bl	80016a8 <MDMA_u8ClearFlag>
	if ( DMA_ApfChannelCallBack[DMA_CHANNEL6] != NULL )
 800184c:	4b04      	ldr	r3, [pc, #16]	; (8001860 <DMA1_Channel6_IRQHandler+0x38>)
 800184e:	695b      	ldr	r3, [r3, #20]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d002      	beq.n	800185a <DMA1_Channel6_IRQHandler+0x32>
	{
		 DMA_ApfChannelCallBack[DMA_CHANNEL6]();
 8001854:	4b02      	ldr	r3, [pc, #8]	; (8001860 <DMA1_Channel6_IRQHandler+0x38>)
 8001856:	695b      	ldr	r3, [r3, #20]
 8001858:	4798      	blx	r3
	}

}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000078 	.word	0x20000078

08001864 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
	MDMA_u8ClearFlag( DMA_CHANNEL7 , DMA_GIF  );
 8001868:	2100      	movs	r1, #0
 800186a:	2006      	movs	r0, #6
 800186c:	f7ff ff1c 	bl	80016a8 <MDMA_u8ClearFlag>
	MDMA_u8ClearFlag( DMA_CHANNEL7 , DMA_TCIF );
 8001870:	2101      	movs	r1, #1
 8001872:	2006      	movs	r0, #6
 8001874:	f7ff ff18 	bl	80016a8 <MDMA_u8ClearFlag>
	MDMA_u8ClearFlag( DMA_CHANNEL7 , DMA_HTIF );
 8001878:	2102      	movs	r1, #2
 800187a:	2006      	movs	r0, #6
 800187c:	f7ff ff14 	bl	80016a8 <MDMA_u8ClearFlag>
	MDMA_u8ClearFlag( DMA_CHANNEL7 , DMA_TEIF );
 8001880:	2103      	movs	r1, #3
 8001882:	2006      	movs	r0, #6
 8001884:	f7ff ff10 	bl	80016a8 <MDMA_u8ClearFlag>
	if ( DMA_ApfChannelCallBack[DMA_CHANNEL7] != NULL )
 8001888:	4b04      	ldr	r3, [pc, #16]	; (800189c <DMA1_Channel7_IRQHandler+0x38>)
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d002      	beq.n	8001896 <DMA1_Channel7_IRQHandler+0x32>
	{
		 DMA_ApfChannelCallBack[DMA_CHANNEL7]();
 8001890:	4b02      	ldr	r3, [pc, #8]	; (800189c <DMA1_Channel7_IRQHandler+0x38>)
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	4798      	blx	r3
	}

}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000078 	.word	0x20000078

080018a0 <MEXTI_u8Config>:
 *
 *
 ******************************************************************************
 */
uint8_t   MEXTI_u8Config    ( EXTI_config_t* Copy_Config )
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 80018a8:	2301      	movs	r3, #1
 80018aa:	73fb      	strb	r3, [r7, #15]
	if ( Copy_Config != NULL && Copy_Config->InitState <= EXTI_ENABLE && Copy_Config->PinNumber<=LINE15 )
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f000 8086 	beq.w	80019c0 <MEXTI_u8Config+0x120>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	789b      	ldrb	r3, [r3, #2]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	f200 8081 	bhi.w	80019c0 <MEXTI_u8Config+0x120>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b0f      	cmp	r3, #15
 80018c4:	d87c      	bhi.n	80019c0 <MEXTI_u8Config+0x120>
	{
        switch (Copy_Config-> TrigSrc )
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	785b      	ldrb	r3, [r3, #1]
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d036      	beq.n	800193c <MEXTI_u8Config+0x9c>
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	dc4b      	bgt.n	800196a <MEXTI_u8Config+0xca>
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d002      	beq.n	80018dc <MEXTI_u8Config+0x3c>
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d018      	beq.n	800190c <MEXTI_u8Config+0x6c>
 80018da:	e046      	b.n	800196a <MEXTI_u8Config+0xca>
        {
        	case FALLINNG        : EXTI->FTSR |=  (EXTI_TRIGSRC_MASK << (Copy_Config->PinNumber));
 80018dc:	4b3c      	ldr	r3, [pc, #240]	; (80019d0 <MEXTI_u8Config+0x130>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	7812      	ldrb	r2, [r2, #0]
 80018e4:	4611      	mov	r1, r2
 80018e6:	2201      	movs	r2, #1
 80018e8:	408a      	lsls	r2, r1
 80018ea:	4611      	mov	r1, r2
 80018ec:	4a38      	ldr	r2, [pc, #224]	; (80019d0 <MEXTI_u8Config+0x130>)
 80018ee:	430b      	orrs	r3, r1
 80018f0:	60d3      	str	r3, [r2, #12]
							       EXTI->RTSR &=~ (EXTI_TRIGSRC_MASK << (Copy_Config->PinNumber));
 80018f2:	4b37      	ldr	r3, [pc, #220]	; (80019d0 <MEXTI_u8Config+0x130>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	7812      	ldrb	r2, [r2, #0]
 80018fa:	4611      	mov	r1, r2
 80018fc:	2201      	movs	r2, #1
 80018fe:	408a      	lsls	r2, r1
 8001900:	43d2      	mvns	r2, r2
 8001902:	4611      	mov	r1, r2
 8001904:	4a32      	ldr	r2, [pc, #200]	; (80019d0 <MEXTI_u8Config+0x130>)
 8001906:	400b      	ands	r3, r1
 8001908:	6093      	str	r3, [r2, #8]
							       break ;
 800190a:	e030      	b.n	800196e <MEXTI_u8Config+0xce>
        	case RISING          : EXTI->FTSR &=~ (EXTI_TRIGSRC_MASK << (Copy_Config->PinNumber));
 800190c:	4b30      	ldr	r3, [pc, #192]	; (80019d0 <MEXTI_u8Config+0x130>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	7812      	ldrb	r2, [r2, #0]
 8001914:	4611      	mov	r1, r2
 8001916:	2201      	movs	r2, #1
 8001918:	408a      	lsls	r2, r1
 800191a:	43d2      	mvns	r2, r2
 800191c:	4611      	mov	r1, r2
 800191e:	4a2c      	ldr	r2, [pc, #176]	; (80019d0 <MEXTI_u8Config+0x130>)
 8001920:	400b      	ands	r3, r1
 8001922:	60d3      	str	r3, [r2, #12]
							       EXTI->RTSR |=  (EXTI_TRIGSRC_MASK << (Copy_Config->PinNumber));
 8001924:	4b2a      	ldr	r3, [pc, #168]	; (80019d0 <MEXTI_u8Config+0x130>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	7812      	ldrb	r2, [r2, #0]
 800192c:	4611      	mov	r1, r2
 800192e:	2201      	movs	r2, #1
 8001930:	408a      	lsls	r2, r1
 8001932:	4611      	mov	r1, r2
 8001934:	4a26      	ldr	r2, [pc, #152]	; (80019d0 <MEXTI_u8Config+0x130>)
 8001936:	430b      	orrs	r3, r1
 8001938:	6093      	str	r3, [r2, #8]
							       break ;
 800193a:	e018      	b.n	800196e <MEXTI_u8Config+0xce>
        	case FALLINNG_RISING : EXTI->FTSR |=  (EXTI_TRIGSRC_MASK << (Copy_Config->PinNumber));
 800193c:	4b24      	ldr	r3, [pc, #144]	; (80019d0 <MEXTI_u8Config+0x130>)
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	7812      	ldrb	r2, [r2, #0]
 8001944:	4611      	mov	r1, r2
 8001946:	2201      	movs	r2, #1
 8001948:	408a      	lsls	r2, r1
 800194a:	4611      	mov	r1, r2
 800194c:	4a20      	ldr	r2, [pc, #128]	; (80019d0 <MEXTI_u8Config+0x130>)
 800194e:	430b      	orrs	r3, r1
 8001950:	60d3      	str	r3, [r2, #12]
								   EXTI->RTSR |=  (EXTI_TRIGSRC_MASK << (Copy_Config->PinNumber));
 8001952:	4b1f      	ldr	r3, [pc, #124]	; (80019d0 <MEXTI_u8Config+0x130>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	7812      	ldrb	r2, [r2, #0]
 800195a:	4611      	mov	r1, r2
 800195c:	2201      	movs	r2, #1
 800195e:	408a      	lsls	r2, r1
 8001960:	4611      	mov	r1, r2
 8001962:	4a1b      	ldr	r2, [pc, #108]	; (80019d0 <MEXTI_u8Config+0x130>)
 8001964:	430b      	orrs	r3, r1
 8001966:	6093      	str	r3, [r2, #8]
							       break ;
 8001968:	e001      	b.n	800196e <MEXTI_u8Config+0xce>
        	default              : Local_u8ErrorState = ERROR_STATE_NOK ;
 800196a:	2300      	movs	r3, #0
 800196c:	73fb      	strb	r3, [r7, #15]
        }
        EXTI->IMR &=~ (EXTI_STATE_MASK << (Copy_Config->PinNumber));
 800196e:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <MEXTI_u8Config+0x130>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	7812      	ldrb	r2, [r2, #0]
 8001976:	4611      	mov	r1, r2
 8001978:	2201      	movs	r2, #1
 800197a:	408a      	lsls	r2, r1
 800197c:	43d2      	mvns	r2, r2
 800197e:	4611      	mov	r1, r2
 8001980:	4a13      	ldr	r2, [pc, #76]	; (80019d0 <MEXTI_u8Config+0x130>)
 8001982:	400b      	ands	r3, r1
 8001984:	6013      	str	r3, [r2, #0]
        EXTI->IMR |=  (Copy_Config->InitState << (Copy_Config->PinNumber));
 8001986:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <MEXTI_u8Config+0x130>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	7892      	ldrb	r2, [r2, #2]
 800198e:	4611      	mov	r1, r2
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	7812      	ldrb	r2, [r2, #0]
 8001994:	fa01 f202 	lsl.w	r2, r1, r2
 8001998:	4611      	mov	r1, r2
 800199a:	4a0d      	ldr	r2, [pc, #52]	; (80019d0 <MEXTI_u8Config+0x130>)
 800199c:	430b      	orrs	r3, r1
 800199e:	6013      	str	r3, [r2, #0]
        if ( Copy_Config->CallBackFunc != NULL )
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d008      	beq.n	80019ba <MEXTI_u8Config+0x11a>
        {
        	EXTI_ApfCallBack[Copy_Config->PinNumber]=Copy_Config->CallBackFunc;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	4619      	mov	r1, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	4a08      	ldr	r2, [pc, #32]	; (80019d4 <MEXTI_u8Config+0x134>)
 80019b4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if ( Copy_Config->CallBackFunc != NULL )
 80019b8:	e004      	b.n	80019c4 <MEXTI_u8Config+0x124>
        }
    	else
    	{
    		Local_u8ErrorState = ERROR_STATE_NULL_PTR ;
 80019ba:	2302      	movs	r3, #2
 80019bc:	73fb      	strb	r3, [r7, #15]
        if ( Copy_Config->CallBackFunc != NULL )
 80019be:	e001      	b.n	80019c4 <MEXTI_u8Config+0x124>
    	}
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
 80019c0:	2300      	movs	r3, #0
 80019c2:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState ;
 80019c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3714      	adds	r7, #20
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr
 80019d0:	40010400 	.word	0x40010400
 80019d4:	20000094 	.word	0x20000094

080019d8 <EXTI0_IRQHandler>:
}
/*************************************************************************************************************************************/
/********************************************************* Handlers implementations **************************************************/
/*************************************************************************************************************************************/
void EXTI0_IRQHandler         ( void )
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
	if ( EXTI_ApfCallBack[LINE0] != NULL )
 80019dc:	4b07      	ldr	r3, [pc, #28]	; (80019fc <EXTI0_IRQHandler+0x24>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d008      	beq.n	80019f6 <EXTI0_IRQHandler+0x1e>
	{
		 SET_BIT( EXTI->PR , LINE0 );
 80019e4:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <EXTI0_IRQHandler+0x28>)
 80019e6:	695b      	ldr	r3, [r3, #20]
 80019e8:	4a05      	ldr	r2, [pc, #20]	; (8001a00 <EXTI0_IRQHandler+0x28>)
 80019ea:	f043 0301 	orr.w	r3, r3, #1
 80019ee:	6153      	str	r3, [r2, #20]
		 EXTI_ApfCallBack[LINE0]();
 80019f0:	4b02      	ldr	r3, [pc, #8]	; (80019fc <EXTI0_IRQHandler+0x24>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4798      	blx	r3
	}
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000094 	.word	0x20000094
 8001a00:	40010400 	.word	0x40010400

08001a04 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler         ( void )
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
	if ( EXTI_ApfCallBack[LINE1] != NULL )
 8001a08:	4b07      	ldr	r3, [pc, #28]	; (8001a28 <EXTI1_IRQHandler+0x24>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d008      	beq.n	8001a22 <EXTI1_IRQHandler+0x1e>
	{
		SET_BIT( EXTI->PR , LINE1 );
 8001a10:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <EXTI1_IRQHandler+0x28>)
 8001a12:	695b      	ldr	r3, [r3, #20]
 8001a14:	4a05      	ldr	r2, [pc, #20]	; (8001a2c <EXTI1_IRQHandler+0x28>)
 8001a16:	f043 0302 	orr.w	r3, r3, #2
 8001a1a:	6153      	str	r3, [r2, #20]
		EXTI_ApfCallBack[LINE1]();
 8001a1c:	4b02      	ldr	r3, [pc, #8]	; (8001a28 <EXTI1_IRQHandler+0x24>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	4798      	blx	r3
	}
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20000094 	.word	0x20000094
 8001a2c:	40010400 	.word	0x40010400

08001a30 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler         ( void )
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
	if ( EXTI_ApfCallBack[LINE2] != NULL )
 8001a34:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <EXTI2_IRQHandler+0x24>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d008      	beq.n	8001a4e <EXTI2_IRQHandler+0x1e>
	{
		SET_BIT( EXTI->PR , LINE2 );
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <EXTI2_IRQHandler+0x28>)
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	4a05      	ldr	r2, [pc, #20]	; (8001a58 <EXTI2_IRQHandler+0x28>)
 8001a42:	f043 0304 	orr.w	r3, r3, #4
 8001a46:	6153      	str	r3, [r2, #20]
	    EXTI_ApfCallBack[LINE2]();
 8001a48:	4b02      	ldr	r3, [pc, #8]	; (8001a54 <EXTI2_IRQHandler+0x24>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	4798      	blx	r3
	}
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000094 	.word	0x20000094
 8001a58:	40010400 	.word	0x40010400

08001a5c <EXTI3_IRQHandler>:
void EXTI3_IRQHandler         ( void )
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
	if ( EXTI_ApfCallBack[LINE3] != NULL )
 8001a60:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <EXTI3_IRQHandler+0x24>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d008      	beq.n	8001a7a <EXTI3_IRQHandler+0x1e>
	{
		SET_BIT( EXTI->PR , LINE3 );
 8001a68:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <EXTI3_IRQHandler+0x28>)
 8001a6a:	695b      	ldr	r3, [r3, #20]
 8001a6c:	4a05      	ldr	r2, [pc, #20]	; (8001a84 <EXTI3_IRQHandler+0x28>)
 8001a6e:	f043 0308 	orr.w	r3, r3, #8
 8001a72:	6153      	str	r3, [r2, #20]
		EXTI_ApfCallBack[LINE3]();
 8001a74:	4b02      	ldr	r3, [pc, #8]	; (8001a80 <EXTI3_IRQHandler+0x24>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	4798      	blx	r3
	}
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20000094 	.word	0x20000094
 8001a84:	40010400 	.word	0x40010400

08001a88 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler         ( void )
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
	if ( EXTI_ApfCallBack[LINE4] != NULL )
 8001a8c:	4b07      	ldr	r3, [pc, #28]	; (8001aac <EXTI4_IRQHandler+0x24>)
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d008      	beq.n	8001aa6 <EXTI4_IRQHandler+0x1e>
	{
		SET_BIT( EXTI->PR , LINE4 );
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <EXTI4_IRQHandler+0x28>)
 8001a96:	695b      	ldr	r3, [r3, #20]
 8001a98:	4a05      	ldr	r2, [pc, #20]	; (8001ab0 <EXTI4_IRQHandler+0x28>)
 8001a9a:	f043 0310 	orr.w	r3, r3, #16
 8001a9e:	6153      	str	r3, [r2, #20]
		EXTI_ApfCallBack[LINE4]();
 8001aa0:	4b02      	ldr	r3, [pc, #8]	; (8001aac <EXTI4_IRQHandler+0x24>)
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	4798      	blx	r3
	}
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20000094 	.word	0x20000094
 8001ab0:	40010400 	.word	0x40010400

08001ab4 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler         ( void )
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
	if ( EXTI_ApfCallBack[LINE5] != NULL && EXTI_LINE5_FLAGE == EXTI_LINE_RISING )
 8001ab8:	4b32      	ldr	r3, [pc, #200]	; (8001b84 <EXTI9_5_IRQHandler+0xd0>)
 8001aba:	695b      	ldr	r3, [r3, #20]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d00f      	beq.n	8001ae0 <EXTI9_5_IRQHandler+0x2c>
 8001ac0:	4b31      	ldr	r3, [pc, #196]	; (8001b88 <EXTI9_5_IRQHandler+0xd4>)
 8001ac2:	695b      	ldr	r3, [r3, #20]
 8001ac4:	095b      	lsrs	r3, r3, #5
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d108      	bne.n	8001ae0 <EXTI9_5_IRQHandler+0x2c>
	{
		SET_BIT( EXTI->PR , LINE5 );
 8001ace:	4b2e      	ldr	r3, [pc, #184]	; (8001b88 <EXTI9_5_IRQHandler+0xd4>)
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	4a2d      	ldr	r2, [pc, #180]	; (8001b88 <EXTI9_5_IRQHandler+0xd4>)
 8001ad4:	f043 0320 	orr.w	r3, r3, #32
 8001ad8:	6153      	str	r3, [r2, #20]
		EXTI_ApfCallBack[LINE5]();
 8001ada:	4b2a      	ldr	r3, [pc, #168]	; (8001b84 <EXTI9_5_IRQHandler+0xd0>)
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	4798      	blx	r3
	}
	if ( EXTI_ApfCallBack[LINE6] != NULL && EXTI_LINE6_FLAGE == EXTI_LINE_RISING )
 8001ae0:	4b28      	ldr	r3, [pc, #160]	; (8001b84 <EXTI9_5_IRQHandler+0xd0>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d00f      	beq.n	8001b08 <EXTI9_5_IRQHandler+0x54>
 8001ae8:	4b27      	ldr	r3, [pc, #156]	; (8001b88 <EXTI9_5_IRQHandler+0xd4>)
 8001aea:	695b      	ldr	r3, [r3, #20]
 8001aec:	099b      	lsrs	r3, r3, #6
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d108      	bne.n	8001b08 <EXTI9_5_IRQHandler+0x54>
	{
		SET_BIT( EXTI->PR , LINE6 );
 8001af6:	4b24      	ldr	r3, [pc, #144]	; (8001b88 <EXTI9_5_IRQHandler+0xd4>)
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	4a23      	ldr	r2, [pc, #140]	; (8001b88 <EXTI9_5_IRQHandler+0xd4>)
 8001afc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b00:	6153      	str	r3, [r2, #20]
	    EXTI_ApfCallBack[LINE6]();
 8001b02:	4b20      	ldr	r3, [pc, #128]	; (8001b84 <EXTI9_5_IRQHandler+0xd0>)
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	4798      	blx	r3
	}
	if ( EXTI_ApfCallBack[LINE7] != NULL && EXTI_LINE7_FLAGE == EXTI_LINE_RISING )
 8001b08:	4b1e      	ldr	r3, [pc, #120]	; (8001b84 <EXTI9_5_IRQHandler+0xd0>)
 8001b0a:	69db      	ldr	r3, [r3, #28]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d00f      	beq.n	8001b30 <EXTI9_5_IRQHandler+0x7c>
 8001b10:	4b1d      	ldr	r3, [pc, #116]	; (8001b88 <EXTI9_5_IRQHandler+0xd4>)
 8001b12:	695b      	ldr	r3, [r3, #20]
 8001b14:	09db      	lsrs	r3, r3, #7
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d108      	bne.n	8001b30 <EXTI9_5_IRQHandler+0x7c>
	{
		SET_BIT( EXTI->PR , LINE7 );
 8001b1e:	4b1a      	ldr	r3, [pc, #104]	; (8001b88 <EXTI9_5_IRQHandler+0xd4>)
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	4a19      	ldr	r2, [pc, #100]	; (8001b88 <EXTI9_5_IRQHandler+0xd4>)
 8001b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b28:	6153      	str	r3, [r2, #20]
		EXTI_ApfCallBack[LINE7]();
 8001b2a:	4b16      	ldr	r3, [pc, #88]	; (8001b84 <EXTI9_5_IRQHandler+0xd0>)
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	4798      	blx	r3
	}
	if ( EXTI_ApfCallBack[LINE8] != NULL && EXTI_LINE8_FLAGE == EXTI_LINE_RISING )
 8001b30:	4b14      	ldr	r3, [pc, #80]	; (8001b84 <EXTI9_5_IRQHandler+0xd0>)
 8001b32:	6a1b      	ldr	r3, [r3, #32]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d00f      	beq.n	8001b58 <EXTI9_5_IRQHandler+0xa4>
 8001b38:	4b13      	ldr	r3, [pc, #76]	; (8001b88 <EXTI9_5_IRQHandler+0xd4>)
 8001b3a:	695b      	ldr	r3, [r3, #20]
 8001b3c:	0a1b      	lsrs	r3, r3, #8
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d108      	bne.n	8001b58 <EXTI9_5_IRQHandler+0xa4>
	{
		SET_BIT( EXTI->PR , LINE8 );
 8001b46:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <EXTI9_5_IRQHandler+0xd4>)
 8001b48:	695b      	ldr	r3, [r3, #20]
 8001b4a:	4a0f      	ldr	r2, [pc, #60]	; (8001b88 <EXTI9_5_IRQHandler+0xd4>)
 8001b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b50:	6153      	str	r3, [r2, #20]
		EXTI_ApfCallBack[LINE8]();
 8001b52:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <EXTI9_5_IRQHandler+0xd0>)
 8001b54:	6a1b      	ldr	r3, [r3, #32]
 8001b56:	4798      	blx	r3
	}
	if ( EXTI_ApfCallBack[LINE9] != NULL && EXTI_LINE9_FLAGE == EXTI_LINE_RISING )
 8001b58:	4b0a      	ldr	r3, [pc, #40]	; (8001b84 <EXTI9_5_IRQHandler+0xd0>)
 8001b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00f      	beq.n	8001b80 <EXTI9_5_IRQHandler+0xcc>
 8001b60:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <EXTI9_5_IRQHandler+0xd4>)
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	0a5b      	lsrs	r3, r3, #9
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d108      	bne.n	8001b80 <EXTI9_5_IRQHandler+0xcc>
	{
		SET_BIT( EXTI->PR , LINE9 );
 8001b6e:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <EXTI9_5_IRQHandler+0xd4>)
 8001b70:	695b      	ldr	r3, [r3, #20]
 8001b72:	4a05      	ldr	r2, [pc, #20]	; (8001b88 <EXTI9_5_IRQHandler+0xd4>)
 8001b74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b78:	6153      	str	r3, [r2, #20]
		EXTI_ApfCallBack[LINE9]();
 8001b7a:	4b02      	ldr	r3, [pc, #8]	; (8001b84 <EXTI9_5_IRQHandler+0xd0>)
 8001b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7e:	4798      	blx	r3
	}
}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20000094 	.word	0x20000094
 8001b88:	40010400 	.word	0x40010400

08001b8c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler         ( void )
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
	if ( EXTI_ApfCallBack[LINE10] != NULL && EXTI_LINE10_FLAGE == EXTI_LINE_RISING )
 8001b90:	4b3c      	ldr	r3, [pc, #240]	; (8001c84 <EXTI15_10_IRQHandler+0xf8>)
 8001b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d00f      	beq.n	8001bb8 <EXTI15_10_IRQHandler+0x2c>
 8001b98:	4b3b      	ldr	r3, [pc, #236]	; (8001c88 <EXTI15_10_IRQHandler+0xfc>)
 8001b9a:	695b      	ldr	r3, [r3, #20]
 8001b9c:	0a9b      	lsrs	r3, r3, #10
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d108      	bne.n	8001bb8 <EXTI15_10_IRQHandler+0x2c>
	{
		 SET_BIT( EXTI->PR , LINE10 );
 8001ba6:	4b38      	ldr	r3, [pc, #224]	; (8001c88 <EXTI15_10_IRQHandler+0xfc>)
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	4a37      	ldr	r2, [pc, #220]	; (8001c88 <EXTI15_10_IRQHandler+0xfc>)
 8001bac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bb0:	6153      	str	r3, [r2, #20]
		 EXTI_ApfCallBack[LINE10]();
 8001bb2:	4b34      	ldr	r3, [pc, #208]	; (8001c84 <EXTI15_10_IRQHandler+0xf8>)
 8001bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb6:	4798      	blx	r3
	}
	if ( EXTI_ApfCallBack[LINE11] != NULL && EXTI_LINE11_FLAGE == EXTI_LINE_RISING )
 8001bb8:	4b32      	ldr	r3, [pc, #200]	; (8001c84 <EXTI15_10_IRQHandler+0xf8>)
 8001bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d00f      	beq.n	8001be0 <EXTI15_10_IRQHandler+0x54>
 8001bc0:	4b31      	ldr	r3, [pc, #196]	; (8001c88 <EXTI15_10_IRQHandler+0xfc>)
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	0adb      	lsrs	r3, r3, #11
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d108      	bne.n	8001be0 <EXTI15_10_IRQHandler+0x54>
	{
		 SET_BIT( EXTI->PR , LINE11 );
 8001bce:	4b2e      	ldr	r3, [pc, #184]	; (8001c88 <EXTI15_10_IRQHandler+0xfc>)
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	4a2d      	ldr	r2, [pc, #180]	; (8001c88 <EXTI15_10_IRQHandler+0xfc>)
 8001bd4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001bd8:	6153      	str	r3, [r2, #20]
		 EXTI_ApfCallBack[LINE11]();
 8001bda:	4b2a      	ldr	r3, [pc, #168]	; (8001c84 <EXTI15_10_IRQHandler+0xf8>)
 8001bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bde:	4798      	blx	r3
	}
	if ( EXTI_ApfCallBack[LINE12] != NULL && EXTI_LINE12_FLAGE == EXTI_LINE_RISING )
 8001be0:	4b28      	ldr	r3, [pc, #160]	; (8001c84 <EXTI15_10_IRQHandler+0xf8>)
 8001be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d00f      	beq.n	8001c08 <EXTI15_10_IRQHandler+0x7c>
 8001be8:	4b27      	ldr	r3, [pc, #156]	; (8001c88 <EXTI15_10_IRQHandler+0xfc>)
 8001bea:	695b      	ldr	r3, [r3, #20]
 8001bec:	0b1b      	lsrs	r3, r3, #12
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d108      	bne.n	8001c08 <EXTI15_10_IRQHandler+0x7c>
	{
		 SET_BIT( EXTI->PR , LINE12 );
 8001bf6:	4b24      	ldr	r3, [pc, #144]	; (8001c88 <EXTI15_10_IRQHandler+0xfc>)
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	4a23      	ldr	r2, [pc, #140]	; (8001c88 <EXTI15_10_IRQHandler+0xfc>)
 8001bfc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c00:	6153      	str	r3, [r2, #20]
		 EXTI_ApfCallBack[LINE12]();
 8001c02:	4b20      	ldr	r3, [pc, #128]	; (8001c84 <EXTI15_10_IRQHandler+0xf8>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	4798      	blx	r3
	}
	if ( EXTI_ApfCallBack[LINE13] != NULL && EXTI_LINE13_FLAGE == EXTI_LINE_RISING )
 8001c08:	4b1e      	ldr	r3, [pc, #120]	; (8001c84 <EXTI15_10_IRQHandler+0xf8>)
 8001c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d00f      	beq.n	8001c30 <EXTI15_10_IRQHandler+0xa4>
 8001c10:	4b1d      	ldr	r3, [pc, #116]	; (8001c88 <EXTI15_10_IRQHandler+0xfc>)
 8001c12:	695b      	ldr	r3, [r3, #20]
 8001c14:	0b5b      	lsrs	r3, r3, #13
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d108      	bne.n	8001c30 <EXTI15_10_IRQHandler+0xa4>
	{
		 SET_BIT( EXTI->PR , LINE13 );
 8001c1e:	4b1a      	ldr	r3, [pc, #104]	; (8001c88 <EXTI15_10_IRQHandler+0xfc>)
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	4a19      	ldr	r2, [pc, #100]	; (8001c88 <EXTI15_10_IRQHandler+0xfc>)
 8001c24:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c28:	6153      	str	r3, [r2, #20]
		 EXTI_ApfCallBack[LINE13]();
 8001c2a:	4b16      	ldr	r3, [pc, #88]	; (8001c84 <EXTI15_10_IRQHandler+0xf8>)
 8001c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c2e:	4798      	blx	r3
	}
	if ( EXTI_ApfCallBack[LINE14] != NULL && EXTI_LINE14_FLAGE == EXTI_LINE_RISING )
 8001c30:	4b14      	ldr	r3, [pc, #80]	; (8001c84 <EXTI15_10_IRQHandler+0xf8>)
 8001c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d00f      	beq.n	8001c58 <EXTI15_10_IRQHandler+0xcc>
 8001c38:	4b13      	ldr	r3, [pc, #76]	; (8001c88 <EXTI15_10_IRQHandler+0xfc>)
 8001c3a:	695b      	ldr	r3, [r3, #20]
 8001c3c:	0b9b      	lsrs	r3, r3, #14
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d108      	bne.n	8001c58 <EXTI15_10_IRQHandler+0xcc>
	{
		 SET_BIT( EXTI->PR , LINE14 );
 8001c46:	4b10      	ldr	r3, [pc, #64]	; (8001c88 <EXTI15_10_IRQHandler+0xfc>)
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	4a0f      	ldr	r2, [pc, #60]	; (8001c88 <EXTI15_10_IRQHandler+0xfc>)
 8001c4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c50:	6153      	str	r3, [r2, #20]
		 EXTI_ApfCallBack[LINE14]();
 8001c52:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <EXTI15_10_IRQHandler+0xf8>)
 8001c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c56:	4798      	blx	r3
	}
	if ( EXTI_ApfCallBack[LINE15] != NULL && EXTI_LINE15_FLAGE == EXTI_LINE_RISING )
 8001c58:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <EXTI15_10_IRQHandler+0xf8>)
 8001c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d00f      	beq.n	8001c80 <EXTI15_10_IRQHandler+0xf4>
 8001c60:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <EXTI15_10_IRQHandler+0xfc>)
 8001c62:	695b      	ldr	r3, [r3, #20]
 8001c64:	0bdb      	lsrs	r3, r3, #15
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d108      	bne.n	8001c80 <EXTI15_10_IRQHandler+0xf4>
	{
		 SET_BIT( EXTI->PR , LINE15 );
 8001c6e:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <EXTI15_10_IRQHandler+0xfc>)
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	4a05      	ldr	r2, [pc, #20]	; (8001c88 <EXTI15_10_IRQHandler+0xfc>)
 8001c74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c78:	6153      	str	r3, [r2, #20]
		 EXTI_ApfCallBack[LINE15]();
 8001c7a:	4b02      	ldr	r3, [pc, #8]	; (8001c84 <EXTI15_10_IRQHandler+0xf8>)
 8001c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c7e:	4798      	blx	r3
	}
}
 8001c80:	bf00      	nop
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20000094 	.word	0x20000094
 8001c88:	40010400 	.word	0x40010400

08001c8c <MGPIO_u8SetPinDirection>:
 *
 *
 ******************************************************************************
 */
uint8_t MGPIO_u8SetPinDirection ( Port_t Copy_PortID , Pin_t Copy_PinID , PinPortMode_t Copy_Mode    )
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	71fb      	strb	r3, [r7, #7]
 8001c96:	460b      	mov	r3, r1
 8001c98:	71bb      	strb	r3, [r7, #6]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	717b      	strb	r3, [r7, #5]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	73fb      	strb	r3, [r7, #15]
	if ( Copy_PortID<=PORTG && Copy_PinID<=PIN15  )
 8001ca2:	79fb      	ldrb	r3, [r7, #7]
 8001ca4:	2b06      	cmp	r3, #6
 8001ca6:	d835      	bhi.n	8001d14 <MGPIO_u8SetPinDirection+0x88>
 8001ca8:	79bb      	ldrb	r3, [r7, #6]
 8001caa:	2b0f      	cmp	r3, #15
 8001cac:	d832      	bhi.n	8001d14 <MGPIO_u8SetPinDirection+0x88>
	{
		uint8_t Local_u8Reg = (Copy_PinID)/CNF_PIN_ACCSESS ;
 8001cae:	79bb      	ldrb	r3, [r7, #6]
 8001cb0:	08db      	lsrs	r3, r3, #3
 8001cb2:	73bb      	strb	r3, [r7, #14]
		GPIO_Ports[Copy_PortID]->CR[Local_u8Reg]  &=~ ( ( MODER_MASK) << ( ( Copy_PinID % CNF_PIN_ACCSESS ) * MODE_PIN_ACCSESS ) );
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	4a1b      	ldr	r2, [pc, #108]	; (8001d24 <MGPIO_u8SetPinDirection+0x98>)
 8001cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cbc:	7bba      	ldrb	r2, [r7, #14]
 8001cbe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001cc2:	79bb      	ldrb	r3, [r7, #6]
 8001cc4:	f003 0307 	and.w	r3, r3, #7
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	220f      	movs	r2, #15
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	79fb      	ldrb	r3, [r7, #7]
 8001cd6:	4a13      	ldr	r2, [pc, #76]	; (8001d24 <MGPIO_u8SetPinDirection+0x98>)
 8001cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cdc:	7bba      	ldrb	r2, [r7, #14]
 8001cde:	4001      	ands	r1, r0
 8001ce0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		GPIO_Ports[Copy_PortID]->CR[Local_u8Reg]  |=  ( ( Copy_Mode ) << ( ( Copy_PinID % CNF_PIN_ACCSESS ) * MODE_PIN_ACCSESS ) );
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	4a0f      	ldr	r2, [pc, #60]	; (8001d24 <MGPIO_u8SetPinDirection+0x98>)
 8001ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cec:	7bba      	ldrb	r2, [r7, #14]
 8001cee:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001cf2:	797a      	ldrb	r2, [r7, #5]
 8001cf4:	79bb      	ldrb	r3, [r7, #6]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	4618      	mov	r0, r3
 8001d02:	79fb      	ldrb	r3, [r7, #7]
 8001d04:	4a07      	ldr	r2, [pc, #28]	; (8001d24 <MGPIO_u8SetPinDirection+0x98>)
 8001d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d0a:	7bba      	ldrb	r2, [r7, #14]
 8001d0c:	4301      	orrs	r1, r0
 8001d0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	{
 8001d12:	e001      	b.n	8001d18 <MGPIO_u8SetPinDirection+0x8c>
	}
	else
	{
		    Local_u8ErrorState = ERROR_STATE_NOK;
 8001d14:	2300      	movs	r3, #0
 8001d16:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState;
 8001d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3714      	adds	r7, #20
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr
 8001d24:	2000000c 	.word	0x2000000c

08001d28 <MGPIO_u8SetPinValue>:
 *
 *
 ******************************************************************************
 */
uint8_t MGPIO_u8SetPinValue     ( Port_t Copy_PortID , Pin_t Copy_PinID , PinValue_t Copy_Value   )
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	71fb      	strb	r3, [r7, #7]
 8001d32:	460b      	mov	r3, r1
 8001d34:	71bb      	strb	r3, [r7, #6]
 8001d36:	4613      	mov	r3, r2
 8001d38:	717b      	strb	r3, [r7, #5]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	73fb      	strb	r3, [r7, #15]
	if ( Copy_PortID <= PORTG && Copy_PinID <= PIN15 )
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	2b06      	cmp	r3, #6
 8001d42:	d824      	bhi.n	8001d8e <MGPIO_u8SetPinValue+0x66>
 8001d44:	79bb      	ldrb	r3, [r7, #6]
 8001d46:	2b0f      	cmp	r3, #15
 8001d48:	d821      	bhi.n	8001d8e <MGPIO_u8SetPinValue+0x66>
	{
		GPIO_Ports[Copy_PortID]->ODR &=~ (PIN_MASK << (Copy_PinID)) ;
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	4a14      	ldr	r2, [pc, #80]	; (8001da0 <MGPIO_u8SetPinValue+0x78>)
 8001d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d52:	68da      	ldr	r2, [r3, #12]
 8001d54:	79bb      	ldrb	r3, [r7, #6]
 8001d56:	2101      	movs	r1, #1
 8001d58:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	4618      	mov	r0, r3
 8001d60:	79fb      	ldrb	r3, [r7, #7]
 8001d62:	490f      	ldr	r1, [pc, #60]	; (8001da0 <MGPIO_u8SetPinValue+0x78>)
 8001d64:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001d68:	4002      	ands	r2, r0
 8001d6a:	60da      	str	r2, [r3, #12]
		GPIO_Ports[Copy_PortID]->ODR |=  (Copy_Value<< (Copy_PinID)) ;
 8001d6c:	79fb      	ldrb	r3, [r7, #7]
 8001d6e:	4a0c      	ldr	r2, [pc, #48]	; (8001da0 <MGPIO_u8SetPinValue+0x78>)
 8001d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d74:	68da      	ldr	r2, [r3, #12]
 8001d76:	7979      	ldrb	r1, [r7, #5]
 8001d78:	79bb      	ldrb	r3, [r7, #6]
 8001d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7e:	4618      	mov	r0, r3
 8001d80:	79fb      	ldrb	r3, [r7, #7]
 8001d82:	4907      	ldr	r1, [pc, #28]	; (8001da0 <MGPIO_u8SetPinValue+0x78>)
 8001d84:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001d88:	4302      	orrs	r2, r0
 8001d8a:	60da      	str	r2, [r3, #12]
 8001d8c:	e001      	b.n	8001d92 <MGPIO_u8SetPinValue+0x6a>
			Local_u8ErrorState = ERROR_STATE_NOK;
		}*/
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState;
 8001d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3714      	adds	r7, #20
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bc80      	pop	{r7}
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	2000000c 	.word	0x2000000c

08001da4 <MGPIO_u8TogPinValue>:
 *
 *
 ******************************************************************************
 */
uint8_t MGPIO_u8TogPinValue     ( Port_t Copy_PortID , Pin_t Copy_PinID  )
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	460a      	mov	r2, r1
 8001dae:	71fb      	strb	r3, [r7, #7]
 8001db0:	4613      	mov	r3, r2
 8001db2:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK;
 8001db4:	2301      	movs	r3, #1
 8001db6:	73fb      	strb	r3, [r7, #15]
	if ( Copy_PortID <= PORTG && Copy_PinID <= PIN15 )
 8001db8:	79fb      	ldrb	r3, [r7, #7]
 8001dba:	2b06      	cmp	r3, #6
 8001dbc:	d813      	bhi.n	8001de6 <MGPIO_u8TogPinValue+0x42>
 8001dbe:	79bb      	ldrb	r3, [r7, #6]
 8001dc0:	2b0f      	cmp	r3, #15
 8001dc2:	d810      	bhi.n	8001de6 <MGPIO_u8TogPinValue+0x42>
	{
		GPIO_Ports[Copy_PortID]->ODR ^= PIN_MASK<<Copy_PinID ;
 8001dc4:	79fb      	ldrb	r3, [r7, #7]
 8001dc6:	4a0c      	ldr	r2, [pc, #48]	; (8001df8 <MGPIO_u8TogPinValue+0x54>)
 8001dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dcc:	68da      	ldr	r2, [r3, #12]
 8001dce:	79bb      	ldrb	r3, [r7, #6]
 8001dd0:	2101      	movs	r1, #1
 8001dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	79fb      	ldrb	r3, [r7, #7]
 8001dda:	4907      	ldr	r1, [pc, #28]	; (8001df8 <MGPIO_u8TogPinValue+0x54>)
 8001ddc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001de0:	4042      	eors	r2, r0
 8001de2:	60da      	str	r2, [r3, #12]
 8001de4:	e001      	b.n	8001dea <MGPIO_u8TogPinValue+0x46>
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK;
 8001de6:	2300      	movs	r3, #0
 8001de8:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState;
 8001dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3714      	adds	r7, #20
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bc80      	pop	{r7}
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	2000000c 	.word	0x2000000c

08001dfc <MGPTIMER_u8CounterStatus>:
 *
 *
 ******************************************************************************
 */
uint8_t  MGPTIMER_u8CounterStatus     ( GPTIMERindex_t Copy_GPTIMERindex ,  CounterStatus_t Copy_CounterStatus )
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	460a      	mov	r2, r1
 8001e06:	71fb      	strb	r3, [r7, #7]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	73fb      	strb	r3, [r7, #15]
	if ( Copy_GPTIMERindex <= TMR_5 && Copy_CounterStatus <= COUNTER_ENABLE )
 8001e10:	79fb      	ldrb	r3, [r7, #7]
 8001e12:	2b03      	cmp	r3, #3
 8001e14:	d81b      	bhi.n	8001e4e <MGPTIMER_u8CounterStatus+0x52>
 8001e16:	79bb      	ldrb	r3, [r7, #6]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d818      	bhi.n	8001e4e <MGPTIMER_u8CounterStatus+0x52>
	{
		GPTIMER_Index[Copy_GPTIMERindex] -> CR1 &=~ (GPTIMER_CEN_MASK  << (GPTIMER_CR1_CEN)) ;
 8001e1c:	79fb      	ldrb	r3, [r7, #7]
 8001e1e:	4a10      	ldr	r2, [pc, #64]	; (8001e60 <MGPTIMER_u8CounterStatus+0x64>)
 8001e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	79fb      	ldrb	r3, [r7, #7]
 8001e28:	490d      	ldr	r1, [pc, #52]	; (8001e60 <MGPTIMER_u8CounterStatus+0x64>)
 8001e2a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001e2e:	f022 0201 	bic.w	r2, r2, #1
 8001e32:	601a      	str	r2, [r3, #0]
		GPTIMER_Index[Copy_GPTIMERindex] -> CR1 |=  (Copy_CounterStatus<< (GPTIMER_CR1_CEN)) ;
 8001e34:	79fb      	ldrb	r3, [r7, #7]
 8001e36:	4a0a      	ldr	r2, [pc, #40]	; (8001e60 <MGPTIMER_u8CounterStatus+0x64>)
 8001e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e3c:	6819      	ldr	r1, [r3, #0]
 8001e3e:	79ba      	ldrb	r2, [r7, #6]
 8001e40:	79fb      	ldrb	r3, [r7, #7]
 8001e42:	4807      	ldr	r0, [pc, #28]	; (8001e60 <MGPTIMER_u8CounterStatus+0x64>)
 8001e44:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	e001      	b.n	8001e52 <MGPTIMER_u8CounterStatus+0x56>
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState ;
 8001e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bc80      	pop	{r7}
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	20000018 	.word	0x20000018

08001e64 <MGPTIMER_u8SetPrescaler>:
 *
 *
 ******************************************************************************
 */
uint8_t  MGPTIMER_u8SetPrescaler     ( GPTIMERindex_t Copy_GPTIMERindex ,  uint16_t Copy_u16Prescaler )
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	460a      	mov	r2, r1
 8001e6e:	71fb      	strb	r3, [r7, #7]
 8001e70:	4613      	mov	r3, r2
 8001e72:	80bb      	strh	r3, [r7, #4]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 8001e74:	2301      	movs	r3, #1
 8001e76:	73fb      	strb	r3, [r7, #15]
	if ( Copy_GPTIMERindex <= TMR_5 )
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	2b03      	cmp	r3, #3
 8001e7c:	d808      	bhi.n	8001e90 <MGPTIMER_u8SetPrescaler+0x2c>
	{
		GPTIMER_Index[Copy_GPTIMERindex] -> PSC =  Copy_u16Prescaler - 1 ;
 8001e7e:	88bb      	ldrh	r3, [r7, #4]
 8001e80:	1e59      	subs	r1, r3, #1
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	4a06      	ldr	r2, [pc, #24]	; (8001ea0 <MGPTIMER_u8SetPrescaler+0x3c>)
 8001e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e8a:	460a      	mov	r2, r1
 8001e8c:	629a      	str	r2, [r3, #40]	; 0x28
 8001e8e:	e001      	b.n	8001e94 <MGPTIMER_u8SetPrescaler+0x30>
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
 8001e90:	2300      	movs	r3, #0
 8001e92:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState ;
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3714      	adds	r7, #20
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr
 8001ea0:	20000018 	.word	0x20000018

08001ea4 <MGPTIMER_u8SetAutoReload>:
 *
 *
 ******************************************************************************
 */
uint8_t  MGPTIMER_u8SetAutoReload ( GPTIMERindex_t Copy_GPTIMERindex  , uint16_t  Copy_u16AutoReloadValue )
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	460a      	mov	r2, r1
 8001eae:	71fb      	strb	r3, [r7, #7]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	80bb      	strh	r3, [r7, #4]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	73fb      	strb	r3, [r7, #15]
	if ( Copy_GPTIMERindex <= TMR_5   )
 8001eb8:	79fb      	ldrb	r3, [r7, #7]
 8001eba:	2b03      	cmp	r3, #3
 8001ebc:	d806      	bhi.n	8001ecc <MGPTIMER_u8SetAutoReload+0x28>
	{
		GPTIMER_Index[Copy_GPTIMERindex] -> ARR =  Copy_u16AutoReloadValue ;
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	4a06      	ldr	r2, [pc, #24]	; (8001edc <MGPTIMER_u8SetAutoReload+0x38>)
 8001ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec6:	88ba      	ldrh	r2, [r7, #4]
 8001ec8:	62da      	str	r2, [r3, #44]	; 0x2c
 8001eca:	e001      	b.n	8001ed0 <MGPTIMER_u8SetAutoReload+0x2c>
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState ;
 8001ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3714      	adds	r7, #20
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bc80      	pop	{r7}
 8001eda:	4770      	bx	lr
 8001edc:	20000018 	.word	0x20000018

08001ee0 <MGPTIMER_u8SetChannelOutput>:
 *
 *
 ******************************************************************************
 */
uint8_t  MGPTIMER_u8SetChannelOutput     ( GPTIMERindex_t Copy_GPTIMERindex ,  Channelindex_t Copy_Channelindex , OutputCompareMode_t  Copy_OutputCompareMode , OutputComparePreloadStatus_t  Copy_OutputComparePreloadStatus  )
{
 8001ee0:	b490      	push	{r4, r7}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4604      	mov	r4, r0
 8001ee8:	4608      	mov	r0, r1
 8001eea:	4611      	mov	r1, r2
 8001eec:	461a      	mov	r2, r3
 8001eee:	4623      	mov	r3, r4
 8001ef0:	71fb      	strb	r3, [r7, #7]
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	71bb      	strb	r3, [r7, #6]
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	717b      	strb	r3, [r7, #5]
 8001efa:	4613      	mov	r3, r2
 8001efc:	713b      	strb	r3, [r7, #4]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 8001efe:	2301      	movs	r3, #1
 8001f00:	73fb      	strb	r3, [r7, #15]
	if ( Copy_GPTIMERindex <= TMR_5 && Copy_Channelindex <= TMR_CHANNEL_4 && Copy_OutputCompareMode <= OCM_PWM_MODE2 )
 8001f02:	79fb      	ldrb	r3, [r7, #7]
 8001f04:	2b03      	cmp	r3, #3
 8001f06:	f200 8098 	bhi.w	800203a <MGPTIMER_u8SetChannelOutput+0x15a>
 8001f0a:	79bb      	ldrb	r3, [r7, #6]
 8001f0c:	2b03      	cmp	r3, #3
 8001f0e:	f200 8094 	bhi.w	800203a <MGPTIMER_u8SetChannelOutput+0x15a>
 8001f12:	797b      	ldrb	r3, [r7, #5]
 8001f14:	2b07      	cmp	r3, #7
 8001f16:	f200 8090 	bhi.w	800203a <MGPTIMER_u8SetChannelOutput+0x15a>
	{
		uint8_t Local_u8Reg = ( Copy_Channelindex) / GPTIMER_CCMR_ACCSESS_1                            ;
 8001f1a:	79bb      	ldrb	r3, [r7, #6]
 8001f1c:	085b      	lsrs	r3, r3, #1
 8001f1e:	73bb      	strb	r3, [r7, #14]
		uint8_t Local_u8Bit = ((Copy_Channelindex) % GPTIMER_CCMR_ACCSESS_1 ) * GPTIMER_CCMR_ACCSESS_2 ;
 8001f20:	79bb      	ldrb	r3, [r7, #6]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	737b      	strb	r3, [r7, #13]

		GPTIMER_Index[Copy_GPTIMERindex] -> CCMR[Local_u8Reg] &=~ (GPTIMER_CCS_MASK  << (Local_u8Bit)) ;
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
 8001f2e:	4a47      	ldr	r2, [pc, #284]	; (800204c <MGPTIMER_u8SetChannelOutput+0x16c>)
 8001f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f34:	7bba      	ldrb	r2, [r7, #14]
 8001f36:	3206      	adds	r2, #6
 8001f38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001f3c:	7b7b      	ldrb	r3, [r7, #13]
 8001f3e:	2203      	movs	r2, #3
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	4618      	mov	r0, r3
 8001f48:	79fb      	ldrb	r3, [r7, #7]
 8001f4a:	4a40      	ldr	r2, [pc, #256]	; (800204c <MGPTIMER_u8SetChannelOutput+0x16c>)
 8001f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f50:	7bba      	ldrb	r2, [r7, #14]
 8001f52:	4001      	ands	r1, r0
 8001f54:	3206      	adds	r2, #6
 8001f56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		GPTIMER_Index[Copy_GPTIMERindex] -> CCMR[Local_u8Reg] &=~ (GPTIMER_OCM_MASK      << (Local_u8Bit+GPTIMER_OCM_ACCSESS)) ;
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	4a3b      	ldr	r2, [pc, #236]	; (800204c <MGPTIMER_u8SetChannelOutput+0x16c>)
 8001f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f62:	7bba      	ldrb	r2, [r7, #14]
 8001f64:	3206      	adds	r2, #6
 8001f66:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001f6a:	7b7b      	ldrb	r3, [r7, #13]
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	2207      	movs	r2, #7
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	43db      	mvns	r3, r3
 8001f76:	4618      	mov	r0, r3
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	4a34      	ldr	r2, [pc, #208]	; (800204c <MGPTIMER_u8SetChannelOutput+0x16c>)
 8001f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f80:	7bba      	ldrb	r2, [r7, #14]
 8001f82:	4001      	ands	r1, r0
 8001f84:	3206      	adds	r2, #6
 8001f86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		GPTIMER_Index[Copy_GPTIMERindex] -> CCMR[Local_u8Reg] |=  (Copy_OutputCompareMode<< (Local_u8Bit+GPTIMER_OCM_ACCSESS)) ;
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	4a2f      	ldr	r2, [pc, #188]	; (800204c <MGPTIMER_u8SetChannelOutput+0x16c>)
 8001f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f92:	7bba      	ldrb	r2, [r7, #14]
 8001f94:	3206      	adds	r2, #6
 8001f96:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001f9a:	797a      	ldrb	r2, [r7, #5]
 8001f9c:	7b7b      	ldrb	r3, [r7, #13]
 8001f9e:	3304      	adds	r3, #4
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	79fb      	ldrb	r3, [r7, #7]
 8001fa8:	4a28      	ldr	r2, [pc, #160]	; (800204c <MGPTIMER_u8SetChannelOutput+0x16c>)
 8001faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fae:	7bba      	ldrb	r2, [r7, #14]
 8001fb0:	4301      	orrs	r1, r0
 8001fb2:	3206      	adds	r2, #6
 8001fb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		GPTIMER_Index[Copy_GPTIMERindex] -> CCMR[Local_u8Reg] &=~ (GPTIMER_OCPE_MASK               << (Local_u8Bit+GPTIMER_OCPE_ACCSESS)) ;
 8001fb8:	79fb      	ldrb	r3, [r7, #7]
 8001fba:	4a24      	ldr	r2, [pc, #144]	; (800204c <MGPTIMER_u8SetChannelOutput+0x16c>)
 8001fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fc0:	7bba      	ldrb	r2, [r7, #14]
 8001fc2:	3206      	adds	r2, #6
 8001fc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001fc8:	7b7b      	ldrb	r3, [r7, #13]
 8001fca:	3303      	adds	r3, #3
 8001fcc:	2201      	movs	r2, #1
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	4a1c      	ldr	r2, [pc, #112]	; (800204c <MGPTIMER_u8SetChannelOutput+0x16c>)
 8001fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fde:	7bba      	ldrb	r2, [r7, #14]
 8001fe0:	4001      	ands	r1, r0
 8001fe2:	3206      	adds	r2, #6
 8001fe4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		GPTIMER_Index[Copy_GPTIMERindex] -> CCMR[Local_u8Reg] |=  (Copy_OutputComparePreloadStatus << (Local_u8Bit+GPTIMER_OCPE_ACCSESS)) ;
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
 8001fea:	4a18      	ldr	r2, [pc, #96]	; (800204c <MGPTIMER_u8SetChannelOutput+0x16c>)
 8001fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff0:	7bba      	ldrb	r2, [r7, #14]
 8001ff2:	3206      	adds	r2, #6
 8001ff4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001ff8:	793a      	ldrb	r2, [r7, #4]
 8001ffa:	7b7b      	ldrb	r3, [r7, #13]
 8001ffc:	3303      	adds	r3, #3
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	4618      	mov	r0, r3
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	4a11      	ldr	r2, [pc, #68]	; (800204c <MGPTIMER_u8SetChannelOutput+0x16c>)
 8002008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800200c:	7bba      	ldrb	r2, [r7, #14]
 800200e:	4301      	orrs	r1, r0
 8002010:	3206      	adds	r2, #6
 8002012:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		SET_BIT( (GPTIMER_Index[Copy_GPTIMERindex] -> CCER ) , ( Copy_Channelindex * GPTIMER_CCE_ACCSESS) );
 8002016:	79fb      	ldrb	r3, [r7, #7]
 8002018:	4a0c      	ldr	r2, [pc, #48]	; (800204c <MGPTIMER_u8SetChannelOutput+0x16c>)
 800201a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800201e:	6a1a      	ldr	r2, [r3, #32]
 8002020:	79bb      	ldrb	r3, [r7, #6]
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	2101      	movs	r1, #1
 8002026:	fa01 f303 	lsl.w	r3, r1, r3
 800202a:	4618      	mov	r0, r3
 800202c:	79fb      	ldrb	r3, [r7, #7]
 800202e:	4907      	ldr	r1, [pc, #28]	; (800204c <MGPTIMER_u8SetChannelOutput+0x16c>)
 8002030:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002034:	4302      	orrs	r2, r0
 8002036:	621a      	str	r2, [r3, #32]
	{
 8002038:	e001      	b.n	800203e <MGPTIMER_u8SetChannelOutput+0x15e>
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
 800203a:	2300      	movs	r3, #0
 800203c:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState ;
 800203e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002040:	4618      	mov	r0, r3
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bc90      	pop	{r4, r7}
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	20000018 	.word	0x20000018

08002050 <MGPTIMER_u8SetCompareValue>:
 *
 *
 ******************************************************************************
 */
uint8_t  MGPTIMER_u8SetCompareValue ( GPTIMERindex_t Copy_GPTIMERindex ,  Channelindex_t Copy_Channelindex , uint16_t  Copy_u16CompareValue )
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	71fb      	strb	r3, [r7, #7]
 800205a:	460b      	mov	r3, r1
 800205c:	71bb      	strb	r3, [r7, #6]
 800205e:	4613      	mov	r3, r2
 8002060:	80bb      	strh	r3, [r7, #4]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 8002062:	2301      	movs	r3, #1
 8002064:	73fb      	strb	r3, [r7, #15]
	if ( Copy_GPTIMERindex <= TMR_5 && Copy_Channelindex <= TMR_CHANNEL_4  )
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	2b03      	cmp	r3, #3
 800206a:	d80d      	bhi.n	8002088 <MGPTIMER_u8SetCompareValue+0x38>
 800206c:	79bb      	ldrb	r3, [r7, #6]
 800206e:	2b03      	cmp	r3, #3
 8002070:	d80a      	bhi.n	8002088 <MGPTIMER_u8SetCompareValue+0x38>
	{
		GPTIMER_Index[Copy_GPTIMERindex] -> CCR[Copy_Channelindex] =  Copy_u16CompareValue ;
 8002072:	79fb      	ldrb	r3, [r7, #7]
 8002074:	4a08      	ldr	r2, [pc, #32]	; (8002098 <MGPTIMER_u8SetCompareValue+0x48>)
 8002076:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800207a:	79bb      	ldrb	r3, [r7, #6]
 800207c:	88ba      	ldrh	r2, [r7, #4]
 800207e:	330c      	adds	r3, #12
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	440b      	add	r3, r1
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	e001      	b.n	800208c <MGPTIMER_u8SetCompareValue+0x3c>
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
 8002088:	2300      	movs	r3, #0
 800208a:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState ;
 800208c:	7bfb      	ldrb	r3, [r7, #15]
}
 800208e:	4618      	mov	r0, r3
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr
 8002098:	20000018 	.word	0x20000018

0800209c <MGPTIMER_u8ClearInterruptFlags>:
 *
 *
 ******************************************************************************
 */
static uint8_t  MGPTIMER_u8ClearInterruptFlags( GPTIMERindex_t Copy_GPTIMERindex )
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4603      	mov	r3, r0
 80020a4:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 80020a6:	2301      	movs	r3, #1
 80020a8:	73fb      	strb	r3, [r7, #15]
	if ( Copy_GPTIMERindex <= TMR_5 )
 80020aa:	79fb      	ldrb	r3, [r7, #7]
 80020ac:	2b03      	cmp	r3, #3
 80020ae:	d80c      	bhi.n	80020ca <MGPTIMER_u8ClearInterruptFlags+0x2e>
	{
		GPTIMER_Index[Copy_GPTIMERindex] -> SR &=~ (GPTIMER_CCIF_MASK << GPTIMER_SR_CC1IF);
 80020b0:	79fb      	ldrb	r3, [r7, #7]
 80020b2:	4a0a      	ldr	r2, [pc, #40]	; (80020dc <MGPTIMER_u8ClearInterruptFlags+0x40>)
 80020b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b8:	691a      	ldr	r2, [r3, #16]
 80020ba:	79fb      	ldrb	r3, [r7, #7]
 80020bc:	4907      	ldr	r1, [pc, #28]	; (80020dc <MGPTIMER_u8ClearInterruptFlags+0x40>)
 80020be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80020c2:	f022 021e 	bic.w	r2, r2, #30
 80020c6:	611a      	str	r2, [r3, #16]
 80020c8:	e001      	b.n	80020ce <MGPTIMER_u8ClearInterruptFlags+0x32>
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
 80020ca:	2300      	movs	r3, #0
 80020cc:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState ;
 80020ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3714      	adds	r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bc80      	pop	{r7}
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	20000018 	.word	0x20000018

080020e0 <TIM2_IRQHandler>:

/*************************************************************************************************************************************/
/********************************************************* Handlers implementations **************************************************/
/*************************************************************************************************************************************/
void TIM2_IRQHandler(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
	if (  GPTIMER_ApfCallBack[TMR_2] != NULL )
 80020e4:	4b05      	ldr	r3, [pc, #20]	; (80020fc <TIM2_IRQHandler+0x1c>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d005      	beq.n	80020f8 <TIM2_IRQHandler+0x18>
	{
		MGPTIMER_u8ClearInterruptFlags(TMR_2);
 80020ec:	2000      	movs	r0, #0
 80020ee:	f7ff ffd5 	bl	800209c <MGPTIMER_u8ClearInterruptFlags>
		GPTIMER_ApfCallBack[TMR_2]();
 80020f2:	4b02      	ldr	r3, [pc, #8]	; (80020fc <TIM2_IRQHandler+0x1c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4798      	blx	r3
	}
}
 80020f8:	bf00      	nop
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	200000d4 	.word	0x200000d4

08002100 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
	if (  GPTIMER_ApfCallBack[TMR_3] != NULL )
 8002104:	4b05      	ldr	r3, [pc, #20]	; (800211c <TIM3_IRQHandler+0x1c>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d005      	beq.n	8002118 <TIM3_IRQHandler+0x18>
	{
		MGPTIMER_u8ClearInterruptFlags(TMR_3);
 800210c:	2001      	movs	r0, #1
 800210e:	f7ff ffc5 	bl	800209c <MGPTIMER_u8ClearInterruptFlags>
		GPTIMER_ApfCallBack[TMR_3]();
 8002112:	4b02      	ldr	r3, [pc, #8]	; (800211c <TIM3_IRQHandler+0x1c>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	4798      	blx	r3
	}
}
 8002118:	bf00      	nop
 800211a:	bd80      	pop	{r7, pc}
 800211c:	200000d4 	.word	0x200000d4

08002120 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
	if (  GPTIMER_ApfCallBack[TMR_4] != NULL )
 8002124:	4b05      	ldr	r3, [pc, #20]	; (800213c <TIM4_IRQHandler+0x1c>)
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d005      	beq.n	8002138 <TIM4_IRQHandler+0x18>
	{
		MGPTIMER_u8ClearInterruptFlags(TMR_4);
 800212c:	2002      	movs	r0, #2
 800212e:	f7ff ffb5 	bl	800209c <MGPTIMER_u8ClearInterruptFlags>
		GPTIMER_ApfCallBack[TMR_4]();
 8002132:	4b02      	ldr	r3, [pc, #8]	; (800213c <TIM4_IRQHandler+0x1c>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	4798      	blx	r3
	}
}void TIM5_IRQHandler(void)
 8002138:	bf00      	nop
 800213a:	bd80      	pop	{r7, pc}
 800213c:	200000d4 	.word	0x200000d4

08002140 <TIM5_IRQHandler>:
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
	if (  GPTIMER_ApfCallBack[TMR_5] != NULL )
 8002144:	4b05      	ldr	r3, [pc, #20]	; (800215c <TIM5_IRQHandler+0x1c>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d005      	beq.n	8002158 <TIM5_IRQHandler+0x18>
	{
		MGPTIMER_u8ClearInterruptFlags(TMR_5);
 800214c:	2003      	movs	r0, #3
 800214e:	f7ff ffa5 	bl	800209c <MGPTIMER_u8ClearInterruptFlags>
		GPTIMER_ApfCallBack[TMR_5]();
 8002152:	4b02      	ldr	r3, [pc, #8]	; (800215c <TIM5_IRQHandler+0x1c>)
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	4798      	blx	r3
	}
}
 8002158:	bf00      	nop
 800215a:	bd80      	pop	{r7, pc}
 800215c:	200000d4 	.word	0x200000d4

08002160 <SGUI_voidInit>:

/*************************************************************************************************************************************/
/********************************************************* Functions implementations *************************************************/
/*************************************************************************************************************************************/
void SGUI_voidInit (void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
	HTFT_voidInit    (                );
 8002164:	f001 f8fe 	bl	8003364 <HTFT_voidInit>
}
 8002168:	bf00      	nop
 800216a:	bd80      	pop	{r7, pc}

0800216c <SGUI_voidMainFrame>:
void SGUI_voidMainFrame ( uint8_t Copy_u8SpeedValue , uint8_t Copy_u8BattaryVolt , GUIDirection_t  Copy_Direction  )
{
 800216c:	b5b0      	push	{r4, r5, r7, lr}
 800216e:	b096      	sub	sp, #88	; 0x58
 8002170:	af04      	add	r7, sp, #16
 8002172:	4603      	mov	r3, r0
 8002174:	71fb      	strb	r3, [r7, #7]
 8002176:	460b      	mov	r3, r1
 8002178:	71bb      	strb	r3, [r7, #6]
 800217a:	4613      	mov	r3, r2
 800217c:	717b      	strb	r3, [r7, #5]
	uint16_t Local_pu16X[16]={128, 128, 128, 128, 128, 128, 128, 128, 65535, 128, 128, 128, 128, 128, 128, 128};
 800217e:	4b26      	ldr	r3, [pc, #152]	; (8002218 <SGUI_voidMainFrame+0xac>)
 8002180:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002184:	461d      	mov	r5, r3
 8002186:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002188:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800218a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800218e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint16_t Local_pu16BattaryFrame[16]= {0, 16380, 8196, 8196, 8196, 8196, 8196, 8196, 8196, 8196, 8196, 8196, 8196, 8196, 15996, 576};
 8002192:	4b22      	ldr	r3, [pc, #136]	; (800221c <SGUI_voidMainFrame+0xb0>)
 8002194:	f107 0408 	add.w	r4, r7, #8
 8002198:	461d      	mov	r5, r3
 800219a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800219c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800219e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80021a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	HTFT_u8FillColor                                                ( GUI_GUI_MAIN_BACKGROUND );
 80021a6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80021aa:	f001 f94d 	bl	8003448 <HTFT_u8FillColor>
	HTFT_u8DrawFrameu16(Local_pu16X, 0 , 15  , 16  , 16 , 8         , GUI_MAIN_FRAME );
 80021ae:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80021b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021b6:	9302      	str	r3, [sp, #8]
 80021b8:	2308      	movs	r3, #8
 80021ba:	9301      	str	r3, [sp, #4]
 80021bc:	2310      	movs	r3, #16
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	2310      	movs	r3, #16
 80021c2:	220f      	movs	r2, #15
 80021c4:	2100      	movs	r1, #0
 80021c6:	f001 fa90 	bl	80036ea <HTFT_u8DrawFrameu16>
	HTFT_u8DrawText((uint8_t *)"SPEED" , 125 , 130 , 2              , GUI_MAIN_FRAME );
 80021ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	2302      	movs	r3, #2
 80021d2:	2282      	movs	r2, #130	; 0x82
 80021d4:	217d      	movs	r1, #125	; 0x7d
 80021d6:	4812      	ldr	r0, [pc, #72]	; (8002220 <SGUI_voidMainFrame+0xb4>)
 80021d8:	f001 fa50 	bl	800367c <HTFT_u8DrawText>
	HTFT_u8DrawFrameu16(Local_pu16BattaryFrame,65 ,10 ,16,16, 4     , GUI_MAIN_FRAME );
 80021dc:	f107 0008 	add.w	r0, r7, #8
 80021e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021e4:	9302      	str	r3, [sp, #8]
 80021e6:	2304      	movs	r3, #4
 80021e8:	9301      	str	r3, [sp, #4]
 80021ea:	2310      	movs	r3, #16
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	2310      	movs	r3, #16
 80021f0:	220a      	movs	r2, #10
 80021f2:	2141      	movs	r1, #65	; 0x41
 80021f4:	f001 fa79 	bl	80036ea <HTFT_u8DrawFrameu16>
	/*-------------------------------------------------------------------------------------------------------*/
	SGUI_voidUpdateSpeed(Copy_u8SpeedValue);
 80021f8:	79fb      	ldrb	r3, [r7, #7]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f000 f812 	bl	8002224 <SGUI_voidUpdateSpeed>
	/*-------------------------------------------------------------------------------------------------------*/
	SGUI_voidUpdateBattaryVolt(Copy_u8BattaryVolt ) ;
 8002200:	79bb      	ldrb	r3, [r7, #6]
 8002202:	4618      	mov	r0, r3
 8002204:	f000 f938 	bl	8002478 <SGUI_voidUpdateBattaryVolt>
	/*-------------------------------------------------------------------------------------------------------*/
	SGUI_voidUpdateDirection(Copy_Direction);
 8002208:	797b      	ldrb	r3, [r7, #5]
 800220a:	4618      	mov	r0, r3
 800220c:	f000 f88c 	bl	8002328 <SGUI_voidUpdateDirection>
	/*-------------------------------------------------------------------------------------------------------*/
}
 8002210:	bf00      	nop
 8002212:	3748      	adds	r7, #72	; 0x48
 8002214:	46bd      	mov	sp, r7
 8002216:	bdb0      	pop	{r4, r5, r7, pc}
 8002218:	08004f78 	.word	0x08004f78
 800221c:	08004f98 	.word	0x08004f98
 8002220:	08004f70 	.word	0x08004f70

08002224 <SGUI_voidUpdateSpeed>:
void SGUI_voidUpdateSpeed (uint8_t Copy_u8SpeedValue)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af02      	add	r7, sp, #8
 800222a:	4603      	mov	r3, r0
 800222c:	71fb      	strb	r3, [r7, #7]
	HTFT_u8DrawRectangle(75  , 110 , 95  , 120                        , GUI_GUI_MAIN_BACKGROUND );
 800222e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	2378      	movs	r3, #120	; 0x78
 8002236:	225f      	movs	r2, #95	; 0x5f
 8002238:	216e      	movs	r1, #110	; 0x6e
 800223a:	204b      	movs	r0, #75	; 0x4b
 800223c:	f001 f947 	bl	80034ce <HTFT_u8DrawRectangle>
	if ( Copy_u8SpeedValue < 100 )
 8002240:	79fb      	ldrb	r3, [r7, #7]
 8002242:	2b63      	cmp	r3, #99	; 0x63
 8002244:	d827      	bhi.n	8002296 <SGUI_voidUpdateSpeed+0x72>
	{
		uint8_t Local_u8TempNumber1 = Copy_u8SpeedValue % 10   ;
 8002246:	79fa      	ldrb	r2, [r7, #7]
 8002248:	4b36      	ldr	r3, [pc, #216]	; (8002324 <SGUI_voidUpdateSpeed+0x100>)
 800224a:	fba3 1302 	umull	r1, r3, r3, r2
 800224e:	08d9      	lsrs	r1, r3, #3
 8002250:	460b      	mov	r3, r1
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	440b      	add	r3, r1
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	72fb      	strb	r3, [r7, #11]
		uint8_t Local_u8TempNumber2 = Copy_u8SpeedValue / 10   ;
 800225c:	79fb      	ldrb	r3, [r7, #7]
 800225e:	4a31      	ldr	r2, [pc, #196]	; (8002324 <SGUI_voidUpdateSpeed+0x100>)
 8002260:	fba2 2303 	umull	r2, r3, r2, r3
 8002264:	08db      	lsrs	r3, r3, #3
 8002266:	72bb      	strb	r3, [r7, #10]
		HTFT_u8DrawChar(Local_u8TempNumber2 +'0', 90, 100 , 2         , GUI_SPEED_DIRECTION );
 8002268:	7abb      	ldrb	r3, [r7, #10]
 800226a:	3330      	adds	r3, #48	; 0x30
 800226c:	b2d8      	uxtb	r0, r3
 800226e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002272:	9300      	str	r3, [sp, #0]
 8002274:	2302      	movs	r3, #2
 8002276:	2264      	movs	r2, #100	; 0x64
 8002278:	215a      	movs	r1, #90	; 0x5a
 800227a:	f001 f995 	bl	80035a8 <HTFT_u8DrawChar>
		HTFT_u8DrawChar(Local_u8TempNumber1 +'0', 80, 100 , 2         , GUI_SPEED_DIRECTION );
 800227e:	7afb      	ldrb	r3, [r7, #11]
 8002280:	3330      	adds	r3, #48	; 0x30
 8002282:	b2d8      	uxtb	r0, r3
 8002284:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002288:	9300      	str	r3, [sp, #0]
 800228a:	2302      	movs	r3, #2
 800228c:	2264      	movs	r2, #100	; 0x64
 800228e:	2150      	movs	r1, #80	; 0x50
 8002290:	f001 f98a 	bl	80035a8 <HTFT_u8DrawChar>
		uint8_t Local_u8TempNumber4 = Local_u8TempNumber2 / 10   ;
		HTFT_u8DrawChar(Local_u8TempNumber4 +'0', 100 , 100 , 2       , GUI_SPEED_DIRECTION);
		HTFT_u8DrawChar(Local_u8TempNumber3 +'0', 90  , 100 , 2       , GUI_SPEED_DIRECTION);
		HTFT_u8DrawChar(Local_u8TempNumber1 +'0', 80  , 100 , 2       , GUI_SPEED_DIRECTION);
	}
}
 8002294:	e042      	b.n	800231c <SGUI_voidUpdateSpeed+0xf8>
		uint8_t Local_u8TempNumber1 = Copy_u8SpeedValue % 10   ;
 8002296:	79fa      	ldrb	r2, [r7, #7]
 8002298:	4b22      	ldr	r3, [pc, #136]	; (8002324 <SGUI_voidUpdateSpeed+0x100>)
 800229a:	fba3 1302 	umull	r1, r3, r3, r2
 800229e:	08d9      	lsrs	r1, r3, #3
 80022a0:	460b      	mov	r3, r1
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	440b      	add	r3, r1
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	73fb      	strb	r3, [r7, #15]
		uint8_t Local_u8TempNumber2 = Copy_u8SpeedValue / 10   ;
 80022ac:	79fb      	ldrb	r3, [r7, #7]
 80022ae:	4a1d      	ldr	r2, [pc, #116]	; (8002324 <SGUI_voidUpdateSpeed+0x100>)
 80022b0:	fba2 2303 	umull	r2, r3, r2, r3
 80022b4:	08db      	lsrs	r3, r3, #3
 80022b6:	73bb      	strb	r3, [r7, #14]
		uint8_t Local_u8TempNumber3 = Local_u8TempNumber2 % 10   ;
 80022b8:	7bba      	ldrb	r2, [r7, #14]
 80022ba:	4b1a      	ldr	r3, [pc, #104]	; (8002324 <SGUI_voidUpdateSpeed+0x100>)
 80022bc:	fba3 1302 	umull	r1, r3, r3, r2
 80022c0:	08d9      	lsrs	r1, r3, #3
 80022c2:	460b      	mov	r3, r1
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	440b      	add	r3, r1
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	737b      	strb	r3, [r7, #13]
		uint8_t Local_u8TempNumber4 = Local_u8TempNumber2 / 10   ;
 80022ce:	7bbb      	ldrb	r3, [r7, #14]
 80022d0:	4a14      	ldr	r2, [pc, #80]	; (8002324 <SGUI_voidUpdateSpeed+0x100>)
 80022d2:	fba2 2303 	umull	r2, r3, r2, r3
 80022d6:	08db      	lsrs	r3, r3, #3
 80022d8:	733b      	strb	r3, [r7, #12]
		HTFT_u8DrawChar(Local_u8TempNumber4 +'0', 100 , 100 , 2       , GUI_SPEED_DIRECTION);
 80022da:	7b3b      	ldrb	r3, [r7, #12]
 80022dc:	3330      	adds	r3, #48	; 0x30
 80022de:	b2d8      	uxtb	r0, r3
 80022e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	2302      	movs	r3, #2
 80022e8:	2264      	movs	r2, #100	; 0x64
 80022ea:	2164      	movs	r1, #100	; 0x64
 80022ec:	f001 f95c 	bl	80035a8 <HTFT_u8DrawChar>
		HTFT_u8DrawChar(Local_u8TempNumber3 +'0', 90  , 100 , 2       , GUI_SPEED_DIRECTION);
 80022f0:	7b7b      	ldrb	r3, [r7, #13]
 80022f2:	3330      	adds	r3, #48	; 0x30
 80022f4:	b2d8      	uxtb	r0, r3
 80022f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	2302      	movs	r3, #2
 80022fe:	2264      	movs	r2, #100	; 0x64
 8002300:	215a      	movs	r1, #90	; 0x5a
 8002302:	f001 f951 	bl	80035a8 <HTFT_u8DrawChar>
		HTFT_u8DrawChar(Local_u8TempNumber1 +'0', 80  , 100 , 2       , GUI_SPEED_DIRECTION);
 8002306:	7bfb      	ldrb	r3, [r7, #15]
 8002308:	3330      	adds	r3, #48	; 0x30
 800230a:	b2d8      	uxtb	r0, r3
 800230c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	2302      	movs	r3, #2
 8002314:	2264      	movs	r2, #100	; 0x64
 8002316:	2150      	movs	r1, #80	; 0x50
 8002318:	f001 f946 	bl	80035a8 <HTFT_u8DrawChar>
}
 800231c:	bf00      	nop
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	cccccccd 	.word	0xcccccccd

08002328 <SGUI_voidUpdateDirection>:
void SGUI_voidUpdateDirection (GUIDirection_t  Copy_Direction)
{
 8002328:	b5b0      	push	{r4, r5, r7, lr}
 800232a:	b0ae      	sub	sp, #184	; 0xb8
 800232c:	af04      	add	r7, sp, #16
 800232e:	4603      	mov	r3, r0
 8002330:	71fb      	strb	r3, [r7, #7]
	uint16_t Local_pu16DirFront[16]= {384, 384, 384, 384, 384, 384, 384, 384, 32766, 32766, 16380, 8184, 4080, 2016, 960, 384};
 8002332:	4b4c      	ldr	r3, [pc, #304]	; (8002464 <SGUI_voidUpdateDirection+0x13c>)
 8002334:	f107 0488 	add.w	r4, r7, #136	; 0x88
 8002338:	461d      	mov	r5, r3
 800233a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800233c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800233e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002342:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint16_t Local_pu16DirBack [16]= {384, 960, 2016, 4080, 8184, 16380, 32766, 32766, 384, 384, 384, 384, 384, 384, 384, 384};
 8002346:	4b48      	ldr	r3, [pc, #288]	; (8002468 <SGUI_voidUpdateDirection+0x140>)
 8002348:	f107 0468 	add.w	r4, r7, #104	; 0x68
 800234c:	461d      	mov	r5, r3
 800234e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002350:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002352:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002356:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint16_t Local_pu16DirRight[16]= {0, 192, 224, 240, 248, 252, 254, 65535, 65535, 254, 252, 248, 240, 224, 192, 0};
 800235a:	4b44      	ldr	r3, [pc, #272]	; (800246c <SGUI_voidUpdateDirection+0x144>)
 800235c:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8002360:	461d      	mov	r5, r3
 8002362:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002364:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002366:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800236a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint16_t Local_pu16DirLeft [16]= {0, 768, 1792, 3840, 7936, 16128, 32512, 65535, 65535, 32512, 16128, 7936, 3840, 1792, 768, 0};
 800236e:	4b40      	ldr	r3, [pc, #256]	; (8002470 <SGUI_voidUpdateDirection+0x148>)
 8002370:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002374:	461d      	mov	r5, r3
 8002376:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002378:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800237a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800237e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint16_t Local_pu16StopStopsign[16]={4080, 4104, 8324, 24194, 37617, 37521, 40689, 32769, 40481, 33313, 40481, 36897, 24314, 8196, 4104, 4080};
 8002382:	4b3c      	ldr	r3, [pc, #240]	; (8002474 <SGUI_voidUpdateDirection+0x14c>)
 8002384:	f107 0408 	add.w	r4, r7, #8
 8002388:	461d      	mov	r5, r3
 800238a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800238c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800238e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002392:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	HTFT_u8DrawRectangle(3  , 53 , 10  , 65                              , GUI_GUI_MAIN_BACKGROUND );
 8002396:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	2341      	movs	r3, #65	; 0x41
 800239e:	220a      	movs	r2, #10
 80023a0:	2135      	movs	r1, #53	; 0x35
 80023a2:	2003      	movs	r0, #3
 80023a4:	f001 f893 	bl	80034ce <HTFT_u8DrawRectangle>
	if ( Copy_Direction == GUI_FORWARD )
 80023a8:	79fb      	ldrb	r3, [r7, #7]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10e      	bne.n	80023cc <SGUI_voidUpdateDirection+0xa4>
	{
		HTFT_u8DrawFrameu16(Local_pu16DirFront, 5 , 15  , 16, 16, 3      , GUI_SPEED_DIRECTION);
 80023ae:	f107 0088 	add.w	r0, r7, #136	; 0x88
 80023b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023b6:	9302      	str	r3, [sp, #8]
 80023b8:	2303      	movs	r3, #3
 80023ba:	9301      	str	r3, [sp, #4]
 80023bc:	2310      	movs	r3, #16
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	2310      	movs	r3, #16
 80023c2:	220f      	movs	r2, #15
 80023c4:	2105      	movs	r1, #5
 80023c6:	f001 f990 	bl	80036ea <HTFT_u8DrawFrameu16>
	}
	else if ( Copy_Direction == GUI_STOP )
	{
		HTFT_u8DrawFrameu16(Local_pu16StopStopsign , 5 , 15  , 16, 16, 3 , GUI_SPEED_DIRECTION);
	}
}
 80023ca:	e046      	b.n	800245a <SGUI_voidUpdateDirection+0x132>
	else if ( Copy_Direction == GUI_RIGHT )
 80023cc:	79fb      	ldrb	r3, [r7, #7]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d10e      	bne.n	80023f0 <SGUI_voidUpdateDirection+0xc8>
		HTFT_u8DrawFrameu16(Local_pu16DirRight , 5 , 15  , 16, 16, 3     , GUI_SPEED_DIRECTION);
 80023d2:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80023d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023da:	9302      	str	r3, [sp, #8]
 80023dc:	2303      	movs	r3, #3
 80023de:	9301      	str	r3, [sp, #4]
 80023e0:	2310      	movs	r3, #16
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	2310      	movs	r3, #16
 80023e6:	220f      	movs	r2, #15
 80023e8:	2105      	movs	r1, #5
 80023ea:	f001 f97e 	bl	80036ea <HTFT_u8DrawFrameu16>
}
 80023ee:	e034      	b.n	800245a <SGUI_voidUpdateDirection+0x132>
	else if ( Copy_Direction == GUI_LEFT )
 80023f0:	79fb      	ldrb	r3, [r7, #7]
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d10e      	bne.n	8002414 <SGUI_voidUpdateDirection+0xec>
		HTFT_u8DrawFrameu16(Local_pu16DirLeft , 5 , 15  , 16, 16, 3      , GUI_SPEED_DIRECTION);
 80023f6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80023fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023fe:	9302      	str	r3, [sp, #8]
 8002400:	2303      	movs	r3, #3
 8002402:	9301      	str	r3, [sp, #4]
 8002404:	2310      	movs	r3, #16
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	2310      	movs	r3, #16
 800240a:	220f      	movs	r2, #15
 800240c:	2105      	movs	r1, #5
 800240e:	f001 f96c 	bl	80036ea <HTFT_u8DrawFrameu16>
}
 8002412:	e022      	b.n	800245a <SGUI_voidUpdateDirection+0x132>
	else if ( Copy_Direction == GUI_BACKWARD )
 8002414:	79fb      	ldrb	r3, [r7, #7]
 8002416:	2b03      	cmp	r3, #3
 8002418:	d10e      	bne.n	8002438 <SGUI_voidUpdateDirection+0x110>
		HTFT_u8DrawFrameu16(Local_pu16DirBack , 5 , 15  , 16, 16, 3      , GUI_SPEED_DIRECTION);
 800241a:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800241e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002422:	9302      	str	r3, [sp, #8]
 8002424:	2303      	movs	r3, #3
 8002426:	9301      	str	r3, [sp, #4]
 8002428:	2310      	movs	r3, #16
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	2310      	movs	r3, #16
 800242e:	220f      	movs	r2, #15
 8002430:	2105      	movs	r1, #5
 8002432:	f001 f95a 	bl	80036ea <HTFT_u8DrawFrameu16>
}
 8002436:	e010      	b.n	800245a <SGUI_voidUpdateDirection+0x132>
	else if ( Copy_Direction == GUI_STOP )
 8002438:	79fb      	ldrb	r3, [r7, #7]
 800243a:	2b04      	cmp	r3, #4
 800243c:	d10d      	bne.n	800245a <SGUI_voidUpdateDirection+0x132>
		HTFT_u8DrawFrameu16(Local_pu16StopStopsign , 5 , 15  , 16, 16, 3 , GUI_SPEED_DIRECTION);
 800243e:	f107 0008 	add.w	r0, r7, #8
 8002442:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002446:	9302      	str	r3, [sp, #8]
 8002448:	2303      	movs	r3, #3
 800244a:	9301      	str	r3, [sp, #4]
 800244c:	2310      	movs	r3, #16
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	2310      	movs	r3, #16
 8002452:	220f      	movs	r2, #15
 8002454:	2105      	movs	r1, #5
 8002456:	f001 f948 	bl	80036ea <HTFT_u8DrawFrameu16>
}
 800245a:	bf00      	nop
 800245c:	37a8      	adds	r7, #168	; 0xa8
 800245e:	46bd      	mov	sp, r7
 8002460:	bdb0      	pop	{r4, r5, r7, pc}
 8002462:	bf00      	nop
 8002464:	08004fb8 	.word	0x08004fb8
 8002468:	08004fd8 	.word	0x08004fd8
 800246c:	08004ff8 	.word	0x08004ff8
 8002470:	08005018 	.word	0x08005018
 8002474:	08005038 	.word	0x08005038

08002478 <SGUI_voidUpdateBattaryVolt>:
void SGUI_voidUpdateBattaryVolt (uint8_t Copy_u8BattaryVolt)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b08e      	sub	sp, #56	; 0x38
 800247c:	af04      	add	r7, sp, #16
 800247e:	4603      	mov	r3, r0
 8002480:	71fb      	strb	r3, [r7, #7]
	uint16_t Local_pu16BattaryLimit[16]= {0, 0, 8184, 8184, 8184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 8002482:	f107 0308 	add.w	r3, r7, #8
 8002486:	2220      	movs	r2, #32
 8002488:	2100      	movs	r1, #0
 800248a:	4618      	mov	r0, r3
 800248c:	f002 fd5c 	bl	8004f48 <memset>
 8002490:	f641 73f8 	movw	r3, #8184	; 0x1ff8
 8002494:	81bb      	strh	r3, [r7, #12]
 8002496:	f641 73f8 	movw	r3, #8184	; 0x1ff8
 800249a:	81fb      	strh	r3, [r7, #14]
 800249c:	f641 73f8 	movw	r3, #8184	; 0x1ff8
 80024a0:	823b      	strh	r3, [r7, #16]
	if ( Copy_u8BattaryVolt >= 9 )
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	2b08      	cmp	r3, #8
 80024a6:	d938      	bls.n	800251a <SGUI_voidUpdateBattaryVolt+0xa2>
	{
		HTFT_u8DrawFrameu16(Local_pu16BattaryLimit, 65 , 10  , 16, 16, 4, TFT_GREEN);
 80024a8:	f107 0008 	add.w	r0, r7, #8
 80024ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024b0:	9302      	str	r3, [sp, #8]
 80024b2:	2304      	movs	r3, #4
 80024b4:	9301      	str	r3, [sp, #4]
 80024b6:	2310      	movs	r3, #16
 80024b8:	9300      	str	r3, [sp, #0]
 80024ba:	2310      	movs	r3, #16
 80024bc:	220a      	movs	r2, #10
 80024be:	2141      	movs	r1, #65	; 0x41
 80024c0:	f001 f913 	bl	80036ea <HTFT_u8DrawFrameu16>
		HTFT_u8DrawFrameu16(Local_pu16BattaryLimit, 65 , 22  , 16, 16, 4, TFT_GREEN);
 80024c4:	f107 0008 	add.w	r0, r7, #8
 80024c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024cc:	9302      	str	r3, [sp, #8]
 80024ce:	2304      	movs	r3, #4
 80024d0:	9301      	str	r3, [sp, #4]
 80024d2:	2310      	movs	r3, #16
 80024d4:	9300      	str	r3, [sp, #0]
 80024d6:	2310      	movs	r3, #16
 80024d8:	2216      	movs	r2, #22
 80024da:	2141      	movs	r1, #65	; 0x41
 80024dc:	f001 f905 	bl	80036ea <HTFT_u8DrawFrameu16>
		HTFT_u8DrawFrameu16(Local_pu16BattaryLimit, 65 , 34  , 16, 16, 4, TFT_GREEN);
 80024e0:	f107 0008 	add.w	r0, r7, #8
 80024e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024e8:	9302      	str	r3, [sp, #8]
 80024ea:	2304      	movs	r3, #4
 80024ec:	9301      	str	r3, [sp, #4]
 80024ee:	2310      	movs	r3, #16
 80024f0:	9300      	str	r3, [sp, #0]
 80024f2:	2310      	movs	r3, #16
 80024f4:	2222      	movs	r2, #34	; 0x22
 80024f6:	2141      	movs	r1, #65	; 0x41
 80024f8:	f001 f8f7 	bl	80036ea <HTFT_u8DrawFrameu16>
		HTFT_u8DrawFrameu16(Local_pu16BattaryLimit, 65 , 46  , 16, 16, 4, TFT_GREEN);
 80024fc:	f107 0008 	add.w	r0, r7, #8
 8002500:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002504:	9302      	str	r3, [sp, #8]
 8002506:	2304      	movs	r3, #4
 8002508:	9301      	str	r3, [sp, #4]
 800250a:	2310      	movs	r3, #16
 800250c:	9300      	str	r3, [sp, #0]
 800250e:	2310      	movs	r3, #16
 8002510:	222e      	movs	r2, #46	; 0x2e
 8002512:	2141      	movs	r1, #65	; 0x41
 8002514:	f001 f8e9 	bl	80036ea <HTFT_u8DrawFrameu16>
		HTFT_u8DrawFrameu16(Local_pu16BattaryLimit, 65 , 10  , 16, 16, 4, TFT_GREEN);
		HTFT_u8DrawFrameu16(Local_pu16BattaryLimit, 65 , 22  , 16, 16, 4, TFT_RED);
		HTFT_u8DrawFrameu16(Local_pu16BattaryLimit, 65 , 34  , 16, 16, 4, TFT_RED);
		HTFT_u8DrawFrameu16(Local_pu16BattaryLimit, 65 , 46  , 16, 16, 4, TFT_RED);
	}
}
 8002518:	e0af      	b.n	800267a <SGUI_voidUpdateBattaryVolt+0x202>
	else if ( Copy_u8BattaryVolt >= 6 )
 800251a:	79fb      	ldrb	r3, [r7, #7]
 800251c:	2b05      	cmp	r3, #5
 800251e:	d938      	bls.n	8002592 <SGUI_voidUpdateBattaryVolt+0x11a>
		HTFT_u8DrawFrameu16(Local_pu16BattaryLimit, 65 , 10  , 16, 16, 4, TFT_GREEN);
 8002520:	f107 0008 	add.w	r0, r7, #8
 8002524:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002528:	9302      	str	r3, [sp, #8]
 800252a:	2304      	movs	r3, #4
 800252c:	9301      	str	r3, [sp, #4]
 800252e:	2310      	movs	r3, #16
 8002530:	9300      	str	r3, [sp, #0]
 8002532:	2310      	movs	r3, #16
 8002534:	220a      	movs	r2, #10
 8002536:	2141      	movs	r1, #65	; 0x41
 8002538:	f001 f8d7 	bl	80036ea <HTFT_u8DrawFrameu16>
		HTFT_u8DrawFrameu16(Local_pu16BattaryLimit, 65 , 22  , 16, 16, 4, TFT_GREEN);
 800253c:	f107 0008 	add.w	r0, r7, #8
 8002540:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002544:	9302      	str	r3, [sp, #8]
 8002546:	2304      	movs	r3, #4
 8002548:	9301      	str	r3, [sp, #4]
 800254a:	2310      	movs	r3, #16
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	2310      	movs	r3, #16
 8002550:	2216      	movs	r2, #22
 8002552:	2141      	movs	r1, #65	; 0x41
 8002554:	f001 f8c9 	bl	80036ea <HTFT_u8DrawFrameu16>
		HTFT_u8DrawFrameu16(Local_pu16BattaryLimit, 65 , 34  , 16, 16, 4, TFT_GREEN);
 8002558:	f107 0008 	add.w	r0, r7, #8
 800255c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002560:	9302      	str	r3, [sp, #8]
 8002562:	2304      	movs	r3, #4
 8002564:	9301      	str	r3, [sp, #4]
 8002566:	2310      	movs	r3, #16
 8002568:	9300      	str	r3, [sp, #0]
 800256a:	2310      	movs	r3, #16
 800256c:	2222      	movs	r2, #34	; 0x22
 800256e:	2141      	movs	r1, #65	; 0x41
 8002570:	f001 f8bb 	bl	80036ea <HTFT_u8DrawFrameu16>
		HTFT_u8DrawFrameu16(Local_pu16BattaryLimit, 65 , 46  , 16, 16, 4, TFT_RED);
 8002574:	f107 0008 	add.w	r0, r7, #8
 8002578:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800257c:	9302      	str	r3, [sp, #8]
 800257e:	2304      	movs	r3, #4
 8002580:	9301      	str	r3, [sp, #4]
 8002582:	2310      	movs	r3, #16
 8002584:	9300      	str	r3, [sp, #0]
 8002586:	2310      	movs	r3, #16
 8002588:	222e      	movs	r2, #46	; 0x2e
 800258a:	2141      	movs	r1, #65	; 0x41
 800258c:	f001 f8ad 	bl	80036ea <HTFT_u8DrawFrameu16>
}
 8002590:	e073      	b.n	800267a <SGUI_voidUpdateBattaryVolt+0x202>
	else if ( Copy_u8BattaryVolt >= 3 )
 8002592:	79fb      	ldrb	r3, [r7, #7]
 8002594:	2b02      	cmp	r3, #2
 8002596:	d938      	bls.n	800260a <SGUI_voidUpdateBattaryVolt+0x192>
		HTFT_u8DrawFrameu16(Local_pu16BattaryLimit, 65 , 10  , 16, 16, 4, TFT_GREEN);
 8002598:	f107 0008 	add.w	r0, r7, #8
 800259c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025a0:	9302      	str	r3, [sp, #8]
 80025a2:	2304      	movs	r3, #4
 80025a4:	9301      	str	r3, [sp, #4]
 80025a6:	2310      	movs	r3, #16
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	2310      	movs	r3, #16
 80025ac:	220a      	movs	r2, #10
 80025ae:	2141      	movs	r1, #65	; 0x41
 80025b0:	f001 f89b 	bl	80036ea <HTFT_u8DrawFrameu16>
		HTFT_u8DrawFrameu16(Local_pu16BattaryLimit, 65 , 22  , 16, 16, 4, TFT_GREEN);
 80025b4:	f107 0008 	add.w	r0, r7, #8
 80025b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025bc:	9302      	str	r3, [sp, #8]
 80025be:	2304      	movs	r3, #4
 80025c0:	9301      	str	r3, [sp, #4]
 80025c2:	2310      	movs	r3, #16
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	2310      	movs	r3, #16
 80025c8:	2216      	movs	r2, #22
 80025ca:	2141      	movs	r1, #65	; 0x41
 80025cc:	f001 f88d 	bl	80036ea <HTFT_u8DrawFrameu16>
		HTFT_u8DrawFrameu16(Local_pu16BattaryLimit, 65 , 34  , 16, 16, 4, TFT_RED);
 80025d0:	f107 0008 	add.w	r0, r7, #8
 80025d4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80025d8:	9302      	str	r3, [sp, #8]
 80025da:	2304      	movs	r3, #4
 80025dc:	9301      	str	r3, [sp, #4]
 80025de:	2310      	movs	r3, #16
 80025e0:	9300      	str	r3, [sp, #0]
 80025e2:	2310      	movs	r3, #16
 80025e4:	2222      	movs	r2, #34	; 0x22
 80025e6:	2141      	movs	r1, #65	; 0x41
 80025e8:	f001 f87f 	bl	80036ea <HTFT_u8DrawFrameu16>
		HTFT_u8DrawFrameu16(Local_pu16BattaryLimit, 65 , 46  , 16, 16, 4, TFT_RED);
 80025ec:	f107 0008 	add.w	r0, r7, #8
 80025f0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80025f4:	9302      	str	r3, [sp, #8]
 80025f6:	2304      	movs	r3, #4
 80025f8:	9301      	str	r3, [sp, #4]
 80025fa:	2310      	movs	r3, #16
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	2310      	movs	r3, #16
 8002600:	222e      	movs	r2, #46	; 0x2e
 8002602:	2141      	movs	r1, #65	; 0x41
 8002604:	f001 f871 	bl	80036ea <HTFT_u8DrawFrameu16>
}
 8002608:	e037      	b.n	800267a <SGUI_voidUpdateBattaryVolt+0x202>
		HTFT_u8DrawFrameu16(Local_pu16BattaryLimit, 65 , 10  , 16, 16, 4, TFT_GREEN);
 800260a:	f107 0008 	add.w	r0, r7, #8
 800260e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002612:	9302      	str	r3, [sp, #8]
 8002614:	2304      	movs	r3, #4
 8002616:	9301      	str	r3, [sp, #4]
 8002618:	2310      	movs	r3, #16
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	2310      	movs	r3, #16
 800261e:	220a      	movs	r2, #10
 8002620:	2141      	movs	r1, #65	; 0x41
 8002622:	f001 f862 	bl	80036ea <HTFT_u8DrawFrameu16>
		HTFT_u8DrawFrameu16(Local_pu16BattaryLimit, 65 , 22  , 16, 16, 4, TFT_RED);
 8002626:	f107 0008 	add.w	r0, r7, #8
 800262a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800262e:	9302      	str	r3, [sp, #8]
 8002630:	2304      	movs	r3, #4
 8002632:	9301      	str	r3, [sp, #4]
 8002634:	2310      	movs	r3, #16
 8002636:	9300      	str	r3, [sp, #0]
 8002638:	2310      	movs	r3, #16
 800263a:	2216      	movs	r2, #22
 800263c:	2141      	movs	r1, #65	; 0x41
 800263e:	f001 f854 	bl	80036ea <HTFT_u8DrawFrameu16>
		HTFT_u8DrawFrameu16(Local_pu16BattaryLimit, 65 , 34  , 16, 16, 4, TFT_RED);
 8002642:	f107 0008 	add.w	r0, r7, #8
 8002646:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800264a:	9302      	str	r3, [sp, #8]
 800264c:	2304      	movs	r3, #4
 800264e:	9301      	str	r3, [sp, #4]
 8002650:	2310      	movs	r3, #16
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	2310      	movs	r3, #16
 8002656:	2222      	movs	r2, #34	; 0x22
 8002658:	2141      	movs	r1, #65	; 0x41
 800265a:	f001 f846 	bl	80036ea <HTFT_u8DrawFrameu16>
		HTFT_u8DrawFrameu16(Local_pu16BattaryLimit, 65 , 46  , 16, 16, 4, TFT_RED);
 800265e:	f107 0008 	add.w	r0, r7, #8
 8002662:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002666:	9302      	str	r3, [sp, #8]
 8002668:	2304      	movs	r3, #4
 800266a:	9301      	str	r3, [sp, #4]
 800266c:	2310      	movs	r3, #16
 800266e:	9300      	str	r3, [sp, #0]
 8002670:	2310      	movs	r3, #16
 8002672:	222e      	movs	r2, #46	; 0x2e
 8002674:	2141      	movs	r1, #65	; 0x41
 8002676:	f001 f838 	bl	80036ea <HTFT_u8DrawFrameu16>
}
 800267a:	bf00      	nop
 800267c:	3728      	adds	r7, #40	; 0x28
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
	...

08002684 <SGUI_voidV2IStopSign>:
/*************************************************************************************************************************************/
/********************************************************************** V2I **********************************************************/
/*************************************************************************************************************************************/

void SGUI_voidV2IStopSign (void)
{
 8002684:	b5b0      	push	{r4, r5, r7, lr}
 8002686:	b08c      	sub	sp, #48	; 0x30
 8002688:	af04      	add	r7, sp, #16
	uint16_t Local_pu16StopStopsign[16]={4080, 4104, 8324, 24194, 37617, 37521, 40689, 32769, 40481, 33313, 40481, 36897, 24314, 8196, 4104, 4080};
 800268a:	4b0f      	ldr	r3, [pc, #60]	; (80026c8 <SGUI_voidV2IStopSign+0x44>)
 800268c:	463c      	mov	r4, r7
 800268e:	461d      	mov	r5, r3
 8002690:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002692:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002694:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002698:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HTFT_u8FillColor                                                  ( GUI_V2I_STOP_SIGN_BACKGROUND );
 800269c:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80026a0:	f000 fed2 	bl	8003448 <HTFT_u8FillColor>
	HTFT_u8DrawFrameu16(Local_pu16StopStopsign, 10, 40, 16, 16, 6     , GUI_V2I_STOP_SIGN_FRAME      );
 80026a4:	4638      	mov	r0, r7
 80026a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026aa:	9302      	str	r3, [sp, #8]
 80026ac:	2306      	movs	r3, #6
 80026ae:	9301      	str	r3, [sp, #4]
 80026b0:	2310      	movs	r3, #16
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	2310      	movs	r3, #16
 80026b6:	2228      	movs	r2, #40	; 0x28
 80026b8:	210a      	movs	r1, #10
 80026ba:	f001 f816 	bl	80036ea <HTFT_u8DrawFrameu16>
}
 80026be:	bf00      	nop
 80026c0:	3720      	adds	r7, #32
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bdb0      	pop	{r4, r5, r7, pc}
 80026c6:	bf00      	nop
 80026c8:	08005038 	.word	0x08005038

080026cc <SGUI_voidV2ISpeedSign>:
void SGUI_voidV2ISpeedSign(uint8_t Copy_u8SpeedSignID)
{
 80026cc:	b5b0      	push	{r4, r5, r7, lr}
 80026ce:	b096      	sub	sp, #88	; 0x58
 80026d0:	af04      	add	r7, sp, #16
 80026d2:	4603      	mov	r3, r0
 80026d4:	71fb      	strb	r3, [r7, #7]
	uint16_t Local_pu16SpeedLimit25[16]={65532, 32772, 48884, 40980, 48660, 33524, 33412, 48884, 32772, 32772, 32772, 32772, 32772, 32772, 32772, 65532};
 80026d6:	4b28      	ldr	r3, [pc, #160]	; (8002778 <SGUI_voidV2ISpeedSign+0xac>)
 80026d8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80026dc:	461d      	mov	r5, r3
 80026de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026e2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80026e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint16_t Local_pu16SpeedLimit50[16]={65532, 32772, 48884, 33428, 48788, 41108, 41108, 48884, 32772, 32772, 32772, 32772, 32772, 32772, 32772, 65532};
 80026ea:	4b24      	ldr	r3, [pc, #144]	; (800277c <SGUI_voidV2ISpeedSign+0xb0>)
 80026ec:	f107 0408 	add.w	r4, r7, #8
 80026f0:	461d      	mov	r5, r3
 80026f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026f6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80026fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HTFT_u8FillColor                                                  ( GUI_V2I_SPEED_SIGN_BACKGROUND );
 80026fe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002702:	f000 fea1 	bl	8003448 <HTFT_u8FillColor>
	HTFT_u8DrawText((uint8_t *)"SPEED", 95 , 100, 2                   , GUI_V2I_SPEED_SIGN_FRAME      );
 8002706:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	2302      	movs	r3, #2
 800270e:	2264      	movs	r2, #100	; 0x64
 8002710:	215f      	movs	r1, #95	; 0x5f
 8002712:	481b      	ldr	r0, [pc, #108]	; (8002780 <SGUI_voidV2ISpeedSign+0xb4>)
 8002714:	f000 ffb2 	bl	800367c <HTFT_u8DrawText>
	HTFT_u8DrawText((uint8_t *)"LIMIT", 95 , 85 , 2                   , GUI_V2I_SPEED_SIGN_FRAME      );
 8002718:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	2302      	movs	r3, #2
 8002720:	2255      	movs	r2, #85	; 0x55
 8002722:	215f      	movs	r1, #95	; 0x5f
 8002724:	4817      	ldr	r0, [pc, #92]	; (8002784 <SGUI_voidV2ISpeedSign+0xb8>)
 8002726:	f000 ffa9 	bl	800367c <HTFT_u8DrawText>
	if ( Copy_u8SpeedSignID == GUI_ID_SPEED_25 )
 800272a:	79fb      	ldrb	r3, [r7, #7]
 800272c:	2bb2      	cmp	r3, #178	; 0xb2
 800272e:	d10e      	bne.n	800274e <SGUI_voidV2ISpeedSign+0x82>
	{
		HTFT_u8DrawFrameu16(Local_pu16SpeedLimit25, 10, 30, 16, 16, 6 , GUI_V2I_SPEED_SIGN_FRAME      );
 8002730:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002734:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002738:	9302      	str	r3, [sp, #8]
 800273a:	2306      	movs	r3, #6
 800273c:	9301      	str	r3, [sp, #4]
 800273e:	2310      	movs	r3, #16
 8002740:	9300      	str	r3, [sp, #0]
 8002742:	2310      	movs	r3, #16
 8002744:	221e      	movs	r2, #30
 8002746:	210a      	movs	r1, #10
 8002748:	f000 ffcf 	bl	80036ea <HTFT_u8DrawFrameu16>
	}
	else if ( Copy_u8SpeedSignID == GUI_ID_SPEED_50 )
	{
		HTFT_u8DrawFrameu16(Local_pu16SpeedLimit50, 10, 30, 16, 16, 6 , GUI_V2I_SPEED_SIGN_FRAME      );
	}
}
 800274c:	e010      	b.n	8002770 <SGUI_voidV2ISpeedSign+0xa4>
	else if ( Copy_u8SpeedSignID == GUI_ID_SPEED_50 )
 800274e:	79fb      	ldrb	r3, [r7, #7]
 8002750:	2bb1      	cmp	r3, #177	; 0xb1
 8002752:	d10d      	bne.n	8002770 <SGUI_voidV2ISpeedSign+0xa4>
		HTFT_u8DrawFrameu16(Local_pu16SpeedLimit50, 10, 30, 16, 16, 6 , GUI_V2I_SPEED_SIGN_FRAME      );
 8002754:	f107 0008 	add.w	r0, r7, #8
 8002758:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800275c:	9302      	str	r3, [sp, #8]
 800275e:	2306      	movs	r3, #6
 8002760:	9301      	str	r3, [sp, #4]
 8002762:	2310      	movs	r3, #16
 8002764:	9300      	str	r3, [sp, #0]
 8002766:	2310      	movs	r3, #16
 8002768:	221e      	movs	r2, #30
 800276a:	210a      	movs	r1, #10
 800276c:	f000 ffbd 	bl	80036ea <HTFT_u8DrawFrameu16>
}
 8002770:	bf00      	nop
 8002772:	3748      	adds	r7, #72	; 0x48
 8002774:	46bd      	mov	sp, r7
 8002776:	bdb0      	pop	{r4, r5, r7, pc}
 8002778:	08005060 	.word	0x08005060
 800277c:	08005080 	.word	0x08005080
 8002780:	08004f70 	.word	0x08004f70
 8002784:	08005058 	.word	0x08005058

08002788 <SGUI_voidV2ITrafficSign>:
void SGUI_voidV2ITrafficSign(uint8_t Copy_u8TrafficSignID , uint8_t Copy_u8FirstFlag )
{
 8002788:	b5b0      	push	{r4, r5, r7, lr}
 800278a:	b096      	sub	sp, #88	; 0x58
 800278c:	af04      	add	r7, sp, #16
 800278e:	4603      	mov	r3, r0
 8002790:	460a      	mov	r2, r1
 8002792:	71fb      	strb	r3, [r7, #7]
 8002794:	4613      	mov	r3, r2
 8002796:	71bb      	strb	r3, [r7, #6]
	uint16_t Local_pu16Circle[16]={8184, 16380, 32766, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 32766, 16380, 8184};
 8002798:	4b5a      	ldr	r3, [pc, #360]	; (8002904 <SGUI_voidV2ITrafficSign+0x17c>)
 800279a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800279e:	461d      	mov	r5, r3
 80027a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027a4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80027a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint16_t Local_pu16Traffic[16]={384, 576, 1056, 3024, 5064, 9156, 17346, 33729, 33729, 17346, 9156, 5064, 3024, 1056, 576, 384};
 80027ac:	4b56      	ldr	r3, [pc, #344]	; (8002908 <SGUI_voidV2ITrafficSign+0x180>)
 80027ae:	f107 0408 	add.w	r4, r7, #8
 80027b2:	461d      	mov	r5, r3
 80027b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027b8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80027bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if ( Copy_u8FirstFlag == 1 )
 80027c0:	79bb      	ldrb	r3, [r7, #6]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d110      	bne.n	80027e8 <SGUI_voidV2ITrafficSign+0x60>
	{
		HTFT_u8FillColor                                              ( GUI_V2I_TRAFFIC_SIGN_BACKGROUND );
 80027c6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80027ca:	f000 fe3d 	bl	8003448 <HTFT_u8FillColor>
		HTFT_u8DrawFrameu16(Local_pu16Traffic, 15, 35, 16, 16, 6      , GUI_V2I_TRAFFIC_SIGN_FRAME      );
 80027ce:	f107 0008 	add.w	r0, r7, #8
 80027d2:	2300      	movs	r3, #0
 80027d4:	9302      	str	r3, [sp, #8]
 80027d6:	2306      	movs	r3, #6
 80027d8:	9301      	str	r3, [sp, #4]
 80027da:	2310      	movs	r3, #16
 80027dc:	9300      	str	r3, [sp, #0]
 80027de:	2310      	movs	r3, #16
 80027e0:	2223      	movs	r2, #35	; 0x23
 80027e2:	210f      	movs	r1, #15
 80027e4:	f000 ff81 	bl	80036ea <HTFT_u8DrawFrameu16>
	}
	if ( Copy_u8TrafficSignID == GUI_ID_TRAFFIC_RED )
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	2bb4      	cmp	r3, #180	; 0xb4
 80027ec:	d12a      	bne.n	8002844 <SGUI_voidV2ITrafficSign+0xbc>
	{
		HTFT_u8DrawFrameu16(Local_pu16Circle, 55, 95, 16, 16, 1, TFT_Bright_RED);
 80027ee:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80027f2:	f64f 0340 	movw	r3, #63552	; 0xf840
 80027f6:	9302      	str	r3, [sp, #8]
 80027f8:	2301      	movs	r3, #1
 80027fa:	9301      	str	r3, [sp, #4]
 80027fc:	2310      	movs	r3, #16
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	2310      	movs	r3, #16
 8002802:	225f      	movs	r2, #95	; 0x5f
 8002804:	2137      	movs	r1, #55	; 0x37
 8002806:	f000 ff70 	bl	80036ea <HTFT_u8DrawFrameu16>
		HTFT_u8DrawFrameu16(Local_pu16Circle, 55, 75, 16, 16, 1, TFT_DARK_YELLOW);
 800280a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800280e:	f64f 5368 	movw	r3, #64872	; 0xfd68
 8002812:	9302      	str	r3, [sp, #8]
 8002814:	2301      	movs	r3, #1
 8002816:	9301      	str	r3, [sp, #4]
 8002818:	2310      	movs	r3, #16
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	2310      	movs	r3, #16
 800281e:	224b      	movs	r2, #75	; 0x4b
 8002820:	2137      	movs	r1, #55	; 0x37
 8002822:	f000 ff62 	bl	80036ea <HTFT_u8DrawFrameu16>
		HTFT_u8DrawFrameu16(Local_pu16Circle, 55, 55, 16, 16, 1, TFT_DARK_GREEN);
 8002826:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800282a:	f240 438a 	movw	r3, #1162	; 0x48a
 800282e:	9302      	str	r3, [sp, #8]
 8002830:	2301      	movs	r3, #1
 8002832:	9301      	str	r3, [sp, #4]
 8002834:	2310      	movs	r3, #16
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	2310      	movs	r3, #16
 800283a:	2237      	movs	r2, #55	; 0x37
 800283c:	2137      	movs	r1, #55	; 0x37
 800283e:	f000 ff54 	bl	80036ea <HTFT_u8DrawFrameu16>
	{
		HTFT_u8DrawFrameu16(Local_pu16Circle, 55, 95, 16, 16, 1, TFT_DARK_RED);
		HTFT_u8DrawFrameu16(Local_pu16Circle, 55, 75, 16, 16, 1, TFT_DARK_YELLOW);
		HTFT_u8DrawFrameu16(Local_pu16Circle, 55, 55, 16, 16, 1, TFT_Bright_GREEN);
	}
}
 8002842:	e05a      	b.n	80028fa <SGUI_voidV2ITrafficSign+0x172>
	else if ( Copy_u8TrafficSignID == GUI_ID_TRAFFIC_YELLOW )
 8002844:	79fb      	ldrb	r3, [r7, #7]
 8002846:	2bb5      	cmp	r3, #181	; 0xb5
 8002848:	d12a      	bne.n	80028a0 <SGUI_voidV2ITrafficSign+0x118>
		HTFT_u8DrawFrameu16(Local_pu16Circle, 55, 95, 16, 16, 1, TFT_DARK_RED);
 800284a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800284e:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 8002852:	9302      	str	r3, [sp, #8]
 8002854:	2301      	movs	r3, #1
 8002856:	9301      	str	r3, [sp, #4]
 8002858:	2310      	movs	r3, #16
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	2310      	movs	r3, #16
 800285e:	225f      	movs	r2, #95	; 0x5f
 8002860:	2137      	movs	r1, #55	; 0x37
 8002862:	f000 ff42 	bl	80036ea <HTFT_u8DrawFrameu16>
		HTFT_u8DrawFrameu16(Local_pu16Circle, 55, 75, 16, 16, 1, TFT_Bright_YELLOW );
 8002866:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800286a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800286e:	9302      	str	r3, [sp, #8]
 8002870:	2301      	movs	r3, #1
 8002872:	9301      	str	r3, [sp, #4]
 8002874:	2310      	movs	r3, #16
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	2310      	movs	r3, #16
 800287a:	224b      	movs	r2, #75	; 0x4b
 800287c:	2137      	movs	r1, #55	; 0x37
 800287e:	f000 ff34 	bl	80036ea <HTFT_u8DrawFrameu16>
		HTFT_u8DrawFrameu16(Local_pu16Circle, 55, 55, 16, 16, 1, TFT_DARK_GREEN);
 8002882:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002886:	f240 438a 	movw	r3, #1162	; 0x48a
 800288a:	9302      	str	r3, [sp, #8]
 800288c:	2301      	movs	r3, #1
 800288e:	9301      	str	r3, [sp, #4]
 8002890:	2310      	movs	r3, #16
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	2310      	movs	r3, #16
 8002896:	2237      	movs	r2, #55	; 0x37
 8002898:	2137      	movs	r1, #55	; 0x37
 800289a:	f000 ff26 	bl	80036ea <HTFT_u8DrawFrameu16>
}
 800289e:	e02c      	b.n	80028fa <SGUI_voidV2ITrafficSign+0x172>
	else if ( Copy_u8TrafficSignID == GUI_ID_TRAFFIC_GREAN )
 80028a0:	79fb      	ldrb	r3, [r7, #7]
 80028a2:	2bb6      	cmp	r3, #182	; 0xb6
 80028a4:	d129      	bne.n	80028fa <SGUI_voidV2ITrafficSign+0x172>
		HTFT_u8DrawFrameu16(Local_pu16Circle, 55, 95, 16, 16, 1, TFT_DARK_RED);
 80028a6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80028aa:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 80028ae:	9302      	str	r3, [sp, #8]
 80028b0:	2301      	movs	r3, #1
 80028b2:	9301      	str	r3, [sp, #4]
 80028b4:	2310      	movs	r3, #16
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	2310      	movs	r3, #16
 80028ba:	225f      	movs	r2, #95	; 0x5f
 80028bc:	2137      	movs	r1, #55	; 0x37
 80028be:	f000 ff14 	bl	80036ea <HTFT_u8DrawFrameu16>
		HTFT_u8DrawFrameu16(Local_pu16Circle, 55, 75, 16, 16, 1, TFT_DARK_YELLOW);
 80028c2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80028c6:	f64f 5368 	movw	r3, #64872	; 0xfd68
 80028ca:	9302      	str	r3, [sp, #8]
 80028cc:	2301      	movs	r3, #1
 80028ce:	9301      	str	r3, [sp, #4]
 80028d0:	2310      	movs	r3, #16
 80028d2:	9300      	str	r3, [sp, #0]
 80028d4:	2310      	movs	r3, #16
 80028d6:	224b      	movs	r2, #75	; 0x4b
 80028d8:	2137      	movs	r1, #55	; 0x37
 80028da:	f000 ff06 	bl	80036ea <HTFT_u8DrawFrameu16>
		HTFT_u8DrawFrameu16(Local_pu16Circle, 55, 55, 16, 16, 1, TFT_Bright_GREEN);
 80028de:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80028e2:	f246 73ec 	movw	r3, #26604	; 0x67ec
 80028e6:	9302      	str	r3, [sp, #8]
 80028e8:	2301      	movs	r3, #1
 80028ea:	9301      	str	r3, [sp, #4]
 80028ec:	2310      	movs	r3, #16
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	2310      	movs	r3, #16
 80028f2:	2237      	movs	r2, #55	; 0x37
 80028f4:	2137      	movs	r1, #55	; 0x37
 80028f6:	f000 fef8 	bl	80036ea <HTFT_u8DrawFrameu16>
}
 80028fa:	bf00      	nop
 80028fc:	3748      	adds	r7, #72	; 0x48
 80028fe:	46bd      	mov	sp, r7
 8002900:	bdb0      	pop	{r4, r5, r7, pc}
 8002902:	bf00      	nop
 8002904:	080050a0 	.word	0x080050a0
 8002908:	080050c0 	.word	0x080050c0

0800290c <SGUI_voidV2PPedestrian>:
/*************************************************************************************************************************************/
/*********************************************************************************** V2P *********************************************/
/*************************************************************************************************************************************/
void SGUI_voidV2PPedestrian (void)
{
 800290c:	b5b0      	push	{r4, r5, r7, lr}
 800290e:	b08c      	sub	sp, #48	; 0x30
 8002910:	af04      	add	r7, sp, #16
	uint16_t Local_pu16Pedestrian[16]={4112, 2080, 1088, 896, 256, 256, 256, 896, 1344, 2336, 5008, 1088, 1088, 1088, 896, 0};
 8002912:	4b13      	ldr	r3, [pc, #76]	; (8002960 <SGUI_voidV2PPedestrian+0x54>)
 8002914:	463c      	mov	r4, r7
 8002916:	461d      	mov	r5, r3
 8002918:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800291a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800291c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002920:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HTFT_u8FillColor                                                  ( GUI_V2P_BACKGROUND );
 8002924:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002928:	f000 fd8e 	bl	8003448 <HTFT_u8FillColor>
	HTFT_u8DrawFrameu16(Local_pu16Pedestrian, 5, 50, 16, 16, 7        , GUI_V2P_FRAME );
 800292c:	4638      	mov	r0, r7
 800292e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002932:	9302      	str	r3, [sp, #8]
 8002934:	2307      	movs	r3, #7
 8002936:	9301      	str	r3, [sp, #4]
 8002938:	2310      	movs	r3, #16
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	2310      	movs	r3, #16
 800293e:	2232      	movs	r2, #50	; 0x32
 8002940:	2105      	movs	r1, #5
 8002942:	f000 fed2 	bl	80036ea <HTFT_u8DrawFrameu16>
	HTFT_u8DrawText((uint8_t *)"STOP", 100 , 20 , 3                   , GUI_V2P_FRAME );
 8002946:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	2303      	movs	r3, #3
 800294e:	2214      	movs	r2, #20
 8002950:	2164      	movs	r1, #100	; 0x64
 8002952:	4804      	ldr	r0, [pc, #16]	; (8002964 <SGUI_voidV2PPedestrian+0x58>)
 8002954:	f000 fe92 	bl	800367c <HTFT_u8DrawText>

}
 8002958:	bf00      	nop
 800295a:	3720      	adds	r7, #32
 800295c:	46bd      	mov	sp, r7
 800295e:	bdb0      	pop	{r4, r5, r7, pc}
 8002960:	080050e8 	.word	0x080050e8
 8002964:	080050e0 	.word	0x080050e0

08002968 <SGUI_voidV2GBattaryLimit>:
/*************************************************************************************************************************************/
/*********************************************************************************** V2G *********************************************/
/*************************************************************************************************************************************/

void SGUI_voidV2GBattaryLimit(uint8_t Copy_u8BattaryVolt , uint8_t Copy_u8FirstFlag )
{
 8002968:	b5b0      	push	{r4, r5, r7, lr}
 800296a:	b096      	sub	sp, #88	; 0x58
 800296c:	af04      	add	r7, sp, #16
 800296e:	4603      	mov	r3, r0
 8002970:	460a      	mov	r2, r1
 8002972:	71fb      	strb	r3, [r7, #7]
 8002974:	4613      	mov	r3, r2
 8002976:	71bb      	strb	r3, [r7, #6]
	uint16_t Local_pu16BattaryFrame[16]= {0, 16380, 8196, 8196, 8196, 8196, 8196, 8196, 8196, 8196, 8196, 8196, 8196, 8196, 15996, 576};
 8002978:	4b93      	ldr	r3, [pc, #588]	; (8002bc8 <SGUI_voidV2GBattaryLimit+0x260>)
 800297a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800297e:	461d      	mov	r5, r3
 8002980:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002982:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002984:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002988:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint16_t Local_pu16BattaryLimit[16]= {0, 0, 8184, 8184, 8184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 800298c:	f107 0308 	add.w	r3, r7, #8
 8002990:	2220      	movs	r2, #32
 8002992:	2100      	movs	r1, #0
 8002994:	4618      	mov	r0, r3
 8002996:	f002 fad7 	bl	8004f48 <memset>
 800299a:	f641 73f8 	movw	r3, #8184	; 0x1ff8
 800299e:	81bb      	strh	r3, [r7, #12]
 80029a0:	f641 73f8 	movw	r3, #8184	; 0x1ff8
 80029a4:	81fb      	strh	r3, [r7, #14]
 80029a6:	f641 73f8 	movw	r3, #8184	; 0x1ff8
 80029aa:	823b      	strh	r3, [r7, #16]
	if ( Copy_u8FirstFlag == 1 )
 80029ac:	79bb      	ldrb	r3, [r7, #6]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d119      	bne.n	80029e6 <SGUI_voidV2GBattaryLimit+0x7e>
	{
		HTFT_u8FillColor                                               ( GUI_V2G_BACKGROUND );
 80029b2:	201f      	movs	r0, #31
 80029b4:	f000 fd48 	bl	8003448 <HTFT_u8FillColor>
		HTFT_u8DrawText((uint8_t *)"V2G", 90 , 5 , 3                   , GUI_V2G_FRAME  );
 80029b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029bc:	9300      	str	r3, [sp, #0]
 80029be:	2303      	movs	r3, #3
 80029c0:	2205      	movs	r2, #5
 80029c2:	215a      	movs	r1, #90	; 0x5a
 80029c4:	4881      	ldr	r0, [pc, #516]	; (8002bcc <SGUI_voidV2GBattaryLimit+0x264>)
 80029c6:	f000 fe59 	bl	800367c <HTFT_u8DrawText>
		HTFT_u8DrawFrameu16(Local_pu16BattaryFrame, 1 , 25 , 16, 16, 8 , GUI_V2G_FRAME  );
 80029ca:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80029ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029d2:	9302      	str	r3, [sp, #8]
 80029d4:	2308      	movs	r3, #8
 80029d6:	9301      	str	r3, [sp, #4]
 80029d8:	2310      	movs	r3, #16
 80029da:	9300      	str	r3, [sp, #0]
 80029dc:	2310      	movs	r3, #16
 80029de:	2219      	movs	r2, #25
 80029e0:	2101      	movs	r1, #1
 80029e2:	f000 fe82 	bl	80036ea <HTFT_u8DrawFrameu16>
	}
	if ( Copy_u8BattaryVolt >= 9 )
 80029e6:	79fb      	ldrb	r3, [r7, #7]
 80029e8:	2b08      	cmp	r3, #8
 80029ea:	d938      	bls.n	8002a5e <SGUI_voidV2GBattaryLimit+0xf6>
	{
		HTFT_u8DrawFrameu16(Local_pu16BattaryLimit, 1 , 25  , 16, 16, 8, TFT_GREEN);
 80029ec:	f107 0008 	add.w	r0, r7, #8
 80029f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029f4:	9302      	str	r3, [sp, #8]
 80029f6:	2308      	movs	r3, #8
 80029f8:	9301      	str	r3, [sp, #4]
 80029fa:	2310      	movs	r3, #16
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	2310      	movs	r3, #16
 8002a00:	2219      	movs	r2, #25
 8002a02:	2101      	movs	r1, #1
 8002a04:	f000 fe71 	bl	80036ea <HTFT_u8DrawFrameu16>
		HTFT_u8DrawFrameu16(Local_pu16BattaryLimit, 1 , 50  , 16, 16, 8, TFT_GREEN);
 8002a08:	f107 0008 	add.w	r0, r7, #8
 8002a0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a10:	9302      	str	r3, [sp, #8]
 8002a12:	2308      	movs	r3, #8
 8002a14:	9301      	str	r3, [sp, #4]
 8002a16:	2310      	movs	r3, #16
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	2310      	movs	r3, #16
 8002a1c:	2232      	movs	r2, #50	; 0x32
 8002a1e:	2101      	movs	r1, #1
 8002a20:	f000 fe63 	bl	80036ea <HTFT_u8DrawFrameu16>
		HTFT_u8DrawFrameu16(Local_pu16BattaryLimit, 1 , 75  , 16, 16, 8, TFT_GREEN);
 8002a24:	f107 0008 	add.w	r0, r7, #8
 8002a28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a2c:	9302      	str	r3, [sp, #8]
 8002a2e:	2308      	movs	r3, #8
 8002a30:	9301      	str	r3, [sp, #4]
 8002a32:	2310      	movs	r3, #16
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	2310      	movs	r3, #16
 8002a38:	224b      	movs	r2, #75	; 0x4b
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	f000 fe55 	bl	80036ea <HTFT_u8DrawFrameu16>
		HTFT_u8DrawFrameu16(Local_pu16BattaryLimit, 1 , 100 , 16, 16, 8, TFT_GREEN);
 8002a40:	f107 0008 	add.w	r0, r7, #8
 8002a44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a48:	9302      	str	r3, [sp, #8]
 8002a4a:	2308      	movs	r3, #8
 8002a4c:	9301      	str	r3, [sp, #4]
 8002a4e:	2310      	movs	r3, #16
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	2310      	movs	r3, #16
 8002a54:	2264      	movs	r2, #100	; 0x64
 8002a56:	2101      	movs	r1, #1
 8002a58:	f000 fe47 	bl	80036ea <HTFT_u8DrawFrameu16>
		HTFT_u8DrawFrameu16(Local_pu16BattaryLimit, 1 , 50  , 16, 16, 8, TFT_RED);
		HTFT_u8DrawFrameu16(Local_pu16BattaryLimit, 1 , 75  , 16, 16, 8, TFT_RED);
		HTFT_u8DrawFrameu16(Local_pu16BattaryLimit, 1 , 100 , 16, 16, 8, TFT_RED);
	}

}
 8002a5c:	e0af      	b.n	8002bbe <SGUI_voidV2GBattaryLimit+0x256>
	else if ( Copy_u8BattaryVolt >= 6 )
 8002a5e:	79fb      	ldrb	r3, [r7, #7]
 8002a60:	2b05      	cmp	r3, #5
 8002a62:	d938      	bls.n	8002ad6 <SGUI_voidV2GBattaryLimit+0x16e>
		HTFT_u8DrawFrameu16(Local_pu16BattaryLimit, 1 , 25  , 16, 16, 8, TFT_GREEN);
 8002a64:	f107 0008 	add.w	r0, r7, #8
 8002a68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a6c:	9302      	str	r3, [sp, #8]
 8002a6e:	2308      	movs	r3, #8
 8002a70:	9301      	str	r3, [sp, #4]
 8002a72:	2310      	movs	r3, #16
 8002a74:	9300      	str	r3, [sp, #0]
 8002a76:	2310      	movs	r3, #16
 8002a78:	2219      	movs	r2, #25
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	f000 fe35 	bl	80036ea <HTFT_u8DrawFrameu16>
		HTFT_u8DrawFrameu16(Local_pu16BattaryLimit, 1 , 50  , 16, 16, 8, TFT_GREEN);
 8002a80:	f107 0008 	add.w	r0, r7, #8
 8002a84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a88:	9302      	str	r3, [sp, #8]
 8002a8a:	2308      	movs	r3, #8
 8002a8c:	9301      	str	r3, [sp, #4]
 8002a8e:	2310      	movs	r3, #16
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	2310      	movs	r3, #16
 8002a94:	2232      	movs	r2, #50	; 0x32
 8002a96:	2101      	movs	r1, #1
 8002a98:	f000 fe27 	bl	80036ea <HTFT_u8DrawFrameu16>
		HTFT_u8DrawFrameu16(Local_pu16BattaryLimit, 1 , 75  , 16, 16, 8, TFT_GREEN);
 8002a9c:	f107 0008 	add.w	r0, r7, #8
 8002aa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002aa4:	9302      	str	r3, [sp, #8]
 8002aa6:	2308      	movs	r3, #8
 8002aa8:	9301      	str	r3, [sp, #4]
 8002aaa:	2310      	movs	r3, #16
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	2310      	movs	r3, #16
 8002ab0:	224b      	movs	r2, #75	; 0x4b
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	f000 fe19 	bl	80036ea <HTFT_u8DrawFrameu16>
		HTFT_u8DrawFrameu16(Local_pu16BattaryLimit, 1 , 100 , 16, 16, 8, TFT_RED);
 8002ab8:	f107 0008 	add.w	r0, r7, #8
 8002abc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002ac0:	9302      	str	r3, [sp, #8]
 8002ac2:	2308      	movs	r3, #8
 8002ac4:	9301      	str	r3, [sp, #4]
 8002ac6:	2310      	movs	r3, #16
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	2310      	movs	r3, #16
 8002acc:	2264      	movs	r2, #100	; 0x64
 8002ace:	2101      	movs	r1, #1
 8002ad0:	f000 fe0b 	bl	80036ea <HTFT_u8DrawFrameu16>
}
 8002ad4:	e073      	b.n	8002bbe <SGUI_voidV2GBattaryLimit+0x256>
	else if ( Copy_u8BattaryVolt >= 3 )
 8002ad6:	79fb      	ldrb	r3, [r7, #7]
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d938      	bls.n	8002b4e <SGUI_voidV2GBattaryLimit+0x1e6>
		HTFT_u8DrawFrameu16(Local_pu16BattaryLimit, 1 , 25  , 16, 16, 8, TFT_GREEN);
 8002adc:	f107 0008 	add.w	r0, r7, #8
 8002ae0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ae4:	9302      	str	r3, [sp, #8]
 8002ae6:	2308      	movs	r3, #8
 8002ae8:	9301      	str	r3, [sp, #4]
 8002aea:	2310      	movs	r3, #16
 8002aec:	9300      	str	r3, [sp, #0]
 8002aee:	2310      	movs	r3, #16
 8002af0:	2219      	movs	r2, #25
 8002af2:	2101      	movs	r1, #1
 8002af4:	f000 fdf9 	bl	80036ea <HTFT_u8DrawFrameu16>
		HTFT_u8DrawFrameu16(Local_pu16BattaryLimit, 1 , 50  , 16, 16, 8, TFT_GREEN);
 8002af8:	f107 0008 	add.w	r0, r7, #8
 8002afc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b00:	9302      	str	r3, [sp, #8]
 8002b02:	2308      	movs	r3, #8
 8002b04:	9301      	str	r3, [sp, #4]
 8002b06:	2310      	movs	r3, #16
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	2310      	movs	r3, #16
 8002b0c:	2232      	movs	r2, #50	; 0x32
 8002b0e:	2101      	movs	r1, #1
 8002b10:	f000 fdeb 	bl	80036ea <HTFT_u8DrawFrameu16>
		HTFT_u8DrawFrameu16(Local_pu16BattaryLimit, 1 , 75  , 16, 16, 8, TFT_RED);
 8002b14:	f107 0008 	add.w	r0, r7, #8
 8002b18:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002b1c:	9302      	str	r3, [sp, #8]
 8002b1e:	2308      	movs	r3, #8
 8002b20:	9301      	str	r3, [sp, #4]
 8002b22:	2310      	movs	r3, #16
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	2310      	movs	r3, #16
 8002b28:	224b      	movs	r2, #75	; 0x4b
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	f000 fddd 	bl	80036ea <HTFT_u8DrawFrameu16>
		HTFT_u8DrawFrameu16(Local_pu16BattaryLimit, 1 , 100 , 16, 16, 8, TFT_RED);
 8002b30:	f107 0008 	add.w	r0, r7, #8
 8002b34:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002b38:	9302      	str	r3, [sp, #8]
 8002b3a:	2308      	movs	r3, #8
 8002b3c:	9301      	str	r3, [sp, #4]
 8002b3e:	2310      	movs	r3, #16
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	2310      	movs	r3, #16
 8002b44:	2264      	movs	r2, #100	; 0x64
 8002b46:	2101      	movs	r1, #1
 8002b48:	f000 fdcf 	bl	80036ea <HTFT_u8DrawFrameu16>
}
 8002b4c:	e037      	b.n	8002bbe <SGUI_voidV2GBattaryLimit+0x256>
		HTFT_u8DrawFrameu16(Local_pu16BattaryLimit, 1 , 25  , 16, 16, 8, TFT_GREEN);
 8002b4e:	f107 0008 	add.w	r0, r7, #8
 8002b52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b56:	9302      	str	r3, [sp, #8]
 8002b58:	2308      	movs	r3, #8
 8002b5a:	9301      	str	r3, [sp, #4]
 8002b5c:	2310      	movs	r3, #16
 8002b5e:	9300      	str	r3, [sp, #0]
 8002b60:	2310      	movs	r3, #16
 8002b62:	2219      	movs	r2, #25
 8002b64:	2101      	movs	r1, #1
 8002b66:	f000 fdc0 	bl	80036ea <HTFT_u8DrawFrameu16>
		HTFT_u8DrawFrameu16(Local_pu16BattaryLimit, 1 , 50  , 16, 16, 8, TFT_RED);
 8002b6a:	f107 0008 	add.w	r0, r7, #8
 8002b6e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002b72:	9302      	str	r3, [sp, #8]
 8002b74:	2308      	movs	r3, #8
 8002b76:	9301      	str	r3, [sp, #4]
 8002b78:	2310      	movs	r3, #16
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	2310      	movs	r3, #16
 8002b7e:	2232      	movs	r2, #50	; 0x32
 8002b80:	2101      	movs	r1, #1
 8002b82:	f000 fdb2 	bl	80036ea <HTFT_u8DrawFrameu16>
		HTFT_u8DrawFrameu16(Local_pu16BattaryLimit, 1 , 75  , 16, 16, 8, TFT_RED);
 8002b86:	f107 0008 	add.w	r0, r7, #8
 8002b8a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002b8e:	9302      	str	r3, [sp, #8]
 8002b90:	2308      	movs	r3, #8
 8002b92:	9301      	str	r3, [sp, #4]
 8002b94:	2310      	movs	r3, #16
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	2310      	movs	r3, #16
 8002b9a:	224b      	movs	r2, #75	; 0x4b
 8002b9c:	2101      	movs	r1, #1
 8002b9e:	f000 fda4 	bl	80036ea <HTFT_u8DrawFrameu16>
		HTFT_u8DrawFrameu16(Local_pu16BattaryLimit, 1 , 100 , 16, 16, 8, TFT_RED);
 8002ba2:	f107 0008 	add.w	r0, r7, #8
 8002ba6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002baa:	9302      	str	r3, [sp, #8]
 8002bac:	2308      	movs	r3, #8
 8002bae:	9301      	str	r3, [sp, #4]
 8002bb0:	2310      	movs	r3, #16
 8002bb2:	9300      	str	r3, [sp, #0]
 8002bb4:	2310      	movs	r3, #16
 8002bb6:	2264      	movs	r2, #100	; 0x64
 8002bb8:	2101      	movs	r1, #1
 8002bba:	f000 fd96 	bl	80036ea <HTFT_u8DrawFrameu16>
}
 8002bbe:	bf00      	nop
 8002bc0:	3748      	adds	r7, #72	; 0x48
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bdb0      	pop	{r4, r5, r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	08004f98 	.word	0x08004f98
 8002bcc:	08005108 	.word	0x08005108

08002bd0 <SGUI_voidV2GStartEnd>:
void SGUI_voidV2GStartEnd ( GUIV2GStartEnd_t Copy_u8StartEnd )
{
 8002bd0:	b5b0      	push	{r4, r5, r7, lr}
 8002bd2:	b08e      	sub	sp, #56	; 0x38
 8002bd4:	af04      	add	r7, sp, #16
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	71fb      	strb	r3, [r7, #7]
	uint16_t Local_pu16Success[16]={16380, 16386, 32769, 38913, 37889, 37377, 37121, 36993, 36929, 32801, 32785, 32777, 32773, 32769, 16386, 16380};
 8002bda:	4b29      	ldr	r3, [pc, #164]	; (8002c80 <SGUI_voidV2GStartEnd+0xb0>)
 8002bdc:	f107 0408 	add.w	r4, r7, #8
 8002be0:	461d      	mov	r5, r3
 8002be2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002be4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002be6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002bea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HTFT_u8FillColor                                                ( GUI_V2G_BACKGROUND );
 8002bee:	201f      	movs	r0, #31
 8002bf0:	f000 fc2a 	bl	8003448 <HTFT_u8FillColor>
	HTFT_u8DrawText((uint8_t *)"V2G", 100 , 120 , 4                 , GUI_V2G_FRAME  );
 8002bf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bf8:	9300      	str	r3, [sp, #0]
 8002bfa:	2304      	movs	r3, #4
 8002bfc:	2278      	movs	r2, #120	; 0x78
 8002bfe:	2164      	movs	r1, #100	; 0x64
 8002c00:	4820      	ldr	r0, [pc, #128]	; (8002c84 <SGUI_voidV2GStartEnd+0xb4>)
 8002c02:	f000 fd3b 	bl	800367c <HTFT_u8DrawText>
	HTFT_u8DrawText((uint8_t *)"------------------", 120 , 100 , 1  , GUI_V2G_FRAME  );
 8002c06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c0a:	9300      	str	r3, [sp, #0]
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	2264      	movs	r2, #100	; 0x64
 8002c10:	2178      	movs	r1, #120	; 0x78
 8002c12:	481d      	ldr	r0, [pc, #116]	; (8002c88 <SGUI_voidV2GStartEnd+0xb8>)
 8002c14:	f000 fd32 	bl	800367c <HTFT_u8DrawText>
	HTFT_u8DrawText((uint8_t *)"CHARGING ", 110 , 45 , 2            , GUI_V2G_FRAME  );
 8002c18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	2302      	movs	r3, #2
 8002c20:	222d      	movs	r2, #45	; 0x2d
 8002c22:	216e      	movs	r1, #110	; 0x6e
 8002c24:	4819      	ldr	r0, [pc, #100]	; (8002c8c <SGUI_voidV2GStartEnd+0xbc>)
 8002c26:	f000 fd29 	bl	800367c <HTFT_u8DrawText>
	HTFT_u8DrawFrameu16(Local_pu16Success, 50 , 10 , 16, 16, 2      , GUI_V2G_FRAME  );
 8002c2a:	f107 0008 	add.w	r0, r7, #8
 8002c2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c32:	9302      	str	r3, [sp, #8]
 8002c34:	2302      	movs	r3, #2
 8002c36:	9301      	str	r3, [sp, #4]
 8002c38:	2310      	movs	r3, #16
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	2310      	movs	r3, #16
 8002c3e:	220a      	movs	r2, #10
 8002c40:	2132      	movs	r1, #50	; 0x32
 8002c42:	f000 fd52 	bl	80036ea <HTFT_u8DrawFrameu16>
	if ( Copy_u8StartEnd == GUI_V2G_START )
 8002c46:	79fb      	ldrb	r3, [r7, #7]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d109      	bne.n	8002c60 <SGUI_voidV2GStartEnd+0x90>
	{
		HTFT_u8DrawText((uint8_t *)"START ", 105 , 70 , 3           , GUI_V2G_FRAME  );
 8002c4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	2303      	movs	r3, #3
 8002c54:	2246      	movs	r2, #70	; 0x46
 8002c56:	2169      	movs	r1, #105	; 0x69
 8002c58:	480d      	ldr	r0, [pc, #52]	; (8002c90 <SGUI_voidV2GStartEnd+0xc0>)
 8002c5a:	f000 fd0f 	bl	800367c <HTFT_u8DrawText>
	else if ( Copy_u8StartEnd == GUI_V2G_END )
	{
		HTFT_u8DrawText((uint8_t *)"END ", 100  , 70 , 4            , GUI_V2G_FRAME  );
	}

}
 8002c5e:	e00b      	b.n	8002c78 <SGUI_voidV2GStartEnd+0xa8>
	else if ( Copy_u8StartEnd == GUI_V2G_END )
 8002c60:	79fb      	ldrb	r3, [r7, #7]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d108      	bne.n	8002c78 <SGUI_voidV2GStartEnd+0xa8>
		HTFT_u8DrawText((uint8_t *)"END ", 100  , 70 , 4            , GUI_V2G_FRAME  );
 8002c66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c6a:	9300      	str	r3, [sp, #0]
 8002c6c:	2304      	movs	r3, #4
 8002c6e:	2246      	movs	r2, #70	; 0x46
 8002c70:	2164      	movs	r1, #100	; 0x64
 8002c72:	4808      	ldr	r0, [pc, #32]	; (8002c94 <SGUI_voidV2GStartEnd+0xc4>)
 8002c74:	f000 fd02 	bl	800367c <HTFT_u8DrawText>
}
 8002c78:	bf00      	nop
 8002c7a:	3728      	adds	r7, #40	; 0x28
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bdb0      	pop	{r4, r5, r7, pc}
 8002c80:	0800513c 	.word	0x0800513c
 8002c84:	08005108 	.word	0x08005108
 8002c88:	0800510c 	.word	0x0800510c
 8002c8c:	08005120 	.word	0x08005120
 8002c90:	0800512c 	.word	0x0800512c
 8002c94:	08005134 	.word	0x08005134

08002c98 <MNVIC_u8EnableInterrupt>:
 *
 ******************************************************************************
 */

uint8_t   MNVIC_u8EnableInterrupt    ( IntNumber_t Copy_IntNumber )
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	73fb      	strb	r3, [r7, #15]
	if ( Copy_IntNumber <= NVIC_DMA2_Channel4_5 )
 8002ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002caa:	2b3b      	cmp	r3, #59	; 0x3b
 8002cac:	dc1b      	bgt.n	8002ce6 <MNVIC_u8EnableInterrupt+0x4e>
	{
		uint8_t Local_u8Reg = Copy_IntNumber/NVIC_BIT_REG_ACCESS;
 8002cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	da00      	bge.n	8002cb8 <MNVIC_u8EnableInterrupt+0x20>
 8002cb6:	331f      	adds	r3, #31
 8002cb8:	115b      	asrs	r3, r3, #5
 8002cba:	b25b      	sxtb	r3, r3
 8002cbc:	73bb      	strb	r3, [r7, #14]
		uint8_t Local_u8Bit = Copy_IntNumber%NVIC_BIT_REG_ACCESS;
 8002cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc2:	425a      	negs	r2, r3
 8002cc4:	f003 031f 	and.w	r3, r3, #31
 8002cc8:	f002 021f 	and.w	r2, r2, #31
 8002ccc:	bf58      	it	pl
 8002cce:	4253      	negpl	r3, r2
 8002cd0:	b25b      	sxtb	r3, r3
 8002cd2:	737b      	strb	r3, [r7, #13]
		NVIC -> ISER[Local_u8Reg] = ( NVIC_BIT_MASK << Local_u8Bit );
 8002cd4:	7b7b      	ldrb	r3, [r7, #13]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	fa02 f103 	lsl.w	r1, r2, r3
 8002cdc:	4a06      	ldr	r2, [pc, #24]	; (8002cf8 <MNVIC_u8EnableInterrupt+0x60>)
 8002cde:	7bbb      	ldrb	r3, [r7, #14]
 8002ce0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8002ce4:	e001      	b.n	8002cea <MNVIC_u8EnableInterrupt+0x52>
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState ;
 8002cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3714      	adds	r7, #20
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bc80      	pop	{r7}
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	e000e100 	.word	0xe000e100

08002cfc <MRCC_u8SetClockState>:
 *
 *
 ******************************************************************************
 */
uint8_t   MRCC_u8SetClockState		(  ClockType_t       Copy_ClockType , ClockState_t Copy_ClockState )
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	4603      	mov	r3, r0
 8002d04:	460a      	mov	r2, r1
 8002d06:	71fb      	strb	r3, [r7, #7]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	71bb      	strb	r3, [r7, #6]
          uint8_t Local_u8ErrorState = ERROR_STATE_OK;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	73fb      	strb	r3, [r7, #15]
          if ( Copy_ClockType <= PLL  &&  Copy_ClockState <= ENABLE )
 8002d10:	79fb      	ldrb	r3, [r7, #7]
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d87b      	bhi.n	8002e0e <MRCC_u8SetClockState+0x112>
 8002d16:	79bb      	ldrb	r3, [r7, #6]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d878      	bhi.n	8002e0e <MRCC_u8SetClockState+0x112>
          {
    		  uint32_t Local_u32TimeOut = 0 ;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	60bb      	str	r3, [r7, #8]
              switch ( Copy_ClockType )
 8002d20:	79fb      	ldrb	r3, [r7, #7]
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d048      	beq.n	8002db8 <MRCC_u8SetClockState+0xbc>
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	dc68      	bgt.n	8002dfc <MRCC_u8SetClockState+0x100>
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d002      	beq.n	8002d34 <MRCC_u8SetClockState+0x38>
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d020      	beq.n	8002d74 <MRCC_u8SetClockState+0x78>
 8002d32:	e063      	b.n	8002dfc <MRCC_u8SetClockState+0x100>
              {
              	  	  case HSI :  RCC->CR &=~( RCC_CLOCK_STATE_MASK<<(RCC_CR_HSION));
 8002d34:	4b3a      	ldr	r3, [pc, #232]	; (8002e20 <MRCC_u8SetClockState+0x124>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a39      	ldr	r2, [pc, #228]	; (8002e20 <MRCC_u8SetClockState+0x124>)
 8002d3a:	f023 0301 	bic.w	r3, r3, #1
 8002d3e:	6013      	str	r3, [r2, #0]
  	  	  	  	  	  	  	  	  RCC->CR |= (Copy_ClockState<<(RCC_CR_HSION));
 8002d40:	4b37      	ldr	r3, [pc, #220]	; (8002e20 <MRCC_u8SetClockState+0x124>)
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	79bb      	ldrb	r3, [r7, #6]
 8002d46:	4936      	ldr	r1, [pc, #216]	; (8002e20 <MRCC_u8SetClockState+0x124>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	600b      	str	r3, [r1, #0]
  	  	  	  	  	  	  	  	  while( (  RCC_CLK_NOT_RDY == (RCC->CR >> RCC_CR_HSIRDY) & 0x1 ) && ( Local_u32TimeOut < RCC_TIME_OUT ) )
 8002d4c:	e002      	b.n	8002d54 <MRCC_u8SetClockState+0x58>
  	  	  	  	  	  	  	  	  {
  	  	  	  	  	  	  	  		  Local_u32TimeOut++;
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	3301      	adds	r3, #1
 8002d52:	60bb      	str	r3, [r7, #8]
  	  	  	  	  	  	  	  	  while( (  RCC_CLK_NOT_RDY == (RCC->CR >> RCC_CR_HSIRDY) & 0x1 ) && ( Local_u32TimeOut < RCC_TIME_OUT ) )
 8002d54:	4b32      	ldr	r3, [pc, #200]	; (8002e20 <MRCC_u8SetClockState+0x124>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	085b      	lsrs	r3, r3, #1
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d103      	bne.n	8002d66 <MRCC_u8SetClockState+0x6a>
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	4a30      	ldr	r2, [pc, #192]	; (8002e24 <MRCC_u8SetClockState+0x128>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d9f3      	bls.n	8002d4e <MRCC_u8SetClockState+0x52>
  	  	  	  	  	  	  	  	  }
  	  	  	  	  	  	  	  	  if( Local_u32TimeOut >= RCC_TIME_OUT )
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	4a2e      	ldr	r2, [pc, #184]	; (8002e24 <MRCC_u8SetClockState+0x128>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d949      	bls.n	8002e02 <MRCC_u8SetClockState+0x106>
  	  	  	  	  	  	  	  	  {
  	  	  	  	  	  	  	  		  Local_u8ErrorState = ERROR_STATE_NOK;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	73fb      	strb	r3, [r7, #15]
  	  	  	  	  	  	  	  	  }
  	  	  	  	  	  	  	  	  break;
 8002d72:	e046      	b.n	8002e02 <MRCC_u8SetClockState+0x106>

              	  	  case HSE :  RCC->CR &=~( RCC_CLOCK_STATE_MASK<<(RCC_CR_HSEON));
 8002d74:	4b2a      	ldr	r3, [pc, #168]	; (8002e20 <MRCC_u8SetClockState+0x124>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a29      	ldr	r2, [pc, #164]	; (8002e20 <MRCC_u8SetClockState+0x124>)
 8002d7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d7e:	6013      	str	r3, [r2, #0]
              	  	  	  	  	  RCC->CR |= (Copy_ClockState<<(RCC_CR_HSEON));
 8002d80:	4b27      	ldr	r3, [pc, #156]	; (8002e20 <MRCC_u8SetClockState+0x124>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	79ba      	ldrb	r2, [r7, #6]
 8002d86:	0412      	lsls	r2, r2, #16
 8002d88:	4611      	mov	r1, r2
 8002d8a:	4a25      	ldr	r2, [pc, #148]	; (8002e20 <MRCC_u8SetClockState+0x124>)
 8002d8c:	430b      	orrs	r3, r1
 8002d8e:	6013      	str	r3, [r2, #0]
              	  	  	  	  	  while( (  RCC_CLK_NOT_RDY == (RCC->CR >> RCC_CR_HSERD) & 0x1 ) && ( Local_u32TimeOut < RCC_TIME_OUT ) )
 8002d90:	e002      	b.n	8002d98 <MRCC_u8SetClockState+0x9c>
              	  	  	  	  	  {
              	  	  	  	  		  	 Local_u32TimeOut++;
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	3301      	adds	r3, #1
 8002d96:	60bb      	str	r3, [r7, #8]
              	  	  	  	  	  while( (  RCC_CLK_NOT_RDY == (RCC->CR >> RCC_CR_HSERD) & 0x1 ) && ( Local_u32TimeOut < RCC_TIME_OUT ) )
 8002d98:	4b21      	ldr	r3, [pc, #132]	; (8002e20 <MRCC_u8SetClockState+0x124>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	0c5b      	lsrs	r3, r3, #17
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d103      	bne.n	8002daa <MRCC_u8SetClockState+0xae>
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	4a1f      	ldr	r2, [pc, #124]	; (8002e24 <MRCC_u8SetClockState+0x128>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d9f3      	bls.n	8002d92 <MRCC_u8SetClockState+0x96>
              	  	  	  	  	  }
              	  	  	  	  	  if( Local_u32TimeOut >= RCC_TIME_OUT )
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	4a1d      	ldr	r2, [pc, #116]	; (8002e24 <MRCC_u8SetClockState+0x128>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d929      	bls.n	8002e06 <MRCC_u8SetClockState+0x10a>
              	  	  	  	  	  {
              	  	  	  	  		  	 Local_u8ErrorState = ERROR_STATE_NOK;
 8002db2:	2300      	movs	r3, #0
 8002db4:	73fb      	strb	r3, [r7, #15]
              	  	  	  	  	  }
              	  	  	  	  	  break;
 8002db6:	e026      	b.n	8002e06 <MRCC_u8SetClockState+0x10a>

              	  	  case PLL :  RCC->CR &=~( RCC_CLOCK_STATE_MASK<<(RCC_CR_PLLON));
 8002db8:	4b19      	ldr	r3, [pc, #100]	; (8002e20 <MRCC_u8SetClockState+0x124>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a18      	ldr	r2, [pc, #96]	; (8002e20 <MRCC_u8SetClockState+0x124>)
 8002dbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dc2:	6013      	str	r3, [r2, #0]
              	  	  	  	  	  RCC->CR |= (Copy_ClockState<<(RCC_CR_PLLON));
 8002dc4:	4b16      	ldr	r3, [pc, #88]	; (8002e20 <MRCC_u8SetClockState+0x124>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	79ba      	ldrb	r2, [r7, #6]
 8002dca:	0612      	lsls	r2, r2, #24
 8002dcc:	4611      	mov	r1, r2
 8002dce:	4a14      	ldr	r2, [pc, #80]	; (8002e20 <MRCC_u8SetClockState+0x124>)
 8002dd0:	430b      	orrs	r3, r1
 8002dd2:	6013      	str	r3, [r2, #0]
              	  	  	  	  	  while( (  RCC_CLK_NOT_RDY == (RCC->CR >> RCC_CR_PLLRDY) & 0x1 ) && ( Local_u32TimeOut < RCC_TIME_OUT ) )
 8002dd4:	e002      	b.n	8002ddc <MRCC_u8SetClockState+0xe0>
              	  	  	  	  	  {
              	  	  	  	  		  Local_u32TimeOut++;
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	60bb      	str	r3, [r7, #8]
              	  	  	  	  	  while( (  RCC_CLK_NOT_RDY == (RCC->CR >> RCC_CR_PLLRDY) & 0x1 ) && ( Local_u32TimeOut < RCC_TIME_OUT ) )
 8002ddc:	4b10      	ldr	r3, [pc, #64]	; (8002e20 <MRCC_u8SetClockState+0x124>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	0e5b      	lsrs	r3, r3, #25
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d103      	bne.n	8002dee <MRCC_u8SetClockState+0xf2>
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	4a0e      	ldr	r2, [pc, #56]	; (8002e24 <MRCC_u8SetClockState+0x128>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d9f3      	bls.n	8002dd6 <MRCC_u8SetClockState+0xda>
              	  	  	  	  	  }
              	  	  	  	  	  if( Local_u32TimeOut >= RCC_TIME_OUT )
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	4a0c      	ldr	r2, [pc, #48]	; (8002e24 <MRCC_u8SetClockState+0x128>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d909      	bls.n	8002e0a <MRCC_u8SetClockState+0x10e>
              	  	  	  	  	  {
              	  	  	  	  		  Local_u8ErrorState = ERROR_STATE_NOK;
 8002df6:	2300      	movs	r3, #0
 8002df8:	73fb      	strb	r3, [r7, #15]
              	  	  	  	  	  }
              	  	  	  	  	  break;
 8002dfa:	e006      	b.n	8002e0a <MRCC_u8SetClockState+0x10e>
              	  	  default  :  Local_u8ErrorState = ERROR_STATE_NOK;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	73fb      	strb	r3, [r7, #15]
              	  	  	  	  	  break;
 8002e00:	e004      	b.n	8002e0c <MRCC_u8SetClockState+0x110>
  	  	  	  	  	  	  	  	  break;
 8002e02:	bf00      	nop
 8002e04:	e005      	b.n	8002e12 <MRCC_u8SetClockState+0x116>
              	  	  	  	  	  break;
 8002e06:	bf00      	nop
 8002e08:	e003      	b.n	8002e12 <MRCC_u8SetClockState+0x116>
              	  	  	  	  	  break;
 8002e0a:	bf00      	nop
          {
 8002e0c:	e001      	b.n	8002e12 <MRCC_u8SetClockState+0x116>
              }
          }
          else
          {
          	Local_u8ErrorState = ERROR_STATE_NOK;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	73fb      	strb	r3, [r7, #15]
          }
          return Local_u8ErrorState;
 8002e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bc80      	pop	{r7}
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	40021000 	.word	0x40021000
 8002e24:	0001869f 	.word	0x0001869f

08002e28 <MRCC_u8SetSystemClock>:
 *
 *
 ******************************************************************************
 */
uint8_t   MRCC_u8SetSystemClock		(  ClockType_t       Copy_ClockType  )
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	4603      	mov	r3, r0
 8002e30:	71fb      	strb	r3, [r7, #7]
          uint8_t Local_u8ErrorState = ERROR_STATE_OK;
 8002e32:	2301      	movs	r3, #1
 8002e34:	73fb      	strb	r3, [r7, #15]
          if ( Copy_ClockType <= PLL  )
 8002e36:	79fb      	ldrb	r3, [r7, #7]
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d80c      	bhi.n	8002e56 <MRCC_u8SetSystemClock+0x2e>
          {
        	  	  RCC->CFGR &=~( RCC_SYS_CLOCK_MASK<<(RCC_CFGR_SW));
 8002e3c:	4b0a      	ldr	r3, [pc, #40]	; (8002e68 <MRCC_u8SetSystemClock+0x40>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	4a09      	ldr	r2, [pc, #36]	; (8002e68 <MRCC_u8SetSystemClock+0x40>)
 8002e42:	f023 0303 	bic.w	r3, r3, #3
 8002e46:	6053      	str	r3, [r2, #4]
	  	  	  	  RCC->CFGR |= ( Copy_ClockType<<(RCC_CFGR_SW));
 8002e48:	4b07      	ldr	r3, [pc, #28]	; (8002e68 <MRCC_u8SetSystemClock+0x40>)
 8002e4a:	685a      	ldr	r2, [r3, #4]
 8002e4c:	79fb      	ldrb	r3, [r7, #7]
 8002e4e:	4906      	ldr	r1, [pc, #24]	; (8002e68 <MRCC_u8SetSystemClock+0x40>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	604b      	str	r3, [r1, #4]
 8002e54:	e001      	b.n	8002e5a <MRCC_u8SetSystemClock+0x32>
          }
          else
          {
          	Local_u8ErrorState = ERROR_STATE_NOK;
 8002e56:	2300      	movs	r3, #0
 8002e58:	73fb      	strb	r3, [r7, #15]
          }
          return Local_u8ErrorState;
 8002e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3714      	adds	r7, #20
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bc80      	pop	{r7}
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	40021000 	.word	0x40021000

08002e6c <MRCC_u8APB1PeripheralsClockState>:
 *
 *
 ******************************************************************************
 */
uint8_t   MRCC_u8APB1PeripheralsClockState    (  APB1peripherals_t Copy_PerID , ClockState_t Copy_ClockState )
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	4603      	mov	r3, r0
 8002e74:	460a      	mov	r2, r1
 8002e76:	71fb      	strb	r3, [r7, #7]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	73fb      	strb	r3, [r7, #15]
	if ( Copy_PerID <= PER_DAC &&  Copy_ClockState <= ENABLE )
 8002e80:	79fb      	ldrb	r3, [r7, #7]
 8002e82:	2b1d      	cmp	r3, #29
 8002e84:	d818      	bhi.n	8002eb8 <MRCC_u8APB1PeripheralsClockState+0x4c>
 8002e86:	79bb      	ldrb	r3, [r7, #6]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d815      	bhi.n	8002eb8 <MRCC_u8APB1PeripheralsClockState+0x4c>
	{
		RCC->APB1ENR &=~( RCC_CLOCK_STATE_MASK<<(Copy_PerID));
 8002e8c:	4b0e      	ldr	r3, [pc, #56]	; (8002ec8 <MRCC_u8APB1PeripheralsClockState+0x5c>)
 8002e8e:	69db      	ldr	r3, [r3, #28]
 8002e90:	79fa      	ldrb	r2, [r7, #7]
 8002e92:	2101      	movs	r1, #1
 8002e94:	fa01 f202 	lsl.w	r2, r1, r2
 8002e98:	43d2      	mvns	r2, r2
 8002e9a:	4611      	mov	r1, r2
 8002e9c:	4a0a      	ldr	r2, [pc, #40]	; (8002ec8 <MRCC_u8APB1PeripheralsClockState+0x5c>)
 8002e9e:	400b      	ands	r3, r1
 8002ea0:	61d3      	str	r3, [r2, #28]
		RCC->APB1ENR |= (Copy_ClockState)<<(Copy_PerID);
 8002ea2:	4b09      	ldr	r3, [pc, #36]	; (8002ec8 <MRCC_u8APB1PeripheralsClockState+0x5c>)
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	79b9      	ldrb	r1, [r7, #6]
 8002ea8:	79fa      	ldrb	r2, [r7, #7]
 8002eaa:	fa01 f202 	lsl.w	r2, r1, r2
 8002eae:	4611      	mov	r1, r2
 8002eb0:	4a05      	ldr	r2, [pc, #20]	; (8002ec8 <MRCC_u8APB1PeripheralsClockState+0x5c>)
 8002eb2:	430b      	orrs	r3, r1
 8002eb4:	61d3      	str	r3, [r2, #28]
 8002eb6:	e001      	b.n	8002ebc <MRCC_u8APB1PeripheralsClockState+0x50>
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState;
 8002ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3714      	adds	r7, #20
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bc80      	pop	{r7}
 8002ec6:	4770      	bx	lr
 8002ec8:	40021000 	.word	0x40021000

08002ecc <MRCC_u8APB2PeripheralsClockState>:
 *
 *
 ******************************************************************************
 */
uint8_t   MRCC_u8APB2PeripheralsClockState    (  APB2peripherals_t Copy_PerID , ClockState_t Copy_ClockState )
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	460a      	mov	r2, r1
 8002ed6:	71fb      	strb	r3, [r7, #7]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK;
 8002edc:	2301      	movs	r3, #1
 8002ede:	73fb      	strb	r3, [r7, #15]
	if ( Copy_PerID <= PER_TIM11 &&  Copy_ClockState <= ENABLE )
 8002ee0:	79fb      	ldrb	r3, [r7, #7]
 8002ee2:	2b15      	cmp	r3, #21
 8002ee4:	d818      	bhi.n	8002f18 <MRCC_u8APB2PeripheralsClockState+0x4c>
 8002ee6:	79bb      	ldrb	r3, [r7, #6]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d815      	bhi.n	8002f18 <MRCC_u8APB2PeripheralsClockState+0x4c>
	{
		RCC->APB2ENR &=~( RCC_CLOCK_STATE_MASK<<(Copy_PerID));
 8002eec:	4b0e      	ldr	r3, [pc, #56]	; (8002f28 <MRCC_u8APB2PeripheralsClockState+0x5c>)
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	79fa      	ldrb	r2, [r7, #7]
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef8:	43d2      	mvns	r2, r2
 8002efa:	4611      	mov	r1, r2
 8002efc:	4a0a      	ldr	r2, [pc, #40]	; (8002f28 <MRCC_u8APB2PeripheralsClockState+0x5c>)
 8002efe:	400b      	ands	r3, r1
 8002f00:	6193      	str	r3, [r2, #24]
		RCC->APB2ENR |= (Copy_ClockState)<<(Copy_PerID);
 8002f02:	4b09      	ldr	r3, [pc, #36]	; (8002f28 <MRCC_u8APB2PeripheralsClockState+0x5c>)
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	79b9      	ldrb	r1, [r7, #6]
 8002f08:	79fa      	ldrb	r2, [r7, #7]
 8002f0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f0e:	4611      	mov	r1, r2
 8002f10:	4a05      	ldr	r2, [pc, #20]	; (8002f28 <MRCC_u8APB2PeripheralsClockState+0x5c>)
 8002f12:	430b      	orrs	r3, r1
 8002f14:	6193      	str	r3, [r2, #24]
 8002f16:	e001      	b.n	8002f1c <MRCC_u8APB2PeripheralsClockState+0x50>
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState;
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3714      	adds	r7, #20
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc80      	pop	{r7}
 8002f26:	4770      	bx	lr
 8002f28:	40021000 	.word	0x40021000

08002f2c <MRCC_u8PeripheralsClockState>:
 *
 *
 ******************************************************************************
 */
uint8_t   MRCC_u8PeripheralsClockState     (  BUSS_t Copy_Bus , uint8_t  Copy_PerID , ClockState_t Copy_ClockState )
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	4603      	mov	r3, r0
 8002f34:	71fb      	strb	r3, [r7, #7]
 8002f36:	460b      	mov	r3, r1
 8002f38:	71bb      	strb	r3, [r7, #6]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	717b      	strb	r3, [r7, #5]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	73fb      	strb	r3, [r7, #15]
	if ( Copy_Bus<=APB2  && Copy_PerID <= PER_DAC &&  Copy_ClockState <= ENABLE )
 8002f42:	79fb      	ldrb	r3, [r7, #7]
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d855      	bhi.n	8002ff4 <MRCC_u8PeripheralsClockState+0xc8>
 8002f48:	79bb      	ldrb	r3, [r7, #6]
 8002f4a:	2b1d      	cmp	r3, #29
 8002f4c:	d852      	bhi.n	8002ff4 <MRCC_u8PeripheralsClockState+0xc8>
 8002f4e:	797b      	ldrb	r3, [r7, #5]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d84f      	bhi.n	8002ff4 <MRCC_u8PeripheralsClockState+0xc8>
	{
		switch ( Copy_Bus )
 8002f54:	79fb      	ldrb	r3, [r7, #7]
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d032      	beq.n	8002fc0 <MRCC_u8PeripheralsClockState+0x94>
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	dc46      	bgt.n	8002fec <MRCC_u8PeripheralsClockState+0xc0>
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d002      	beq.n	8002f68 <MRCC_u8PeripheralsClockState+0x3c>
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d016      	beq.n	8002f94 <MRCC_u8PeripheralsClockState+0x68>
 8002f66:	e041      	b.n	8002fec <MRCC_u8PeripheralsClockState+0xc0>
		{
			case AHB :  RCC->AHBENR &=~( RCC_CLOCK_STATE_MASK<<(Copy_PerID));
 8002f68:	4b26      	ldr	r3, [pc, #152]	; (8003004 <MRCC_u8PeripheralsClockState+0xd8>)
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	79ba      	ldrb	r2, [r7, #6]
 8002f6e:	2101      	movs	r1, #1
 8002f70:	fa01 f202 	lsl.w	r2, r1, r2
 8002f74:	43d2      	mvns	r2, r2
 8002f76:	4611      	mov	r1, r2
 8002f78:	4a22      	ldr	r2, [pc, #136]	; (8003004 <MRCC_u8PeripheralsClockState+0xd8>)
 8002f7a:	400b      	ands	r3, r1
 8002f7c:	6153      	str	r3, [r2, #20]
					    RCC->AHBENR |= (Copy_ClockState)<<(Copy_PerID);
 8002f7e:	4b21      	ldr	r3, [pc, #132]	; (8003004 <MRCC_u8PeripheralsClockState+0xd8>)
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	7979      	ldrb	r1, [r7, #5]
 8002f84:	79ba      	ldrb	r2, [r7, #6]
 8002f86:	fa01 f202 	lsl.w	r2, r1, r2
 8002f8a:	4611      	mov	r1, r2
 8002f8c:	4a1d      	ldr	r2, [pc, #116]	; (8003004 <MRCC_u8PeripheralsClockState+0xd8>)
 8002f8e:	430b      	orrs	r3, r1
 8002f90:	6153      	str	r3, [r2, #20]
					    break;
 8002f92:	e02e      	b.n	8002ff2 <MRCC_u8PeripheralsClockState+0xc6>
			case APB1 : RCC->APB1ENR &=~( RCC_CLOCK_STATE_MASK<<(Copy_PerID));
 8002f94:	4b1b      	ldr	r3, [pc, #108]	; (8003004 <MRCC_u8PeripheralsClockState+0xd8>)
 8002f96:	69db      	ldr	r3, [r3, #28]
 8002f98:	79ba      	ldrb	r2, [r7, #6]
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002fa0:	43d2      	mvns	r2, r2
 8002fa2:	4611      	mov	r1, r2
 8002fa4:	4a17      	ldr	r2, [pc, #92]	; (8003004 <MRCC_u8PeripheralsClockState+0xd8>)
 8002fa6:	400b      	ands	r3, r1
 8002fa8:	61d3      	str	r3, [r2, #28]
					    RCC->APB1ENR |= (Copy_ClockState)<<(Copy_PerID);
 8002faa:	4b16      	ldr	r3, [pc, #88]	; (8003004 <MRCC_u8PeripheralsClockState+0xd8>)
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	7979      	ldrb	r1, [r7, #5]
 8002fb0:	79ba      	ldrb	r2, [r7, #6]
 8002fb2:	fa01 f202 	lsl.w	r2, r1, r2
 8002fb6:	4611      	mov	r1, r2
 8002fb8:	4a12      	ldr	r2, [pc, #72]	; (8003004 <MRCC_u8PeripheralsClockState+0xd8>)
 8002fba:	430b      	orrs	r3, r1
 8002fbc:	61d3      	str	r3, [r2, #28]
					    break;
 8002fbe:	e018      	b.n	8002ff2 <MRCC_u8PeripheralsClockState+0xc6>
			case APB2 : RCC->APB2ENR &=~( RCC_CLOCK_STATE_MASK<<(Copy_PerID));
 8002fc0:	4b10      	ldr	r3, [pc, #64]	; (8003004 <MRCC_u8PeripheralsClockState+0xd8>)
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	79ba      	ldrb	r2, [r7, #6]
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fcc:	43d2      	mvns	r2, r2
 8002fce:	4611      	mov	r1, r2
 8002fd0:	4a0c      	ldr	r2, [pc, #48]	; (8003004 <MRCC_u8PeripheralsClockState+0xd8>)
 8002fd2:	400b      	ands	r3, r1
 8002fd4:	6193      	str	r3, [r2, #24]
					    RCC->APB2ENR |= (Copy_ClockState)<<(Copy_PerID);
 8002fd6:	4b0b      	ldr	r3, [pc, #44]	; (8003004 <MRCC_u8PeripheralsClockState+0xd8>)
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	7979      	ldrb	r1, [r7, #5]
 8002fdc:	79ba      	ldrb	r2, [r7, #6]
 8002fde:	fa01 f202 	lsl.w	r2, r1, r2
 8002fe2:	4611      	mov	r1, r2
 8002fe4:	4a07      	ldr	r2, [pc, #28]	; (8003004 <MRCC_u8PeripheralsClockState+0xd8>)
 8002fe6:	430b      	orrs	r3, r1
 8002fe8:	6193      	str	r3, [r2, #24]
					    break;
 8002fea:	e002      	b.n	8002ff2 <MRCC_u8PeripheralsClockState+0xc6>
			default  :  Local_u8ErrorState = ERROR_STATE_NOK;
 8002fec:	2300      	movs	r3, #0
 8002fee:	73fb      	strb	r3, [r7, #15]
		switch ( Copy_Bus )
 8002ff0:	e002      	b.n	8002ff8 <MRCC_u8PeripheralsClockState+0xcc>
 8002ff2:	e001      	b.n	8002ff8 <MRCC_u8PeripheralsClockState+0xcc>


	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState;
 8002ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3714      	adds	r7, #20
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bc80      	pop	{r7}
 8003002:	4770      	bx	lr
 8003004:	40021000 	.word	0x40021000

08003008 <MSPI_u8SetConfiguration>:
 *
 *
 ******************************************************************************
 */
uint8_t MSPI_u8SetConfiguration ( const SPIconfig_t* SPIconfig )
{
 8003008:	b480      	push	{r7}
 800300a:	b087      	sub	sp, #28
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK;
 8003010:	2301      	movs	r3, #1
 8003012:	75fb      	strb	r3, [r7, #23]
	if (  SPIconfig !=NULL )
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	f000 80bd 	beq.w	8003196 <MSPI_u8SetConfiguration+0x18e>
	{
		uint32_t Local_u32CR1Temp =0 ;
 800301c:	2300      	movs	r3, #0
 800301e:	613b      	str	r3, [r7, #16]
		uint32_t Local_u32CR2Temp =0 ;
 8003020:	2300      	movs	r3, #0
 8003022:	60fb      	str	r3, [r7, #12]

		Local_u32CR1Temp &=~ ( SPI_CPHA_MASK         << SPI_CR1_CPHA );
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	f023 0301 	bic.w	r3, r3, #1
 800302a:	613b      	str	r3, [r7, #16]
		Local_u32CR1Temp |=  ( SPIconfig->ClockPhase << SPI_CR1_CPHA );
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	785b      	ldrb	r3, [r3, #1]
 8003030:	461a      	mov	r2, r3
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	4313      	orrs	r3, r2
 8003036:	613b      	str	r3, [r7, #16]

		Local_u32CR1Temp &=~ ( SPI_CPOL_MASK            << SPI_CR1_CPOL );
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	f023 0302 	bic.w	r3, r3, #2
 800303e:	613b      	str	r3, [r7, #16]
		Local_u32CR1Temp |=  ( SPIconfig->ClockPolarity << SPI_CR1_CPOL );
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	789b      	ldrb	r3, [r3, #2]
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	461a      	mov	r2, r3
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	4313      	orrs	r3, r2
 800304c:	613b      	str	r3, [r7, #16]

		Local_u32CR1Temp &=~ ( SPI_MSTR_MASK           << SPI_CR1_MSTR );
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	f023 0304 	bic.w	r3, r3, #4
 8003054:	613b      	str	r3, [r7, #16]
		Local_u32CR1Temp |=  ( SPIconfig->SPI_MCUstate << SPI_CR1_MSTR );
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	78db      	ldrb	r3, [r3, #3]
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	461a      	mov	r2, r3
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	4313      	orrs	r3, r2
 8003062:	613b      	str	r3, [r7, #16]

		Local_u32CR1Temp &=~ ( SPI_BR_MASK         << SPI_CR1_BR );
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800306a:	613b      	str	r3, [r7, #16]
		Local_u32CR1Temp |=  ( SPIconfig->BaudRate << SPI_CR1_BR );
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	791b      	ldrb	r3, [r3, #4]
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	461a      	mov	r2, r3
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	4313      	orrs	r3, r2
 8003078:	613b      	str	r3, [r7, #16]

		Local_u32CR1Temp &=~ (SPI_LSBFIRST_MASK      << (SPI_CR1_LSBFIRST));
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003080:	613b      	str	r3, [r7, #16]
		Local_u32CR1Temp |=  (SPIconfig->FrameFormat << (SPI_CR1_LSBFIRST));
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	795b      	ldrb	r3, [r3, #5]
 8003086:	01db      	lsls	r3, r3, #7
 8003088:	461a      	mov	r2, r3
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	4313      	orrs	r3, r2
 800308e:	613b      	str	r3, [r7, #16]

		Local_u32CR1Temp &=~ (SPI_SSI_MASK                   << (SPI_CR1_SSI));
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003096:	613b      	str	r3, [r7, #16]
		Local_u32CR1Temp |=  (SPIconfig->InternalSlaveSelect << (SPI_CR1_SSI));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	799b      	ldrb	r3, [r3, #6]
 800309c:	021b      	lsls	r3, r3, #8
 800309e:	461a      	mov	r2, r3
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	613b      	str	r3, [r7, #16]

		Local_u32CR1Temp &=~ (SPI_SSM_MASK                      << (SPI_CR1_SSM));
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030ac:	613b      	str	r3, [r7, #16]
		Local_u32CR1Temp |=  (SPIconfig->SoftwareSlaveManagment << (SPI_CR1_SSM));
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	79db      	ldrb	r3, [r3, #7]
 80030b2:	025b      	lsls	r3, r3, #9
 80030b4:	461a      	mov	r2, r3
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	613b      	str	r3, [r7, #16]

		Local_u32CR1Temp &=~ (SPI_RXONLY_MASK        << (SPI_CR1_RXONLY));
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030c2:	613b      	str	r3, [r7, #16]
		Local_u32CR1Temp |=  (SPIconfig->ReceiveOnly << (SPI_CR1_RXONLY));
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	7a1b      	ldrb	r3, [r3, #8]
 80030c8:	029b      	lsls	r3, r3, #10
 80030ca:	461a      	mov	r2, r3
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	613b      	str	r3, [r7, #16]

		Local_u32CR1Temp &=~ (SPI_DFF_MASK         << (SPI_CR1_DFF));
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030d8:	613b      	str	r3, [r7, #16]
		Local_u32CR1Temp |=  (SPIconfig->DataFrame << (SPI_CR1_DFF));
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	7a5b      	ldrb	r3, [r3, #9]
 80030de:	02db      	lsls	r3, r3, #11
 80030e0:	461a      	mov	r2, r3
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	613b      	str	r3, [r7, #16]
/****************************************************************************************************/

		Local_u32CR2Temp &=~ (SPI_RXDMAEN_MASK << (SPI_CR2_RXDMAEN));
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f023 0301 	bic.w	r3, r3, #1
 80030ee:	60fb      	str	r3, [r7, #12]
		Local_u32CR2Temp |=  (SPIconfig->RXDMA << (SPI_CR2_RXDMAEN));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	7a9b      	ldrb	r3, [r3, #10]
 80030f4:	461a      	mov	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	60fb      	str	r3, [r7, #12]
	
		Local_u32CR2Temp &=~ (SPI_TXDMAEN_MASK << (SPI_CR2_TXDMAEN));
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f023 0302 	bic.w	r3, r3, #2
 8003102:	60fb      	str	r3, [r7, #12]
		Local_u32CR2Temp |=  (SPIconfig->TXDMA << (SPI_CR2_TXDMAEN));
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	7adb      	ldrb	r3, [r3, #11]
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	461a      	mov	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	4313      	orrs	r3, r2
 8003110:	60fb      	str	r3, [r7, #12]
	
		Local_u32CR2Temp &=~ (SPI_SSOE_MASK       << (SPI_CR2_SSOE));
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f023 0304 	bic.w	r3, r3, #4
 8003118:	60fb      	str	r3, [r7, #12]
		Local_u32CR2Temp |=  (SPIconfig->SSoutput << (SPI_CR2_SSOE));
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	7b1b      	ldrb	r3, [r3, #12]
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	461a      	mov	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	4313      	orrs	r3, r2
 8003126:	60fb      	str	r3, [r7, #12]

		Local_u32CR2Temp &=~ (SPI_RXNEIE_MASK        << (SPI_CR2_RXNEIE));
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800312e:	60fb      	str	r3, [r7, #12]
		Local_u32CR2Temp |=  (SPIconfig->RXinterrupt << (SPI_CR2_RXNEIE));
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	7b5b      	ldrb	r3, [r3, #13]
 8003134:	019b      	lsls	r3, r3, #6
 8003136:	461a      	mov	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	4313      	orrs	r3, r2
 800313c:	60fb      	str	r3, [r7, #12]

		Local_u32CR2Temp &=~ (SPI_TXEIE_MASK         << (SPI_CR2_TXEIE));
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003144:	60fb      	str	r3, [r7, #12]
		Local_u32CR2Temp |=  (SPIconfig->TXinterrupt << (SPI_CR2_TXEIE));
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	7b9b      	ldrb	r3, [r3, #14]
 800314a:	01db      	lsls	r3, r3, #7
 800314c:	461a      	mov	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	4313      	orrs	r3, r2
 8003152:	60fb      	str	r3, [r7, #12]


		SPI_Index[SPIconfig->SPIindex] -> CR2 = Local_u32CR2Temp;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	461a      	mov	r2, r3
 800315a:	4b13      	ldr	r3, [pc, #76]	; (80031a8 <MSPI_u8SetConfiguration+0x1a0>)
 800315c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	605a      	str	r2, [r3, #4]
		SPI_Index[SPIconfig->SPIindex] -> CR1 = Local_u32CR1Temp;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	461a      	mov	r2, r3
 800316a:	4b0f      	ldr	r3, [pc, #60]	; (80031a8 <MSPI_u8SetConfiguration+0x1a0>)
 800316c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	601a      	str	r2, [r3, #0]
		SET_BIT( SPI_Index[SPIconfig->SPIindex] -> CR1 , SPI_CR1_SPE );
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	461a      	mov	r2, r3
 800317a:	4b0b      	ldr	r3, [pc, #44]	; (80031a8 <MSPI_u8SetConfiguration+0x1a0>)
 800317c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	4619      	mov	r1, r3
 8003188:	4b07      	ldr	r3, [pc, #28]	; (80031a8 <MSPI_u8SetConfiguration+0x1a0>)
 800318a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800318e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	e001      	b.n	800319a <MSPI_u8SetConfiguration+0x192>
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK;
 8003196:	2300      	movs	r3, #0
 8003198:	75fb      	strb	r3, [r7, #23]
	}
	return Local_u8ErrorState ;
 800319a:	7dfb      	ldrb	r3, [r7, #23]

}
 800319c:	4618      	mov	r0, r3
 800319e:	371c      	adds	r7, #28
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bc80      	pop	{r7}
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	20000028 	.word	0x20000028

080031ac <MSPI_u8SendReceiveSynch>:
 *
 *
 ******************************************************************************
 */
uint8_t MSPI_u8SendReceiveSynch ( SPIindex_t Copy_SPIindex , uint8_t Copy_u8DataToTransmit , uint8_t *Copy_u8DataToReceive )
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	4603      	mov	r3, r0
 80031b4:	603a      	str	r2, [r7, #0]
 80031b6:	71fb      	strb	r3, [r7, #7]
 80031b8:	460b      	mov	r3, r1
 80031ba:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 80031bc:	2301      	movs	r3, #1
 80031be:	73fb      	strb	r3, [r7, #15]
	if (   Copy_u8DataToReceive != NULL )
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d02e      	beq.n	8003224 <MSPI_u8SendReceiveSynch+0x78>
	{
		while ( SPI_TXE_FLAG==GET_BIT(SPI_Index[Copy_SPIindex]  ->  SR , SPI_SR_TXE ) );
 80031c6:	bf00      	nop
 80031c8:	79fb      	ldrb	r3, [r7, #7]
 80031ca:	4a1a      	ldr	r2, [pc, #104]	; (8003234 <MSPI_u8SendReceiveSynch+0x88>)
 80031cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	085b      	lsrs	r3, r3, #1
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d0f5      	beq.n	80031c8 <MSPI_u8SendReceiveSynch+0x1c>
		SPI_Index[Copy_SPIindex]  -> DR = Copy_u8DataToTransmit ;
 80031dc:	79fb      	ldrb	r3, [r7, #7]
 80031de:	4a15      	ldr	r2, [pc, #84]	; (8003234 <MSPI_u8SendReceiveSynch+0x88>)
 80031e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031e4:	79ba      	ldrb	r2, [r7, #6]
 80031e6:	60da      	str	r2, [r3, #12]
		while ( SPI_BSY_FLAG == GET_BIT( SPI_Index[Copy_SPIindex] ->  SR , SPI_SR_BSY ) );
 80031e8:	bf00      	nop
 80031ea:	79fb      	ldrb	r3, [r7, #7]
 80031ec:	4a11      	ldr	r2, [pc, #68]	; (8003234 <MSPI_u8SendReceiveSynch+0x88>)
 80031ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	09db      	lsrs	r3, r3, #7
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d0f5      	beq.n	80031ea <MSPI_u8SendReceiveSynch+0x3e>
		while ( SPI_RXNE_FLAG==GET_BIT(SPI_Index[Copy_SPIindex]  ->  SR , SPI_SR_RXNE ) );
 80031fe:	bf00      	nop
 8003200:	79fb      	ldrb	r3, [r7, #7]
 8003202:	4a0c      	ldr	r2, [pc, #48]	; (8003234 <MSPI_u8SendReceiveSynch+0x88>)
 8003204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	d0f6      	beq.n	8003200 <MSPI_u8SendReceiveSynch+0x54>
		*Copy_u8DataToReceive = SPI_Index[Copy_SPIindex]  -> DR  ;
 8003212:	79fb      	ldrb	r3, [r7, #7]
 8003214:	4a07      	ldr	r2, [pc, #28]	; (8003234 <MSPI_u8SendReceiveSynch+0x88>)
 8003216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	b2da      	uxtb	r2, r3
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	701a      	strb	r2, [r3, #0]
 8003222:	e001      	b.n	8003228 <MSPI_u8SendReceiveSynch+0x7c>
	}
	else 
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
 8003224:	2300      	movs	r3, #0
 8003226:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState ;
 8003228:	7bfb      	ldrb	r3, [r7, #15]
}
 800322a:	4618      	mov	r0, r3
 800322c:	3714      	adds	r7, #20
 800322e:	46bd      	mov	sp, r7
 8003230:	bc80      	pop	{r7}
 8003232:	4770      	bx	lr
 8003234:	20000028 	.word	0x20000028

08003238 <SPI1_IRQHandler>:
}
/*************************************************************************************************************************************/
/********************************************************* Handlers implementations **************************************************/
/*************************************************************************************************************************************/
void SPI1_IRQHandler(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
    if ( SPI_ApFunCallBack[SPI_1] != NULL )
 800323c:	4b06      	ldr	r3, [pc, #24]	; (8003258 <SPI1_IRQHandler+0x20>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d007      	beq.n	8003254 <SPI1_IRQHandler+0x1c>
	{
    	SPI_ApFunCallBack[SPI_1]( SPI_Index[SPI_1] -> DR );
 8003244:	4b04      	ldr	r3, [pc, #16]	; (8003258 <SPI1_IRQHandler+0x20>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a04      	ldr	r2, [pc, #16]	; (800325c <SPI1_IRQHandler+0x24>)
 800324a:	6812      	ldr	r2, [r2, #0]
 800324c:	68d2      	ldr	r2, [r2, #12]
 800324e:	b2d2      	uxtb	r2, r2
 8003250:	4610      	mov	r0, r2
 8003252:	4798      	blx	r3
	}
}
 8003254:	bf00      	nop
 8003256:	bd80      	pop	{r7, pc}
 8003258:	200000e4 	.word	0x200000e4
 800325c:	20000028 	.word	0x20000028

08003260 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
    if ( SPI_ApFunCallBack[SPI_2] != NULL )
 8003264:	4b06      	ldr	r3, [pc, #24]	; (8003280 <SPI2_IRQHandler+0x20>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d007      	beq.n	800327c <SPI2_IRQHandler+0x1c>
	{
    	SPI_ApFunCallBack[SPI_2]( SPI_Index[SPI_2] -> DR );
 800326c:	4b04      	ldr	r3, [pc, #16]	; (8003280 <SPI2_IRQHandler+0x20>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	4a04      	ldr	r2, [pc, #16]	; (8003284 <SPI2_IRQHandler+0x24>)
 8003272:	6852      	ldr	r2, [r2, #4]
 8003274:	68d2      	ldr	r2, [r2, #12]
 8003276:	b2d2      	uxtb	r2, r2
 8003278:	4610      	mov	r0, r2
 800327a:	4798      	blx	r3
	}
}
 800327c:	bf00      	nop
 800327e:	bd80      	pop	{r7, pc}
 8003280:	200000e4 	.word	0x200000e4
 8003284:	20000028 	.word	0x20000028

08003288 <SPI3_IRQHandler>:
void SPI3_IRQHandler(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
    if ( SPI_ApFunCallBack[SPI_3] != NULL )
 800328c:	4b06      	ldr	r3, [pc, #24]	; (80032a8 <SPI3_IRQHandler+0x20>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d007      	beq.n	80032a4 <SPI3_IRQHandler+0x1c>
	{
    	SPI_ApFunCallBack[SPI_3]( SPI_Index[SPI_3] -> DR );
 8003294:	4b04      	ldr	r3, [pc, #16]	; (80032a8 <SPI3_IRQHandler+0x20>)
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	4a04      	ldr	r2, [pc, #16]	; (80032ac <SPI3_IRQHandler+0x24>)
 800329a:	6892      	ldr	r2, [r2, #8]
 800329c:	68d2      	ldr	r2, [r2, #12]
 800329e:	b2d2      	uxtb	r2, r2
 80032a0:	4610      	mov	r0, r2
 80032a2:	4798      	blx	r3
	}
}
 80032a4:	bf00      	nop
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	200000e4 	.word	0x200000e4
 80032ac:	20000028 	.word	0x20000028

080032b0 <MSTK_u8ClockConfig>:
 *
 *
 ******************************************************************************
 */
uint8_t MSTK_u8ClockConfig              ( STKclock_t Copy_ClockType )
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	4603      	mov	r3, r0
 80032b8:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8ErrorState=ERROR_STATE_OK;
 80032ba:	2301      	movs	r3, #1
 80032bc:	73fb      	strb	r3, [r7, #15]
	if ( Copy_ClockType <= STK_AHB )
 80032be:	79fb      	ldrb	r3, [r7, #7]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d80e      	bhi.n	80032e2 <MSTK_u8ClockConfig+0x32>
	{
		STK->CTRL &=~(STK_CLKSOURCE_MASK << STK_CTRL_CLKSOURCE );
 80032c4:	4b0b      	ldr	r3, [pc, #44]	; (80032f4 <MSTK_u8ClockConfig+0x44>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a0a      	ldr	r2, [pc, #40]	; (80032f4 <MSTK_u8ClockConfig+0x44>)
 80032ca:	f023 0304 	bic.w	r3, r3, #4
 80032ce:	6013      	str	r3, [r2, #0]
		STK->CTRL |= (Copy_ClockType << STK_CTRL_CLKSOURCE );
 80032d0:	4b08      	ldr	r3, [pc, #32]	; (80032f4 <MSTK_u8ClockConfig+0x44>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	79fa      	ldrb	r2, [r7, #7]
 80032d6:	0092      	lsls	r2, r2, #2
 80032d8:	4611      	mov	r1, r2
 80032da:	4a06      	ldr	r2, [pc, #24]	; (80032f4 <MSTK_u8ClockConfig+0x44>)
 80032dc:	430b      	orrs	r3, r1
 80032de:	6013      	str	r3, [r2, #0]
 80032e0:	e001      	b.n	80032e6 <MSTK_u8ClockConfig+0x36>
	}
	else
	{
		Local_u8ErrorState=ERROR_STATE_NOK;
 80032e2:	2300      	movs	r3, #0
 80032e4:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState ;
 80032e6:	7bfb      	ldrb	r3, [r7, #15]

}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3714      	adds	r7, #20
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bc80      	pop	{r7}
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	e000e010 	.word	0xe000e010

080032f8 <MSTK_voidStopTimer>:
 *
 *
 ******************************************************************************
 */
void   MSTK_voidStopTimer         ( void )
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0
	    STK->CTRL &=~(STK_STOP_TIMER_MASK << STK_CTRL_ENABLE );
 80032fc:	4b07      	ldr	r3, [pc, #28]	; (800331c <MSTK_voidStopTimer+0x24>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a06      	ldr	r2, [pc, #24]	; (800331c <MSTK_voidStopTimer+0x24>)
 8003302:	f023 0303 	bic.w	r3, r3, #3
 8003306:	6013      	str	r3, [r2, #0]
		STK->LOAD = STK_RESET_COUNTER;
 8003308:	4b04      	ldr	r3, [pc, #16]	; (800331c <MSTK_voidStopTimer+0x24>)
 800330a:	2200      	movs	r2, #0
 800330c:	605a      	str	r2, [r3, #4]
		STK->VAL  = STK_RESET_COUNTER;
 800330e:	4b03      	ldr	r3, [pc, #12]	; (800331c <MSTK_voidStopTimer+0x24>)
 8003310:	2200      	movs	r2, #0
 8003312:	609a      	str	r2, [r3, #8]
}
 8003314:	bf00      	nop
 8003316:	46bd      	mov	sp, r7
 8003318:	bc80      	pop	{r7}
 800331a:	4770      	bx	lr
 800331c:	e000e010 	.word	0xe000e010

08003320 <SysTick_Handler>:
 *
 *
 ******************************************************************************
 */
void SysTick_Handler (void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
    if ( SysTick_CallBack != NULL)
 8003324:	4b0c      	ldr	r3, [pc, #48]	; (8003358 <SysTick_Handler+0x38>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d012      	beq.n	8003352 <SysTick_Handler+0x32>
    {
         if ( SINGLE == STK_u8IntervalType )
 800332c:	4b0b      	ldr	r3, [pc, #44]	; (800335c <SysTick_Handler+0x3c>)
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d105      	bne.n	8003340 <SysTick_Handler+0x20>
         {
        	 SysTick_CallBack();
 8003334:	4b08      	ldr	r3, [pc, #32]	; (8003358 <SysTick_Handler+0x38>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4798      	blx	r3
        	 MSTK_voidStopTimer();
 800333a:	f7ff ffdd 	bl	80032f8 <MSTK_voidStopTimer>
 800333e:	e006      	b.n	800334e <SysTick_Handler+0x2e>
         }
         else if ( PERIODIC == STK_u8IntervalType )
 8003340:	4b06      	ldr	r3, [pc, #24]	; (800335c <SysTick_Handler+0x3c>)
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d102      	bne.n	800334e <SysTick_Handler+0x2e>
         {
        	 SysTick_CallBack();
 8003348:	4b03      	ldr	r3, [pc, #12]	; (8003358 <SysTick_Handler+0x38>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4798      	blx	r3
         }
         GET_BIT( STK->CTRL , STK_CTRL_COUNTFLAG ) ;
 800334e:	4b04      	ldr	r3, [pc, #16]	; (8003360 <SysTick_Handler+0x40>)
 8003350:	681b      	ldr	r3, [r3, #0]

    }

}
 8003352:	bf00      	nop
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	200000f0 	.word	0x200000f0
 800335c:	20000034 	.word	0x20000034
 8003360:	e000e010 	.word	0xe000e010

08003364 <HTFT_voidInit>:
 *
 *
 ******************************************************************************
 */
void   HTFT_voidInit    ( void ) 
{
 8003364:	b590      	push	{r4, r7, lr}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
	MSTK_u8ClockConfig(STK_AHB_DIV_8);
 800336a:	2000      	movs	r0, #0
 800336c:	f7ff ffa0 	bl	80032b0 <MSTK_u8ClockConfig>
	MGPIO_u8SetPinDirection( TFT_A0_PIN    , OUTPUT_SPEED_2MHZ_PP    );
 8003370:	2202      	movs	r2, #2
 8003372:	2104      	movs	r1, #4
 8003374:	2000      	movs	r0, #0
 8003376:	f7fe fc89 	bl	8001c8c <MGPIO_u8SetPinDirection>
	MGPIO_u8SetPinDirection( TFT_RESET_PIN , OUTPUT_SPEED_2MHZ_PP    );
 800337a:	2202      	movs	r2, #2
 800337c:	2101      	movs	r1, #1
 800337e:	2000      	movs	r0, #0
 8003380:	f7fe fc84 	bl	8001c8c <MGPIO_u8SetPinDirection>
	MGPIO_u8SetPinDirection( TFT_SCK       , OUTPUT_SPEED_10MHZ_AFPP );
 8003384:	2209      	movs	r2, #9
 8003386:	2105      	movs	r1, #5
 8003388:	2000      	movs	r0, #0
 800338a:	f7fe fc7f 	bl	8001c8c <MGPIO_u8SetPinDirection>
	MGPIO_u8SetPinDirection( TFT_MOSI      , OUTPUT_SPEED_10MHZ_AFPP );
 800338e:	2209      	movs	r2, #9
 8003390:	2107      	movs	r1, #7
 8003392:	2000      	movs	r0, #0
 8003394:	f7fe fc7a 	bl	8001c8c <MGPIO_u8SetPinDirection>
	SPIconfig_t SPI_config ={TFT_SPI_INDEX,LEADING_CAPTURE,LEADING_RISING,MASTER,F_CLK_DIV_2,MSB,SELECT_ONE,MANAGMENT_ENABLE,FULL_DUPLEX,FORMAT_8_BIT
 8003398:	4b28      	ldr	r3, [pc, #160]	; (800343c <HTFT_voidInit+0xd8>)
 800339a:	463c      	mov	r4, r7
 800339c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800339e:	c407      	stmia	r4!, {r0, r1, r2}
 80033a0:	8023      	strh	r3, [r4, #0]
 80033a2:	3402      	adds	r4, #2
 80033a4:	0c1b      	lsrs	r3, r3, #16
 80033a6:	7023      	strb	r3, [r4, #0]
				                          ,RX_DMA_DISABLE ,TX_DMA_DISABLE,SS_OUTPUT_DISABLE ,RX_INTERRUPT_MASKED,TX_INTERRUPT_MASKED };
	MSPI_u8SetConfiguration(&SPI_config);
 80033a8:	463b      	mov	r3, r7
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7ff fe2c 	bl	8003008 <MSPI_u8SetConfiguration>

	MGPIO_u8SetPinValue   ( TFT_RESET_PIN , HIGH) ;
 80033b0:	2201      	movs	r2, #1
 80033b2:	2101      	movs	r1, #1
 80033b4:	2000      	movs	r0, #0
 80033b6:	f7fe fcb7 	bl	8001d28 <MGPIO_u8SetPinValue>
	STIMERS_voidDelayUS       ( TFT_RESET_DELAY_1 );
 80033ba:	2064      	movs	r0, #100	; 0x64
 80033bc:	f000 fa36 	bl	800382c <STIMERS_voidDelayUS>
	MGPIO_u8SetPinValue   ( TFT_RESET_PIN , LOW) ;
 80033c0:	2200      	movs	r2, #0
 80033c2:	2101      	movs	r1, #1
 80033c4:	2000      	movs	r0, #0
 80033c6:	f7fe fcaf 	bl	8001d28 <MGPIO_u8SetPinValue>
	STIMERS_voidDelayUS       ( TFT_RESET_DELAY_2 );
 80033ca:	2001      	movs	r0, #1
 80033cc:	f000 fa2e 	bl	800382c <STIMERS_voidDelayUS>
	MGPIO_u8SetPinValue   ( TFT_RESET_PIN , HIGH) ;
 80033d0:	2201      	movs	r2, #1
 80033d2:	2101      	movs	r1, #1
 80033d4:	2000      	movs	r0, #0
 80033d6:	f7fe fca7 	bl	8001d28 <MGPIO_u8SetPinValue>
	STIMERS_voidDelayUS       ( TFT_RESET_DELAY_3 );
 80033da:	2064      	movs	r0, #100	; 0x64
 80033dc:	f000 fa26 	bl	800382c <STIMERS_voidDelayUS>
	MGPIO_u8SetPinValue   ( TFT_RESET_PIN , LOW) ;
 80033e0:	2200      	movs	r2, #0
 80033e2:	2101      	movs	r1, #1
 80033e4:	2000      	movs	r0, #0
 80033e6:	f7fe fc9f 	bl	8001d28 <MGPIO_u8SetPinValue>
	STIMERS_voidDelayUS       ( TFT_RESET_DELAY_4 );
 80033ea:	2064      	movs	r0, #100	; 0x64
 80033ec:	f000 fa1e 	bl	800382c <STIMERS_voidDelayUS>
	MGPIO_u8SetPinValue   ( TFT_RESET_PIN , HIGH) ;
 80033f0:	2201      	movs	r2, #1
 80033f2:	2101      	movs	r1, #1
 80033f4:	2000      	movs	r0, #0
 80033f6:	f7fe fc97 	bl	8001d28 <MGPIO_u8SetPinValue>
	STIMERS_voidDelayUS       ( TFT_RESET_DELAY_5 );
 80033fa:	4811      	ldr	r0, [pc, #68]	; (8003440 <HTFT_voidInit+0xdc>)
 80033fc:	f000 fa16 	bl	800382c <STIMERS_voidDelayUS>
	
	HTFT_voidWriteCommand ( TFT_SLPOUT );
 8003400:	2011      	movs	r0, #17
 8003402:	f000 f9e5 	bl	80037d0 <HTFT_voidWriteCommand>
	STIMERS_voidDelayUS     ( TFT_SLPOUT_DELAY );
 8003406:	480f      	ldr	r0, [pc, #60]	; (8003444 <HTFT_voidInit+0xe0>)
 8003408:	f000 fa10 	bl	800382c <STIMERS_voidDelayUS>
	
	HTFT_voidWriteCommand ( TFT_COLMOD );
 800340c:	203a      	movs	r0, #58	; 0x3a
 800340e:	f000 f9df 	bl	80037d0 <HTFT_voidWriteCommand>
	HTFT_voidWriteData    ( TFT_COLMOD_DATA );
 8003412:	2005      	movs	r0, #5
 8003414:	f000 f9c7 	bl	80037a6 <HTFT_voidWriteData>
	
	HTFT_voidWriteCommand ( TFT_DISPON );
 8003418:	2029      	movs	r0, #41	; 0x29
 800341a:	f000 f9d9 	bl	80037d0 <HTFT_voidWriteCommand>
	STIMERS_voidDelayUS       ( TFT_DISPON_DELAY );
 800341e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003422:	f000 fa03 	bl	800382c <STIMERS_voidDelayUS>

	HTFT_voidWriteCommand( TFT_MADCTL );
 8003426:	2036      	movs	r0, #54	; 0x36
 8003428:	f000 f9d2 	bl	80037d0 <HTFT_voidWriteCommand>
	HTFT_voidWriteData   ( TFT_MADCTL_DATA );
 800342c:	20c0      	movs	r0, #192	; 0xc0
 800342e:	f000 f9ba 	bl	80037a6 <HTFT_voidWriteData>
	
} 
 8003432:	bf00      	nop
 8003434:	3714      	adds	r7, #20
 8003436:	46bd      	mov	sp, r7
 8003438:	bd90      	pop	{r4, r7, pc}
 800343a:	bf00      	nop
 800343c:	0800515c 	.word	0x0800515c
 8003440:	0001d4c0 	.word	0x0001d4c0
 8003444:	000249f0 	.word	0x000249f0

08003448 <HTFT_u8FillColor>:
 *
 *
 ******************************************************************************
 */
uint8_t     HTFT_u8FillColor  ( uint16_t  Copy_u16Color )
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	4603      	mov	r3, r0
 8003450:	80fb      	strh	r3, [r7, #6]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 8003452:	2301      	movs	r3, #1
 8003454:	737b      	strb	r3, [r7, #13]
	if ( 1 )
	{

		HTFT_voidWriteCommand( TFT_CASET );
 8003456:	202a      	movs	r0, #42	; 0x2a
 8003458:	f000 f9ba 	bl	80037d0 <HTFT_voidWriteCommand>
		HTFT_voidWriteData   ( 0 );
 800345c:	2000      	movs	r0, #0
 800345e:	f000 f9a2 	bl	80037a6 <HTFT_voidWriteData>
		HTFT_voidWriteData   ( 0 );
 8003462:	2000      	movs	r0, #0
 8003464:	f000 f99f 	bl	80037a6 <HTFT_voidWriteData>
		HTFT_voidWriteData   ( 0 );
 8003468:	2000      	movs	r0, #0
 800346a:	f000 f99c 	bl	80037a6 <HTFT_voidWriteData>
		HTFT_voidWriteData   ( TFT_XSIZE - 1 );
 800346e:	207f      	movs	r0, #127	; 0x7f
 8003470:	f000 f999 	bl	80037a6 <HTFT_voidWriteData>

		HTFT_voidWriteCommand( TFT_RASET );
 8003474:	202b      	movs	r0, #43	; 0x2b
 8003476:	f000 f9ab 	bl	80037d0 <HTFT_voidWriteCommand>
		HTFT_voidWriteData   ( 0 );
 800347a:	2000      	movs	r0, #0
 800347c:	f000 f993 	bl	80037a6 <HTFT_voidWriteData>
		HTFT_voidWriteData   ( 0 );
 8003480:	2000      	movs	r0, #0
 8003482:	f000 f990 	bl	80037a6 <HTFT_voidWriteData>
		HTFT_voidWriteData   ( 0 );
 8003486:	2000      	movs	r0, #0
 8003488:	f000 f98d 	bl	80037a6 <HTFT_voidWriteData>
		HTFT_voidWriteData   ( TFT_YSIZE - 1 );
 800348c:	209f      	movs	r0, #159	; 0x9f
 800348e:	f000 f98a 	bl	80037a6 <HTFT_voidWriteData>

		HTFT_voidWriteCommand( TFT_RAMWR );
 8003492:	202c      	movs	r0, #44	; 0x2c
 8003494:	f000 f99c 	bl	80037d0 <HTFT_voidWriteCommand>
		for ( uint16_t Local_u16Counter = 0 ; Local_u16Counter < (TFT_YSIZE * TFT_XSIZE) ; Local_u16Counter++ )
 8003498:	2300      	movs	r3, #0
 800349a:	81fb      	strh	r3, [r7, #14]
 800349c:	e00e      	b.n	80034bc <HTFT_u8FillColor+0x74>
		{
			HTFT_voidWriteData(  Copy_u16Color  >> 8 );
 800349e:	88fb      	ldrh	r3, [r7, #6]
 80034a0:	0a1b      	lsrs	r3, r3, #8
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	4618      	mov	r0, r3
 80034a8:	f000 f97d 	bl	80037a6 <HTFT_voidWriteData>
			HTFT_voidWriteData( (Copy_u16Color & 0x00FF)  );
 80034ac:	88fb      	ldrh	r3, [r7, #6]
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	4618      	mov	r0, r3
 80034b2:	f000 f978 	bl	80037a6 <HTFT_voidWriteData>
		for ( uint16_t Local_u16Counter = 0 ; Local_u16Counter < (TFT_YSIZE * TFT_XSIZE) ; Local_u16Counter++ )
 80034b6:	89fb      	ldrh	r3, [r7, #14]
 80034b8:	3301      	adds	r3, #1
 80034ba:	81fb      	strh	r3, [r7, #14]
 80034bc:	89fb      	ldrh	r3, [r7, #14]
 80034be:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80034c2:	d3ec      	bcc.n	800349e <HTFT_u8FillColor+0x56>
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
	}
	return Local_u8ErrorState ;
 80034c4:	7b7b      	ldrb	r3, [r7, #13]

}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <HTFT_u8DrawRectangle>:
 *
 *
 ******************************************************************************
 */
uint8_t     HTFT_u8DrawRectangle  (uint8_t Copy_u8StartX , uint8_t Copy_u8EndX , uint8_t Copy_u8StartY , uint8_t Copy_u8EndY , uint16_t  Copy_u16Color )
{
 80034ce:	b590      	push	{r4, r7, lr}
 80034d0:	b085      	sub	sp, #20
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	4604      	mov	r4, r0
 80034d6:	4608      	mov	r0, r1
 80034d8:	4611      	mov	r1, r2
 80034da:	461a      	mov	r2, r3
 80034dc:	4623      	mov	r3, r4
 80034de:	71fb      	strb	r3, [r7, #7]
 80034e0:	4603      	mov	r3, r0
 80034e2:	71bb      	strb	r3, [r7, #6]
 80034e4:	460b      	mov	r3, r1
 80034e6:	717b      	strb	r3, [r7, #5]
 80034e8:	4613      	mov	r3, r2
 80034ea:	713b      	strb	r3, [r7, #4]

	if( Copy_u8StartX > Copy_u8EndX )
 80034ec:	79fa      	ldrb	r2, [r7, #7]
 80034ee:	79bb      	ldrb	r3, [r7, #6]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d901      	bls.n	80034f8 <HTFT_u8DrawRectangle+0x2a>
	{
		Copy_u8StartX = 0 ;
 80034f4:	2300      	movs	r3, #0
 80034f6:	71fb      	strb	r3, [r7, #7]
	}
	if( Copy_u8StartY > Copy_u8EndY )
 80034f8:	797a      	ldrb	r2, [r7, #5]
 80034fa:	793b      	ldrb	r3, [r7, #4]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d901      	bls.n	8003504 <HTFT_u8DrawRectangle+0x36>
	{
		Copy_u8StartY = 0 ;
 8003500:	2300      	movs	r3, #0
 8003502:	717b      	strb	r3, [r7, #5]
	}
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 8003504:	2301      	movs	r3, #1
 8003506:	737b      	strb	r3, [r7, #13]
	if ( 1 )
	{
		uint8_t Local_u8Data ;

		uint16_t Local_u16Area = ( Copy_u8EndX - Copy_u8StartX + 1 ) * ( Copy_u8EndY - Copy_u8StartY + 1 ) ;
 8003508:	79ba      	ldrb	r2, [r7, #6]
 800350a:	79fb      	ldrb	r3, [r7, #7]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	3301      	adds	r3, #1
 8003510:	b29b      	uxth	r3, r3
 8003512:	7939      	ldrb	r1, [r7, #4]
 8003514:	797a      	ldrb	r2, [r7, #5]
 8003516:	1a8a      	subs	r2, r1, r2
 8003518:	3201      	adds	r2, #1
 800351a:	b292      	uxth	r2, r2
 800351c:	fb02 f303 	mul.w	r3, r2, r3
 8003520:	817b      	strh	r3, [r7, #10]

		HTFT_voidWriteCommand( TFT_CASET );
 8003522:	202a      	movs	r0, #42	; 0x2a
 8003524:	f000 f954 	bl	80037d0 <HTFT_voidWriteCommand>
		HTFT_voidWriteData   ( 0 );
 8003528:	2000      	movs	r0, #0
 800352a:	f000 f93c 	bl	80037a6 <HTFT_voidWriteData>
		HTFT_voidWriteData   ( Copy_u8StartX );
 800352e:	79fb      	ldrb	r3, [r7, #7]
 8003530:	4618      	mov	r0, r3
 8003532:	f000 f938 	bl	80037a6 <HTFT_voidWriteData>
		HTFT_voidWriteData   ( 0 );
 8003536:	2000      	movs	r0, #0
 8003538:	f000 f935 	bl	80037a6 <HTFT_voidWriteData>
		HTFT_voidWriteData   ( Copy_u8EndX );
 800353c:	79bb      	ldrb	r3, [r7, #6]
 800353e:	4618      	mov	r0, r3
 8003540:	f000 f931 	bl	80037a6 <HTFT_voidWriteData>

		HTFT_voidWriteCommand( TFT_RASET );
 8003544:	202b      	movs	r0, #43	; 0x2b
 8003546:	f000 f943 	bl	80037d0 <HTFT_voidWriteCommand>
		HTFT_voidWriteData   ( 0 );
 800354a:	2000      	movs	r0, #0
 800354c:	f000 f92b 	bl	80037a6 <HTFT_voidWriteData>
		HTFT_voidWriteData   ( Copy_u8StartY );
 8003550:	797b      	ldrb	r3, [r7, #5]
 8003552:	4618      	mov	r0, r3
 8003554:	f000 f927 	bl	80037a6 <HTFT_voidWriteData>
		HTFT_voidWriteData   ( 0 );
 8003558:	2000      	movs	r0, #0
 800355a:	f000 f924 	bl	80037a6 <HTFT_voidWriteData>
		HTFT_voidWriteData   ( Copy_u8EndY );
 800355e:	793b      	ldrb	r3, [r7, #4]
 8003560:	4618      	mov	r0, r3
 8003562:	f000 f920 	bl	80037a6 <HTFT_voidWriteData>

		HTFT_voidWriteCommand( TFT_RAMWR );
 8003566:	202c      	movs	r0, #44	; 0x2c
 8003568:	f000 f932 	bl	80037d0 <HTFT_voidWriteCommand>
		for ( uint16_t Local_u16Counter = 0 ; Local_u16Counter < Local_u16Area ; Local_u16Counter++ )
 800356c:	2300      	movs	r3, #0
 800356e:	81fb      	strh	r3, [r7, #14]
 8003570:	e010      	b.n	8003594 <HTFT_u8DrawRectangle+0xc6>
		{
			Local_u8Data = Copy_u16Color  >> 8 ;
 8003572:	8c3b      	ldrh	r3, [r7, #32]
 8003574:	0a1b      	lsrs	r3, r3, #8
 8003576:	b29b      	uxth	r3, r3
 8003578:	727b      	strb	r3, [r7, #9]
			HTFT_voidWriteData( Local_u8Data );
 800357a:	7a7b      	ldrb	r3, [r7, #9]
 800357c:	4618      	mov	r0, r3
 800357e:	f000 f912 	bl	80037a6 <HTFT_voidWriteData>
			Local_u8Data = Copy_u16Color & 0x00FF ;
 8003582:	8c3b      	ldrh	r3, [r7, #32]
 8003584:	727b      	strb	r3, [r7, #9]
			HTFT_voidWriteData( Local_u8Data );
 8003586:	7a7b      	ldrb	r3, [r7, #9]
 8003588:	4618      	mov	r0, r3
 800358a:	f000 f90c 	bl	80037a6 <HTFT_voidWriteData>
		for ( uint16_t Local_u16Counter = 0 ; Local_u16Counter < Local_u16Area ; Local_u16Counter++ )
 800358e:	89fb      	ldrh	r3, [r7, #14]
 8003590:	3301      	adds	r3, #1
 8003592:	81fb      	strh	r3, [r7, #14]
 8003594:	89fa      	ldrh	r2, [r7, #14]
 8003596:	897b      	ldrh	r3, [r7, #10]
 8003598:	429a      	cmp	r2, r3
 800359a:	d3ea      	bcc.n	8003572 <HTFT_u8DrawRectangle+0xa4>
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
	}
	return Local_u8ErrorState ;
 800359c:	7b7b      	ldrb	r3, [r7, #13]

}
 800359e:	4618      	mov	r0, r3
 80035a0:	3714      	adds	r7, #20
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd90      	pop	{r4, r7, pc}
	...

080035a8 <HTFT_u8DrawChar>:
 *
 *
 ******************************************************************************
 */
uint8_t     HTFT_u8DrawChar (uint8_t Copy_u8Char, uint8_t Copy_u8X, uint8_t Copy_u8Y, uint8_t Copy_u8Size,uint16_t Copy_u16Color)
{
 80035a8:	b590      	push	{r4, r7, lr}
 80035aa:	b087      	sub	sp, #28
 80035ac:	af02      	add	r7, sp, #8
 80035ae:	4604      	mov	r4, r0
 80035b0:	4608      	mov	r0, r1
 80035b2:	4611      	mov	r1, r2
 80035b4:	461a      	mov	r2, r3
 80035b6:	4623      	mov	r3, r4
 80035b8:	71fb      	strb	r3, [r7, #7]
 80035ba:	4603      	mov	r3, r0
 80035bc:	71bb      	strb	r3, [r7, #6]
 80035be:	460b      	mov	r3, r1
 80035c0:	717b      	strb	r3, [r7, #5]
 80035c2:	4613      	mov	r3, r2
 80035c4:	713b      	strb	r3, [r7, #4]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 80035c6:	2301      	movs	r3, #1
 80035c8:	73fb      	strb	r3, [r7, #15]
	if ( Copy_u8Char!=32 )
 80035ca:	79fb      	ldrb	r3, [r7, #7]
 80035cc:	2b20      	cmp	r3, #32
 80035ce:	d04b      	beq.n	8003668 <HTFT_u8DrawChar+0xc0>
	{
		Copy_u8Char -=48;
 80035d0:	79fb      	ldrb	r3, [r7, #7]
 80035d2:	3b30      	subs	r3, #48	; 0x30
 80035d4:	71fb      	strb	r3, [r7, #7]
		for(uint8_t Local_u8Counter1 =0 ; Local_u8Counter1<(8* Copy_u8Size);Local_u8Counter1++)
 80035d6:	2300      	movs	r3, #0
 80035d8:	73bb      	strb	r3, [r7, #14]
 80035da:	e03f      	b.n	800365c <HTFT_u8DrawChar+0xb4>
		{
			for(uint8_t Local_u8Counter2 =0;Local_u8Counter2<(5*Copy_u8Size);Local_u8Counter2++)
 80035dc:	2300      	movs	r3, #0
 80035de:	737b      	strb	r3, [r7, #13]
 80035e0:	e032      	b.n	8003648 <HTFT_u8DrawChar+0xa0>
			{
				if (Char_Au8Array[Copy_u8Char][Local_u8Counter1/Copy_u8Size] >>(Local_u8Counter2/Copy_u8Size) & 1)
 80035e2:	79fb      	ldrb	r3, [r7, #7]
 80035e4:	7bb9      	ldrb	r1, [r7, #14]
 80035e6:	793a      	ldrb	r2, [r7, #4]
 80035e8:	fbb1 f2f2 	udiv	r2, r1, r2
 80035ec:	b2d2      	uxtb	r2, r2
 80035ee:	4611      	mov	r1, r2
 80035f0:	4a21      	ldr	r2, [pc, #132]	; (8003678 <HTFT_u8DrawChar+0xd0>)
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	4413      	add	r3, r2
 80035f6:	440b      	add	r3, r1
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	4619      	mov	r1, r3
 80035fc:	7b7a      	ldrb	r2, [r7, #13]
 80035fe:	793b      	ldrb	r3, [r7, #4]
 8003600:	fbb2 f3f3 	udiv	r3, r2, r3
 8003604:	b2db      	uxtb	r3, r3
 8003606:	fa41 f303 	asr.w	r3, r1, r3
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b00      	cmp	r3, #0
 8003610:	d017      	beq.n	8003642 <HTFT_u8DrawChar+0x9a>
				{
					HTFT_u8DrawRectangle (  Copy_u8X+(Local_u8Counter2),  Copy_u8X+(Local_u8Counter2)+1,  Copy_u8Y+(Local_u8Counter1),  Copy_u8Y+(Local_u8Counter1), Copy_u16Color);
 8003612:	79ba      	ldrb	r2, [r7, #6]
 8003614:	7b7b      	ldrb	r3, [r7, #13]
 8003616:	4413      	add	r3, r2
 8003618:	b2d8      	uxtb	r0, r3
 800361a:	79ba      	ldrb	r2, [r7, #6]
 800361c:	7b7b      	ldrb	r3, [r7, #13]
 800361e:	4413      	add	r3, r2
 8003620:	b2db      	uxtb	r3, r3
 8003622:	3301      	adds	r3, #1
 8003624:	b2d9      	uxtb	r1, r3
 8003626:	797a      	ldrb	r2, [r7, #5]
 8003628:	7bbb      	ldrb	r3, [r7, #14]
 800362a:	4413      	add	r3, r2
 800362c:	b2dc      	uxtb	r4, r3
 800362e:	797a      	ldrb	r2, [r7, #5]
 8003630:	7bbb      	ldrb	r3, [r7, #14]
 8003632:	4413      	add	r3, r2
 8003634:	b2da      	uxtb	r2, r3
 8003636:	8c3b      	ldrh	r3, [r7, #32]
 8003638:	9300      	str	r3, [sp, #0]
 800363a:	4613      	mov	r3, r2
 800363c:	4622      	mov	r2, r4
 800363e:	f7ff ff46 	bl	80034ce <HTFT_u8DrawRectangle>
			for(uint8_t Local_u8Counter2 =0;Local_u8Counter2<(5*Copy_u8Size);Local_u8Counter2++)
 8003642:	7b7b      	ldrb	r3, [r7, #13]
 8003644:	3301      	adds	r3, #1
 8003646:	737b      	strb	r3, [r7, #13]
 8003648:	7b79      	ldrb	r1, [r7, #13]
 800364a:	793a      	ldrb	r2, [r7, #4]
 800364c:	4613      	mov	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4413      	add	r3, r2
 8003652:	4299      	cmp	r1, r3
 8003654:	dbc5      	blt.n	80035e2 <HTFT_u8DrawChar+0x3a>
		for(uint8_t Local_u8Counter1 =0 ; Local_u8Counter1<(8* Copy_u8Size);Local_u8Counter1++)
 8003656:	7bbb      	ldrb	r3, [r7, #14]
 8003658:	3301      	adds	r3, #1
 800365a:	73bb      	strb	r3, [r7, #14]
 800365c:	7bba      	ldrb	r2, [r7, #14]
 800365e:	793b      	ldrb	r3, [r7, #4]
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	429a      	cmp	r2, r3
 8003664:	dbba      	blt.n	80035dc <HTFT_u8DrawChar+0x34>
 8003666:	e001      	b.n	800366c <HTFT_u8DrawChar+0xc4>
			}
		}
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
 8003668:	2300      	movs	r3, #0
 800366a:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState ;
 800366c:	7bfb      	ldrb	r3, [r7, #15]
}
 800366e:	4618      	mov	r0, r3
 8003670:	3714      	adds	r7, #20
 8003672:	46bd      	mov	sp, r7
 8003674:	bd90      	pop	{r4, r7, pc}
 8003676:	bf00      	nop
 8003678:	080051cc 	.word	0x080051cc

0800367c <HTFT_u8DrawText>:
 *
 *
 ******************************************************************************
 */
uint8_t     HTFT_u8DrawText (uint8_t* Copy_u8Text, uint8_t Copy_u8X, uint8_t Copy_u8Y, uint8_t Copy_u8Size,uint16_t Copy_u16Color)
{
 800367c:	b590      	push	{r4, r7, lr}
 800367e:	b087      	sub	sp, #28
 8003680:	af02      	add	r7, sp, #8
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	4608      	mov	r0, r1
 8003686:	4611      	mov	r1, r2
 8003688:	461a      	mov	r2, r3
 800368a:	4603      	mov	r3, r0
 800368c:	70fb      	strb	r3, [r7, #3]
 800368e:	460b      	mov	r3, r1
 8003690:	70bb      	strb	r3, [r7, #2]
 8003692:	4613      	mov	r3, r2
 8003694:	707b      	strb	r3, [r7, #1]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 8003696:	2301      	movs	r3, #1
 8003698:	73fb      	strb	r3, [r7, #15]
	if ( 1 )
	{
		for(; *Copy_u8Text; Copy_u8Text++ )
 800369a:	e01d      	b.n	80036d8 <HTFT_u8DrawText+0x5c>
		{
			if(*Copy_u8Text==32)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	2b20      	cmp	r3, #32
 80036a2:	d103      	bne.n	80036ac <HTFT_u8DrawText+0x30>
			{
				Copy_u8X-=3;
 80036a4:	78fb      	ldrb	r3, [r7, #3]
 80036a6:	3b03      	subs	r3, #3
 80036a8:	70fb      	strb	r3, [r7, #3]
 80036aa:	e012      	b.n	80036d2 <HTFT_u8DrawText+0x56>
			}
			else
			{
				Copy_u8X-=6*Copy_u8Size;
 80036ac:	787b      	ldrb	r3, [r7, #1]
 80036ae:	461a      	mov	r2, r3
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	b2da      	uxtb	r2, r3
 80036b8:	78fb      	ldrb	r3, [r7, #3]
 80036ba:	4413      	add	r3, r2
 80036bc:	70fb      	strb	r3, [r7, #3]
				HTFT_u8DrawChar ( *Copy_u8Text,   Copy_u8X,  Copy_u8Y,  Copy_u8Size, Copy_u16Color);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	7818      	ldrb	r0, [r3, #0]
 80036c2:	787c      	ldrb	r4, [r7, #1]
 80036c4:	78ba      	ldrb	r2, [r7, #2]
 80036c6:	78f9      	ldrb	r1, [r7, #3]
 80036c8:	8c3b      	ldrh	r3, [r7, #32]
 80036ca:	9300      	str	r3, [sp, #0]
 80036cc:	4623      	mov	r3, r4
 80036ce:	f7ff ff6b 	bl	80035a8 <HTFT_u8DrawChar>
		for(; *Copy_u8Text; Copy_u8Text++ )
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	3301      	adds	r3, #1
 80036d6:	607b      	str	r3, [r7, #4]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1dd      	bne.n	800369c <HTFT_u8DrawText+0x20>
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
	}
	return Local_u8ErrorState ;
 80036e0:	7bfb      	ldrb	r3, [r7, #15]

}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd90      	pop	{r4, r7, pc}

080036ea <HTFT_u8DrawFrameu16>:
 *
 *
 ******************************************************************************
 */
uint8_t     HTFT_u8DrawFrameu16 ( uint16_t * Copy_pu16Frame,uint8_t Copy_u8X, uint8_t Copy_u8Y,uint8_t Copy_u8Width,uint8_t Copy_u8Height,uint8_t Copy_u8Size, uint16_t Copy_u16Color)
{
 80036ea:	b590      	push	{r4, r7, lr}
 80036ec:	b087      	sub	sp, #28
 80036ee:	af02      	add	r7, sp, #8
 80036f0:	6078      	str	r0, [r7, #4]
 80036f2:	4608      	mov	r0, r1
 80036f4:	4611      	mov	r1, r2
 80036f6:	461a      	mov	r2, r3
 80036f8:	4603      	mov	r3, r0
 80036fa:	70fb      	strb	r3, [r7, #3]
 80036fc:	460b      	mov	r3, r1
 80036fe:	70bb      	strb	r3, [r7, #2]
 8003700:	4613      	mov	r3, r2
 8003702:	707b      	strb	r3, [r7, #1]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 8003704:	2301      	movs	r3, #1
 8003706:	737b      	strb	r3, [r7, #13]
	if ( 1 )
	{
		for(uint8_t Local_u8Counter1 =0 ; Local_u8Counter1<(Copy_u8Height*Copy_u8Size);Local_u8Counter1++)
 8003708:	2300      	movs	r3, #0
 800370a:	73fb      	strb	r3, [r7, #15]
 800370c:	e03d      	b.n	800378a <HTFT_u8DrawFrameu16+0xa0>
		{
			for(uint8_t Local_u8Counter2 =0;Local_u8Counter2<Copy_u8Width*Copy_u8Size;Local_u8Counter2++)
 800370e:	2300      	movs	r3, #0
 8003710:	73bb      	strb	r3, [r7, #14]
 8003712:	e02f      	b.n	8003774 <HTFT_u8DrawFrameu16+0x8a>
			{
				if (GET_BIT(Copy_pu16Frame[Local_u8Counter1/Copy_u8Size],Local_u8Counter2/Copy_u8Size) )
 8003714:	7bfa      	ldrb	r2, [r7, #15]
 8003716:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800371a:	fbb2 f3f3 	udiv	r3, r2, r3
 800371e:	b2db      	uxtb	r3, r3
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	4413      	add	r3, r2
 8003726:	881b      	ldrh	r3, [r3, #0]
 8003728:	4619      	mov	r1, r3
 800372a:	7bba      	ldrb	r2, [r7, #14]
 800372c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003730:	fbb2 f3f3 	udiv	r3, r2, r3
 8003734:	b2db      	uxtb	r3, r3
 8003736:	fa41 f303 	asr.w	r3, r1, r3
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b00      	cmp	r3, #0
 8003740:	d015      	beq.n	800376e <HTFT_u8DrawFrameu16+0x84>
				{
					HTFT_u8DrawRectangle (  Copy_u8X+Local_u8Counter2,  Copy_u8X+Local_u8Counter2,  Copy_u8Y+(Local_u8Counter1),  Copy_u8Y+(Local_u8Counter1), Copy_u16Color);
 8003742:	78fa      	ldrb	r2, [r7, #3]
 8003744:	7bbb      	ldrb	r3, [r7, #14]
 8003746:	4413      	add	r3, r2
 8003748:	b2d8      	uxtb	r0, r3
 800374a:	78fa      	ldrb	r2, [r7, #3]
 800374c:	7bbb      	ldrb	r3, [r7, #14]
 800374e:	4413      	add	r3, r2
 8003750:	b2d9      	uxtb	r1, r3
 8003752:	78ba      	ldrb	r2, [r7, #2]
 8003754:	7bfb      	ldrb	r3, [r7, #15]
 8003756:	4413      	add	r3, r2
 8003758:	b2dc      	uxtb	r4, r3
 800375a:	78ba      	ldrb	r2, [r7, #2]
 800375c:	7bfb      	ldrb	r3, [r7, #15]
 800375e:	4413      	add	r3, r2
 8003760:	b2da      	uxtb	r2, r3
 8003762:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	4613      	mov	r3, r2
 8003768:	4622      	mov	r2, r4
 800376a:	f7ff feb0 	bl	80034ce <HTFT_u8DrawRectangle>
			for(uint8_t Local_u8Counter2 =0;Local_u8Counter2<Copy_u8Width*Copy_u8Size;Local_u8Counter2++)
 800376e:	7bbb      	ldrb	r3, [r7, #14]
 8003770:	3301      	adds	r3, #1
 8003772:	73bb      	strb	r3, [r7, #14]
 8003774:	7bba      	ldrb	r2, [r7, #14]
 8003776:	787b      	ldrb	r3, [r7, #1]
 8003778:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800377c:	fb01 f303 	mul.w	r3, r1, r3
 8003780:	429a      	cmp	r2, r3
 8003782:	dbc7      	blt.n	8003714 <HTFT_u8DrawFrameu16+0x2a>
		for(uint8_t Local_u8Counter1 =0 ; Local_u8Counter1<(Copy_u8Height*Copy_u8Size);Local_u8Counter1++)
 8003784:	7bfb      	ldrb	r3, [r7, #15]
 8003786:	3301      	adds	r3, #1
 8003788:	73fb      	strb	r3, [r7, #15]
 800378a:	7bfa      	ldrb	r2, [r7, #15]
 800378c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003790:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8003794:	fb01 f303 	mul.w	r3, r1, r3
 8003798:	429a      	cmp	r2, r3
 800379a:	dbb8      	blt.n	800370e <HTFT_u8DrawFrameu16+0x24>
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
	}
	return Local_u8ErrorState ;
 800379c:	7b7b      	ldrb	r3, [r7, #13]
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3714      	adds	r7, #20
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd90      	pop	{r4, r7, pc}

080037a6 <HTFT_voidWriteData>:

/*************************************************************************************************************************************/
/********************************************************* Static Functions implementations ******************************************/
/*************************************************************************************************************************************/
static void HTFT_voidWriteData ( uint8_t Copy_u8Data )
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b084      	sub	sp, #16
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	4603      	mov	r3, r0
 80037ae:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8Temp ;
	MGPIO_u8SetPinValue( TFT_A0_PIN , HIGH ) ;
 80037b0:	2201      	movs	r2, #1
 80037b2:	2104      	movs	r1, #4
 80037b4:	2000      	movs	r0, #0
 80037b6:	f7fe fab7 	bl	8001d28 <MGPIO_u8SetPinValue>
	MSPI_u8SendReceiveSynch ( TFT_SPI_INDEX,Copy_u8Data , &Local_u8Temp ) ;
 80037ba:	f107 020f 	add.w	r2, r7, #15
 80037be:	79fb      	ldrb	r3, [r7, #7]
 80037c0:	4619      	mov	r1, r3
 80037c2:	2000      	movs	r0, #0
 80037c4:	f7ff fcf2 	bl	80031ac <MSPI_u8SendReceiveSynch>

}
 80037c8:	bf00      	nop
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <HTFT_voidWriteCommand>:
static void HTFT_voidWriteCommand ( uint8_t Copy_u8Command )
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	4603      	mov	r3, r0
 80037d8:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8Temp ;
	MGPIO_u8SetPinValue( TFT_A0_PIN , LOW) ;
 80037da:	2200      	movs	r2, #0
 80037dc:	2104      	movs	r1, #4
 80037de:	2000      	movs	r0, #0
 80037e0:	f7fe faa2 	bl	8001d28 <MGPIO_u8SetPinValue>
	MSPI_u8SendReceiveSynch (TFT_SPI_INDEX ,Copy_u8Command , &Local_u8Temp ) ;
 80037e4:	f107 020f 	add.w	r2, r7, #15
 80037e8:	79fb      	ldrb	r3, [r7, #7]
 80037ea:	4619      	mov	r1, r3
 80037ec:	2000      	movs	r0, #0
 80037ee:	f7ff fcdd 	bl	80031ac <MSPI_u8SendReceiveSynch>

}
 80037f2:	bf00      	nop
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <STIMERS_voidDelayMS>:
 *   This Function not Depend on Any timer , This Dumb Function
 *
 ******************************************************************************
 */
void STIMERS_voidDelayMS(uint32_t Copy_u32Milliseconds)
{
 80037fa:	b480      	push	{r7}
 80037fc:	b085      	sub	sp, #20
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
	for(uint32_t Local_u8Counter = 0; Local_u8Counter < ( Copy_u32Milliseconds * 550) ; Local_u8Counter ++)
 8003802:	2300      	movs	r3, #0
 8003804:	60fb      	str	r3, [r7, #12]
 8003806:	e003      	b.n	8003810 <STIMERS_voidDelayMS+0x16>
	{
		asm("NOP");
 8003808:	bf00      	nop
	for(uint32_t Local_u8Counter = 0; Local_u8Counter < ( Copy_u32Milliseconds * 550) ; Local_u8Counter ++)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	3301      	adds	r3, #1
 800380e:	60fb      	str	r3, [r7, #12]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f240 2226 	movw	r2, #550	; 0x226
 8003816:	fb02 f303 	mul.w	r3, r2, r3
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	429a      	cmp	r2, r3
 800381e:	d3f3      	bcc.n	8003808 <STIMERS_voidDelayMS+0xe>
	}
}
 8003820:	bf00      	nop
 8003822:	bf00      	nop
 8003824:	3714      	adds	r7, #20
 8003826:	46bd      	mov	sp, r7
 8003828:	bc80      	pop	{r7}
 800382a:	4770      	bx	lr

0800382c <STIMERS_voidDelayUS>:
 *   This Function not Depend on Any timer , This Dumb Function
 *
 ******************************************************************************
 */
void STIMERS_voidDelayUS(uint32_t Copy_u32Microseconds)
{
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
	for(uint32_t Local_u8Counter = 0; Local_u8Counter < ( Copy_u32Microseconds ) ; Local_u8Counter ++)
 8003834:	2300      	movs	r3, #0
 8003836:	60fb      	str	r3, [r7, #12]
 8003838:	e003      	b.n	8003842 <STIMERS_voidDelayUS+0x16>
	{
		asm("NOP");
 800383a:	bf00      	nop
	for(uint32_t Local_u8Counter = 0; Local_u8Counter < ( Copy_u32Microseconds ) ; Local_u8Counter ++)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	3301      	adds	r3, #1
 8003840:	60fb      	str	r3, [r7, #12]
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	429a      	cmp	r2, r3
 8003848:	d3f7      	bcc.n	800383a <STIMERS_voidDelayUS+0xe>
	}
}
 800384a:	bf00      	nop
 800384c:	bf00      	nop
 800384e:	3714      	adds	r7, #20
 8003850:	46bd      	mov	sp, r7
 8003852:	bc80      	pop	{r7}
 8003854:	4770      	bx	lr
	...

08003858 <STIMERS_u8GeneratePWM>:
 *  this Function set Prescaler  1024
 *
 ******************************************************************************
 */
uint8_t  STIMERS_u8GeneratePWM ( GPTIMERindex_t Copy_GPTIMERindex ,  Channelindex_t Copy_Channelindex , uint32_t Copy_u32frequencyValue , uint8_t Copy_u8DutyCycleValue )
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
 800385e:	603a      	str	r2, [r7, #0]
 8003860:	461a      	mov	r2, r3
 8003862:	4603      	mov	r3, r0
 8003864:	71fb      	strb	r3, [r7, #7]
 8003866:	460b      	mov	r3, r1
 8003868:	71bb      	strb	r3, [r7, #6]
 800386a:	4613      	mov	r3, r2
 800386c:	717b      	strb	r3, [r7, #5]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 800386e:	2301      	movs	r3, #1
 8003870:	75fb      	strb	r3, [r7, #23]
	if ( Copy_GPTIMERindex <= TMR_5   )
 8003872:	79fb      	ldrb	r3, [r7, #7]
 8003874:	2b03      	cmp	r3, #3
 8003876:	d848      	bhi.n	800390a <STIMERS_u8GeneratePWM+0xb2>
	{
		 float AutoReload   = (float)( 7812.5 /    (Copy_u32frequencyValue));
 8003878:	6838      	ldr	r0, [r7, #0]
 800387a:	f7fc fdbb 	bl	80003f4 <__aeabi_ui2d>
 800387e:	4602      	mov	r2, r0
 8003880:	460b      	mov	r3, r1
 8003882:	a125      	add	r1, pc, #148	; (adr r1, 8003918 <STIMERS_u8GeneratePWM+0xc0>)
 8003884:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003888:	f7fc ff58 	bl	800073c <__aeabi_ddiv>
 800388c:	4602      	mov	r2, r0
 800388e:	460b      	mov	r3, r1
 8003890:	4610      	mov	r0, r2
 8003892:	4619      	mov	r1, r3
 8003894:	f7fd f83a 	bl	800090c <__aeabi_d2f>
 8003898:	4603      	mov	r3, r0
 800389a:	613b      	str	r3, [r7, #16]
		 float CompareValue = (float)((Copy_u8DutyCycleValue+1)*AutoReload/(100));
 800389c:	797b      	ldrb	r3, [r7, #5]
 800389e:	3301      	adds	r3, #1
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7fd f93d 	bl	8000b20 <__aeabi_i2f>
 80038a6:	4603      	mov	r3, r0
 80038a8:	6939      	ldr	r1, [r7, #16]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fd f98c 	bl	8000bc8 <__aeabi_fmul>
 80038b0:	4603      	mov	r3, r0
 80038b2:	491b      	ldr	r1, [pc, #108]	; (8003920 <STIMERS_u8GeneratePWM+0xc8>)
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7fd fa3b 	bl	8000d30 <__aeabi_fdiv>
 80038ba:	4603      	mov	r3, r0
 80038bc:	60fb      	str	r3, [r7, #12]

		 MGPTIMER_u8SetPrescaler    ( Copy_GPTIMERindex , 1024);
 80038be:	79fb      	ldrb	r3, [r7, #7]
 80038c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7fe facd 	bl	8001e64 <MGPTIMER_u8SetPrescaler>
		 MGPTIMER_u8SetAutoReload   ( Copy_GPTIMERindex , (uint16_t)AutoReload );
 80038ca:	6938      	ldr	r0, [r7, #16]
 80038cc:	f7fd facc 	bl	8000e68 <__aeabi_f2uiz>
 80038d0:	4603      	mov	r3, r0
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	79fb      	ldrb	r3, [r7, #7]
 80038d6:	4611      	mov	r1, r2
 80038d8:	4618      	mov	r0, r3
 80038da:	f7fe fae3 	bl	8001ea4 <MGPTIMER_u8SetAutoReload>
		 MGPTIMER_u8SetChannelOutput( Copy_GPTIMERindex , Copy_Channelindex ,  OCM_PWM_MODE1 , OCPE_ENABLE  );
 80038de:	79b9      	ldrb	r1, [r7, #6]
 80038e0:	79f8      	ldrb	r0, [r7, #7]
 80038e2:	2301      	movs	r3, #1
 80038e4:	2206      	movs	r2, #6
 80038e6:	f7fe fafb 	bl	8001ee0 <MGPTIMER_u8SetChannelOutput>
		 MGPTIMER_u8SetCompareValue ( Copy_GPTIMERindex , Copy_Channelindex , (uint16_t)CompareValue);
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f7fd fabc 	bl	8000e68 <__aeabi_f2uiz>
 80038f0:	4603      	mov	r3, r0
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	79b9      	ldrb	r1, [r7, #6]
 80038f6:	79fb      	ldrb	r3, [r7, #7]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7fe fba9 	bl	8002050 <MGPTIMER_u8SetCompareValue>
		 MGPTIMER_u8CounterStatus   ( Copy_GPTIMERindex , COUNTER_ENABLE );
 80038fe:	79fb      	ldrb	r3, [r7, #7]
 8003900:	2101      	movs	r1, #1
 8003902:	4618      	mov	r0, r3
 8003904:	f7fe fa7a 	bl	8001dfc <MGPTIMER_u8CounterStatus>
 8003908:	e001      	b.n	800390e <STIMERS_u8GeneratePWM+0xb6>
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
 800390a:	2300      	movs	r3, #0
 800390c:	75fb      	strb	r3, [r7, #23]
	}
	return Local_u8ErrorState ;
 800390e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003910:	4618      	mov	r0, r3
 8003912:	3718      	adds	r7, #24
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	00000000 	.word	0x00000000
 800391c:	40be8480 	.word	0x40be8480
 8003920:	42c80000 	.word	0x42c80000

08003924 <MUSART_u8SetConfiguration>:
 *
 *
 ******************************************************************************
 */
uint8_t MUSART_u8SetConfiguration ( const USARTconfig_t* USARTconfig )
{
 8003924:	b5b0      	push	{r4, r5, r7, lr}
 8003926:	b088      	sub	sp, #32
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK;
 800392c:	2301      	movs	r3, #1
 800392e:	77fb      	strb	r3, [r7, #31]
	if (  USARTconfig !=NULL )
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	f000 81e1 	beq.w	8003cfa <MUSART_u8SetConfiguration+0x3d6>
	{
		/*************************************************************************************************************************************/
		/********************************************** Clear Flags ********************************************************************/
		MUSART_voidClearFlags(USARTconfig->USARTindex) ;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	4618      	mov	r0, r3
 800393e:	f000 fb4b 	bl	8003fd8 <MUSART_voidClearFlags>
		/********************************************** Configuration ******************************************************************/
		USART_Index[USARTconfig->USARTindex] -> CR1 &=~ (USART_RE_MASK << (USART_CR1_RE));
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	461a      	mov	r2, r3
 8003948:	4ba7      	ldr	r3, [pc, #668]	; (8003be8 <MUSART_u8SetConfiguration+0x2c4>)
 800394a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800394e:	68da      	ldr	r2, [r3, #12]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	4619      	mov	r1, r3
 8003956:	4ba4      	ldr	r3, [pc, #656]	; (8003be8 <MUSART_u8SetConfiguration+0x2c4>)
 8003958:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800395c:	f022 0204 	bic.w	r2, r2, #4
 8003960:	60da      	str	r2, [r3, #12]
		USART_Index[USARTconfig->USARTindex] -> CR1 |=  (USARTconfig->Receiver << (USART_CR1_RE));
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	461a      	mov	r2, r3
 8003968:	4b9f      	ldr	r3, [pc, #636]	; (8003be8 <MUSART_u8SetConfiguration+0x2c4>)
 800396a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800396e:	68da      	ldr	r2, [r3, #12]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	785b      	ldrb	r3, [r3, #1]
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	4619      	mov	r1, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	4618      	mov	r0, r3
 800397e:	4b9a      	ldr	r3, [pc, #616]	; (8003be8 <MUSART_u8SetConfiguration+0x2c4>)
 8003980:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8003984:	430a      	orrs	r2, r1
 8003986:	60da      	str	r2, [r3, #12]

		USART_Index[USARTconfig->USARTindex] -> CR1 &=~ (USART_TE_MASK << (USART_CR1_TE));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	461a      	mov	r2, r3
 800398e:	4b96      	ldr	r3, [pc, #600]	; (8003be8 <MUSART_u8SetConfiguration+0x2c4>)
 8003990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003994:	68da      	ldr	r2, [r3, #12]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	4619      	mov	r1, r3
 800399c:	4b92      	ldr	r3, [pc, #584]	; (8003be8 <MUSART_u8SetConfiguration+0x2c4>)
 800399e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80039a2:	f022 0208 	bic.w	r2, r2, #8
 80039a6:	60da      	str	r2, [r3, #12]
		USART_Index[USARTconfig->USARTindex] -> CR1 |=  (USARTconfig->Transmitter << (USART_CR1_TE));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	461a      	mov	r2, r3
 80039ae:	4b8e      	ldr	r3, [pc, #568]	; (8003be8 <MUSART_u8SetConfiguration+0x2c4>)
 80039b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039b4:	68da      	ldr	r2, [r3, #12]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	789b      	ldrb	r3, [r3, #2]
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	4619      	mov	r1, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	4618      	mov	r0, r3
 80039c4:	4b88      	ldr	r3, [pc, #544]	; (8003be8 <MUSART_u8SetConfiguration+0x2c4>)
 80039c6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	60da      	str	r2, [r3, #12]

		USART_Index[USARTconfig->USARTindex] -> CR1 &=~ (USART_RXNEIE_MASK << (USART_CR1_RXNEIE));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	461a      	mov	r2, r3
 80039d4:	4b84      	ldr	r3, [pc, #528]	; (8003be8 <MUSART_u8SetConfiguration+0x2c4>)
 80039d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039da:	68da      	ldr	r2, [r3, #12]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	4619      	mov	r1, r3
 80039e2:	4b81      	ldr	r3, [pc, #516]	; (8003be8 <MUSART_u8SetConfiguration+0x2c4>)
 80039e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80039e8:	f022 0220 	bic.w	r2, r2, #32
 80039ec:	60da      	str	r2, [r3, #12]
		USART_Index[USARTconfig->USARTindex] -> CR1 |=  (USARTconfig->RXNEinterrupt << (USART_CR1_RXNEIE));
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	461a      	mov	r2, r3
 80039f4:	4b7c      	ldr	r3, [pc, #496]	; (8003be8 <MUSART_u8SetConfiguration+0x2c4>)
 80039f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039fa:	68da      	ldr	r2, [r3, #12]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	78db      	ldrb	r3, [r3, #3]
 8003a00:	015b      	lsls	r3, r3, #5
 8003a02:	4619      	mov	r1, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	4b77      	ldr	r3, [pc, #476]	; (8003be8 <MUSART_u8SetConfiguration+0x2c4>)
 8003a0c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8003a10:	430a      	orrs	r2, r1
 8003a12:	60da      	str	r2, [r3, #12]

		USART_Index[USARTconfig->USARTindex] -> CR1 &=~ (USART_TCIE_MASK << (USART_CR1_TCIE));
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	461a      	mov	r2, r3
 8003a1a:	4b73      	ldr	r3, [pc, #460]	; (8003be8 <MUSART_u8SetConfiguration+0x2c4>)
 8003a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a20:	68da      	ldr	r2, [r3, #12]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	4619      	mov	r1, r3
 8003a28:	4b6f      	ldr	r3, [pc, #444]	; (8003be8 <MUSART_u8SetConfiguration+0x2c4>)
 8003a2a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003a2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a32:	60da      	str	r2, [r3, #12]
		USART_Index[USARTconfig->USARTindex] -> CR1 |=  (USARTconfig->TransmetCompleteInterrupt << (USART_CR1_TCIE));
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	461a      	mov	r2, r3
 8003a3a:	4b6b      	ldr	r3, [pc, #428]	; (8003be8 <MUSART_u8SetConfiguration+0x2c4>)
 8003a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a40:	68da      	ldr	r2, [r3, #12]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	791b      	ldrb	r3, [r3, #4]
 8003a46:	019b      	lsls	r3, r3, #6
 8003a48:	4619      	mov	r1, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	4b65      	ldr	r3, [pc, #404]	; (8003be8 <MUSART_u8SetConfiguration+0x2c4>)
 8003a52:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8003a56:	430a      	orrs	r2, r1
 8003a58:	60da      	str	r2, [r3, #12]

		USART_Index[USARTconfig->USARTindex] -> CR1 &=~ (USART_TXEIE_MASK << (USART_CR1_TXEIE));
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	461a      	mov	r2, r3
 8003a60:	4b61      	ldr	r3, [pc, #388]	; (8003be8 <MUSART_u8SetConfiguration+0x2c4>)
 8003a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a66:	68da      	ldr	r2, [r3, #12]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4b5e      	ldr	r3, [pc, #376]	; (8003be8 <MUSART_u8SetConfiguration+0x2c4>)
 8003a70:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003a74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a78:	60da      	str	r2, [r3, #12]
		USART_Index[USARTconfig->USARTindex] -> CR1 |=  (USARTconfig->TXEinterrupt << (USART_CR1_TXEIE));
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	4b59      	ldr	r3, [pc, #356]	; (8003be8 <MUSART_u8SetConfiguration+0x2c4>)
 8003a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a86:	68da      	ldr	r2, [r3, #12]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	795b      	ldrb	r3, [r3, #5]
 8003a8c:	01db      	lsls	r3, r3, #7
 8003a8e:	4619      	mov	r1, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	4618      	mov	r0, r3
 8003a96:	4b54      	ldr	r3, [pc, #336]	; (8003be8 <MUSART_u8SetConfiguration+0x2c4>)
 8003a98:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	60da      	str	r2, [r3, #12]

		USART_Index[USARTconfig->USARTindex] -> CR1 &=~ (USART_PS_MASK << (USART_CR1_PS));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	4b50      	ldr	r3, [pc, #320]	; (8003be8 <MUSART_u8SetConfiguration+0x2c4>)
 8003aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003aac:	68da      	ldr	r2, [r3, #12]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	4b4c      	ldr	r3, [pc, #304]	; (8003be8 <MUSART_u8SetConfiguration+0x2c4>)
 8003ab6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003aba:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003abe:	60da      	str	r2, [r3, #12]
		USART_Index[USARTconfig->USARTindex] -> CR1 |=  (USARTconfig->ParitySelection << (USART_CR1_PS));
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	4b48      	ldr	r3, [pc, #288]	; (8003be8 <MUSART_u8SetConfiguration+0x2c4>)
 8003ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003acc:	68da      	ldr	r2, [r3, #12]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	799b      	ldrb	r3, [r3, #6]
 8003ad2:	025b      	lsls	r3, r3, #9
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	4618      	mov	r0, r3
 8003adc:	4b42      	ldr	r3, [pc, #264]	; (8003be8 <MUSART_u8SetConfiguration+0x2c4>)
 8003ade:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	60da      	str	r2, [r3, #12]

		USART_Index[USARTconfig->USARTindex] -> CR1 &=~ (USART_PCE_MASK << (USART_CR1_PCE));
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	461a      	mov	r2, r3
 8003aec:	4b3e      	ldr	r3, [pc, #248]	; (8003be8 <MUSART_u8SetConfiguration+0x2c4>)
 8003aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003af2:	68da      	ldr	r2, [r3, #12]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	4619      	mov	r1, r3
 8003afa:	4b3b      	ldr	r3, [pc, #236]	; (8003be8 <MUSART_u8SetConfiguration+0x2c4>)
 8003afc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003b00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b04:	60da      	str	r2, [r3, #12]
		USART_Index[USARTconfig->USARTindex] -> CR1 |=  (USARTconfig->ParityControl << (USART_CR1_PCE));
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	4b36      	ldr	r3, [pc, #216]	; (8003be8 <MUSART_u8SetConfiguration+0x2c4>)
 8003b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b12:	68da      	ldr	r2, [r3, #12]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	79db      	ldrb	r3, [r3, #7]
 8003b18:	029b      	lsls	r3, r3, #10
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	4618      	mov	r0, r3
 8003b22:	4b31      	ldr	r3, [pc, #196]	; (8003be8 <MUSART_u8SetConfiguration+0x2c4>)
 8003b24:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	60da      	str	r2, [r3, #12]


		USART_Index[USARTconfig->USARTindex] -> CR1 &=~ (USART_M_MASK << (USART_CR1_M));
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	461a      	mov	r2, r3
 8003b32:	4b2d      	ldr	r3, [pc, #180]	; (8003be8 <MUSART_u8SetConfiguration+0x2c4>)
 8003b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b38:	68da      	ldr	r2, [r3, #12]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	4619      	mov	r1, r3
 8003b40:	4b29      	ldr	r3, [pc, #164]	; (8003be8 <MUSART_u8SetConfiguration+0x2c4>)
 8003b42:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003b46:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b4a:	60da      	str	r2, [r3, #12]
		USART_Index[USARTconfig->USARTindex] -> CR1 |=  (USARTconfig->WordLength << (USART_CR1_M));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	461a      	mov	r2, r3
 8003b52:	4b25      	ldr	r3, [pc, #148]	; (8003be8 <MUSART_u8SetConfiguration+0x2c4>)
 8003b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b58:	68da      	ldr	r2, [r3, #12]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	7a1b      	ldrb	r3, [r3, #8]
 8003b5e:	031b      	lsls	r3, r3, #12
 8003b60:	4619      	mov	r1, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	4b1f      	ldr	r3, [pc, #124]	; (8003be8 <MUSART_u8SetConfiguration+0x2c4>)
 8003b6a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	60da      	str	r2, [r3, #12]

		USART_Index[USARTconfig->USARTindex] -> CR2 &=~ (USART_STOP_MASK << (USART_CR2_STOP));
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	461a      	mov	r2, r3
 8003b78:	4b1b      	ldr	r3, [pc, #108]	; (8003be8 <MUSART_u8SetConfiguration+0x2c4>)
 8003b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b7e:	691a      	ldr	r2, [r3, #16]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	4619      	mov	r1, r3
 8003b86:	4b18      	ldr	r3, [pc, #96]	; (8003be8 <MUSART_u8SetConfiguration+0x2c4>)
 8003b88:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003b8c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003b90:	611a      	str	r2, [r3, #16]
		USART_Index[USARTconfig->USARTindex] -> CR2 |=  (USARTconfig->StopBit_t << (USART_CR2_STOP));
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	461a      	mov	r2, r3
 8003b98:	4b13      	ldr	r3, [pc, #76]	; (8003be8 <MUSART_u8SetConfiguration+0x2c4>)
 8003b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b9e:	691a      	ldr	r2, [r3, #16]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	7a5b      	ldrb	r3, [r3, #9]
 8003ba4:	031b      	lsls	r3, r3, #12
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	4618      	mov	r0, r3
 8003bae:	4b0e      	ldr	r3, [pc, #56]	; (8003be8 <MUSART_u8SetConfiguration+0x2c4>)
 8003bb0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	611a      	str	r2, [r3, #16]

		USART_Index[USARTconfig->USARTindex] -> CR3 &=~ (USART_EIE_MASK << (USART_CR3_EIE));
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	4b0a      	ldr	r3, [pc, #40]	; (8003be8 <MUSART_u8SetConfiguration+0x2c4>)
 8003bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bc4:	695a      	ldr	r2, [r3, #20]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	4619      	mov	r1, r3
 8003bcc:	4b06      	ldr	r3, [pc, #24]	; (8003be8 <MUSART_u8SetConfiguration+0x2c4>)
 8003bce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003bd2:	f022 0201 	bic.w	r2, r2, #1
 8003bd6:	615a      	str	r2, [r3, #20]
		USART_Index[USARTconfig->USARTindex] -> CR3 |=  (USARTconfig->ErrorTnterrupt << (USART_CR3_EIE));
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	461a      	mov	r2, r3
 8003bde:	4b02      	ldr	r3, [pc, #8]	; (8003be8 <MUSART_u8SetConfiguration+0x2c4>)
 8003be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003be4:	695a      	ldr	r2, [r3, #20]
 8003be6:	e001      	b.n	8003bec <MUSART_u8SetConfiguration+0x2c8>
 8003be8:	20000038 	.word	0x20000038
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	7a9b      	ldrb	r3, [r3, #10]
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	4b43      	ldr	r3, [pc, #268]	; (8003d08 <MUSART_u8SetConfiguration+0x3e4>)
 8003bfa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	615a      	str	r2, [r3, #20]

		USART_Index[USARTconfig->USARTindex] -> CR3 &=~ (USART_DMAR_MASK << (USART_CR3_DMAR));
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	461a      	mov	r2, r3
 8003c08:	4b3f      	ldr	r3, [pc, #252]	; (8003d08 <MUSART_u8SetConfiguration+0x3e4>)
 8003c0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c0e:	695a      	ldr	r2, [r3, #20]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	4619      	mov	r1, r3
 8003c16:	4b3c      	ldr	r3, [pc, #240]	; (8003d08 <MUSART_u8SetConfiguration+0x3e4>)
 8003c18:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003c1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c20:	615a      	str	r2, [r3, #20]
		USART_Index[USARTconfig->USARTindex] -> CR3 |=  (USARTconfig->DMAresevier << (USART_CR3_DMAR));
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	461a      	mov	r2, r3
 8003c28:	4b37      	ldr	r3, [pc, #220]	; (8003d08 <MUSART_u8SetConfiguration+0x3e4>)
 8003c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c2e:	695a      	ldr	r2, [r3, #20]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	7adb      	ldrb	r3, [r3, #11]
 8003c34:	019b      	lsls	r3, r3, #6
 8003c36:	4619      	mov	r1, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	4b32      	ldr	r3, [pc, #200]	; (8003d08 <MUSART_u8SetConfiguration+0x3e4>)
 8003c40:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	615a      	str	r2, [r3, #20]

		USART_Index[USARTconfig->USARTindex] -> CR3 &=~ (USART_DMAT_MASK << (USART_CR3_DMAT));
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	4b2e      	ldr	r3, [pc, #184]	; (8003d08 <MUSART_u8SetConfiguration+0x3e4>)
 8003c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c54:	695a      	ldr	r2, [r3, #20]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	4b2a      	ldr	r3, [pc, #168]	; (8003d08 <MUSART_u8SetConfiguration+0x3e4>)
 8003c5e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003c62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c66:	615a      	str	r2, [r3, #20]
		USART_Index[USARTconfig->USARTindex] -> CR3 |=  (USARTconfig->DMAtransmitter << (USART_CR3_DMAT));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	4b26      	ldr	r3, [pc, #152]	; (8003d08 <MUSART_u8SetConfiguration+0x3e4>)
 8003c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c74:	695a      	ldr	r2, [r3, #20]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	7b1b      	ldrb	r3, [r3, #12]
 8003c7a:	01db      	lsls	r3, r3, #7
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	4618      	mov	r0, r3
 8003c84:	4b20      	ldr	r3, [pc, #128]	; (8003d08 <MUSART_u8SetConfiguration+0x3e4>)
 8003c86:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	615a      	str	r2, [r3, #20]
		/********************************************** Baud Rate ************************************************************************/
		uint64_t Local_u64Mantissa = ( F_COLCK ) / ( USART_OVER_SAMPLING * USART1_BAUD_RATE ) ;
 8003c8e:	f04f 0234 	mov.w	r2, #52	; 0x34
 8003c92:	f04f 0300 	mov.w	r3, #0
 8003c96:	e9c7 2304 	strd	r2, r3, [r7, #16]
		uint64_t Local_u64Fraction = ( ( ( F_COLCK * 100 ) / ( USART_OVER_SAMPLING * USART1_BAUD_RATE )  ) % 100 ) * USART_OVER_SAMPLING ;
 8003c9a:	f04f 0280 	mov.w	r2, #128	; 0x80
 8003c9e:	f04f 0300 	mov.w	r3, #0
 8003ca2:	e9c7 2302 	strd	r2, r3, [r7, #8]

		if( Local_u64Fraction > USART_MAX_FRAC )
 8003ca6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003caa:	f240 51dd 	movw	r1, #1501	; 0x5dd
 8003cae:	428a      	cmp	r2, r1
 8003cb0:	f173 0300 	sbcs.w	r3, r3, #0
 8003cb4:	d30c      	bcc.n	8003cd0 <MUSART_u8SetConfiguration+0x3ac>
		{
			Local_u64Mantissa += USART_MANTISSA ;
 8003cb6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003cba:	1c54      	adds	r4, r2, #1
 8003cbc:	f143 0500 	adc.w	r5, r3, #0
 8003cc0:	e9c7 4504 	strd	r4, r5, [r7, #16]
			Local_u64Fraction  = USART_FRACTION ;
 8003cc4:	f04f 0200 	mov.w	r2, #0
 8003cc8:	f04f 0300 	mov.w	r3, #0
 8003ccc:	e9c7 2302 	strd	r2, r3, [r7, #8]
		}
		USART_Index[USARTconfig->USARTindex] -> BRR = ( Local_u64Mantissa << USART_BAUD_RATE_ACCESS  ) | ( Local_u64Fraction / 100 ) ;
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	011c      	lsls	r4, r3, #4
 8003cd4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003cd8:	f04f 0264 	mov.w	r2, #100	; 0x64
 8003cdc:	f04f 0300 	mov.w	r3, #0
 8003ce0:	f7fd f8e2 	bl	8000ea8 <__aeabi_uldivmod>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	4619      	mov	r1, r3
 8003cee:	4b06      	ldr	r3, [pc, #24]	; (8003d08 <MUSART_u8SetConfiguration+0x3e4>)
 8003cf0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003cf4:	4322      	orrs	r2, r4
 8003cf6:	609a      	str	r2, [r3, #8]
 8003cf8:	e001      	b.n	8003cfe <MUSART_u8SetConfiguration+0x3da>
		/********************************************** Enable ***************************************************************************/
		/*************************************************************************************************************************************/
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	77fb      	strb	r3, [r7, #31]
	}
	return Local_u8ErrorState;
 8003cfe:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3720      	adds	r7, #32
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bdb0      	pop	{r4, r5, r7, pc}
 8003d08:	20000038 	.word	0x20000038

08003d0c <MUSART_u8UsartStatus>:
 *
 *
 ******************************************************************************
 */
uint8_t MUSART_u8UsartStatus ( USARTindex_t Copy_USARTindex , UsartStatus_t Copy_UsartStatus )
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	4603      	mov	r3, r0
 8003d14:	460a      	mov	r2, r1
 8003d16:	71fb      	strb	r3, [r7, #7]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	73fb      	strb	r3, [r7, #15]
	if (  1  )
	{
		USART_Index[Copy_USARTindex] -> CR1 &=~ (USART_USART_MASK   << (USART_CR1_UE));
 8003d20:	79fb      	ldrb	r3, [r7, #7]
 8003d22:	4a0f      	ldr	r2, [pc, #60]	; (8003d60 <MUSART_u8UsartStatus+0x54>)
 8003d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d28:	68da      	ldr	r2, [r3, #12]
 8003d2a:	79fb      	ldrb	r3, [r7, #7]
 8003d2c:	490c      	ldr	r1, [pc, #48]	; (8003d60 <MUSART_u8UsartStatus+0x54>)
 8003d2e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d36:	60da      	str	r2, [r3, #12]
		USART_Index[Copy_USARTindex] -> CR1 |=  (Copy_UsartStatus   << (USART_CR1_UE));
 8003d38:	79fb      	ldrb	r3, [r7, #7]
 8003d3a:	4a09      	ldr	r2, [pc, #36]	; (8003d60 <MUSART_u8UsartStatus+0x54>)
 8003d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d40:	68da      	ldr	r2, [r3, #12]
 8003d42:	79bb      	ldrb	r3, [r7, #6]
 8003d44:	035b      	lsls	r3, r3, #13
 8003d46:	4618      	mov	r0, r3
 8003d48:	79fb      	ldrb	r3, [r7, #7]
 8003d4a:	4905      	ldr	r1, [pc, #20]	; (8003d60 <MUSART_u8UsartStatus+0x54>)
 8003d4c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d50:	4302      	orrs	r2, r0
 8003d52:	60da      	str	r2, [r3, #12]
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
	}
	return Local_u8ErrorState ;
 8003d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3714      	adds	r7, #20
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bc80      	pop	{r7}
 8003d5e:	4770      	bx	lr
 8003d60:	20000038 	.word	0x20000038

08003d64 <MUSART_u8ReceiveCharSynch>:
 *
 *
 ******************************************************************************
 */
uint8_t  MUSART_u8ReceiveCharSynch     ( USARTindex_t Copy_USARTindex , uint8_t * Copy_pu8DataChar  )
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	6039      	str	r1, [r7, #0]
 8003d6e:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 8003d70:	2301      	movs	r3, #1
 8003d72:	73fb      	strb	r3, [r7, #15]
	if ( Copy_pu8DataChar != NULL )
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d01f      	beq.n	8003dba <MUSART_u8ReceiveCharSynch+0x56>
	{
		//CLR_BIT( USART_Index[Copy_USARTindex] -> SR , USART_SR_RXNE );
	    while ( USART_SR_RXNE_DOWN_MASK == GET_BIT ( USART_Index[Copy_USARTindex] -> SR , USART_SR_RXNE ) )  ;
 8003d7a:	bf00      	nop
 8003d7c:	79fb      	ldrb	r3, [r7, #7]
 8003d7e:	4a13      	ldr	r2, [pc, #76]	; (8003dcc <MUSART_u8ReceiveCharSynch+0x68>)
 8003d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	095b      	lsrs	r3, r3, #5
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d0f5      	beq.n	8003d7c <MUSART_u8ReceiveCharSynch+0x18>
	    *Copy_pu8DataChar = ( USART_Index[Copy_USARTindex] -> DR )  ;
 8003d90:	79fb      	ldrb	r3, [r7, #7]
 8003d92:	4a0e      	ldr	r2, [pc, #56]	; (8003dcc <MUSART_u8ReceiveCharSynch+0x68>)
 8003d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	b2da      	uxtb	r2, r3
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	701a      	strb	r2, [r3, #0]
		CLR_BIT( USART_Index[Copy_USARTindex] -> SR , USART_SR_RXNE );
 8003da0:	79fb      	ldrb	r3, [r7, #7]
 8003da2:	4a0a      	ldr	r2, [pc, #40]	; (8003dcc <MUSART_u8ReceiveCharSynch+0x68>)
 8003da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	79fb      	ldrb	r3, [r7, #7]
 8003dac:	4907      	ldr	r1, [pc, #28]	; (8003dcc <MUSART_u8ReceiveCharSynch+0x68>)
 8003dae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003db2:	f022 0220 	bic.w	r2, r2, #32
 8003db6:	601a      	str	r2, [r3, #0]
 8003db8:	e001      	b.n	8003dbe <MUSART_u8ReceiveCharSynch+0x5a>

	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState ;
 8003dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3714      	adds	r7, #20
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bc80      	pop	{r7}
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	20000038 	.word	0x20000038

08003dd0 <MUSART_u8ReceiveCharNonBlocking>:
 *
 *
 ******************************************************************************
 */
uint8_t  MUSART_u8ReceiveCharNonBlocking     ( USARTindex_t Copy_USARTindex , uint8_t * Copy_pu8DataChar  )
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	6039      	str	r1, [r7, #0]
 8003dda:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	73fb      	strb	r3, [r7, #15]
	uint32_t Local_u32TimeOutCounter = 0 ;
 8003de0:	2300      	movs	r3, #0
 8003de2:	60bb      	str	r3, [r7, #8]
	if ( Copy_pu8DataChar != NULL )
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d02d      	beq.n	8003e46 <MUSART_u8ReceiveCharNonBlocking+0x76>
	{
		CLR_BIT( USART_Index[Copy_USARTindex] -> SR , USART_SR_RXNE );
 8003dea:	79fb      	ldrb	r3, [r7, #7]
 8003dec:	4a1a      	ldr	r2, [pc, #104]	; (8003e58 <MUSART_u8ReceiveCharNonBlocking+0x88>)
 8003dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	79fb      	ldrb	r3, [r7, #7]
 8003df6:	4918      	ldr	r1, [pc, #96]	; (8003e58 <MUSART_u8ReceiveCharNonBlocking+0x88>)
 8003df8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003dfc:	f022 0220 	bic.w	r2, r2, #32
 8003e00:	601a      	str	r2, [r3, #0]
	    while ( (USART_SR_RXNE_DOWN_MASK == GET_BIT ( USART_Index[Copy_USARTindex] -> SR , USART_SR_RXNE )) && (Local_u32TimeOutCounter < 500000) )
 8003e02:	e002      	b.n	8003e0a <MUSART_u8ReceiveCharNonBlocking+0x3a>
	    {
			Local_u32TimeOutCounter++;
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	3301      	adds	r3, #1
 8003e08:	60bb      	str	r3, [r7, #8]
	    while ( (USART_SR_RXNE_DOWN_MASK == GET_BIT ( USART_Index[Copy_USARTindex] -> SR , USART_SR_RXNE )) && (Local_u32TimeOutCounter < 500000) )
 8003e0a:	79fb      	ldrb	r3, [r7, #7]
 8003e0c:	4a12      	ldr	r2, [pc, #72]	; (8003e58 <MUSART_u8ReceiveCharNonBlocking+0x88>)
 8003e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	095b      	lsrs	r3, r3, #5
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d103      	bne.n	8003e26 <MUSART_u8ReceiveCharNonBlocking+0x56>
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	4a0e      	ldr	r2, [pc, #56]	; (8003e5c <MUSART_u8ReceiveCharNonBlocking+0x8c>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d9ee      	bls.n	8003e04 <MUSART_u8ReceiveCharNonBlocking+0x34>
	    }
		if(Local_u32TimeOutCounter<500000)
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	4a0c      	ldr	r2, [pc, #48]	; (8003e5c <MUSART_u8ReceiveCharNonBlocking+0x8c>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d808      	bhi.n	8003e40 <MUSART_u8ReceiveCharNonBlocking+0x70>
		{
		    *Copy_pu8DataChar = ( USART_Index[Copy_USARTindex] -> DR )  ;
 8003e2e:	79fb      	ldrb	r3, [r7, #7]
 8003e30:	4a09      	ldr	r2, [pc, #36]	; (8003e58 <MUSART_u8ReceiveCharNonBlocking+0x88>)
 8003e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	b2da      	uxtb	r2, r3
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	701a      	strb	r2, [r3, #0]
 8003e3e:	e004      	b.n	8003e4a <MUSART_u8ReceiveCharNonBlocking+0x7a>
			//CLR_BIT( USART_Index[Copy_USARTindex] -> SR , USART_SR_RXNE );
		}
		else
		{
			Local_u8ErrorState = ERROR_STATE_TIME_OUT ;
 8003e40:	2303      	movs	r3, #3
 8003e42:	73fb      	strb	r3, [r7, #15]
 8003e44:	e001      	b.n	8003e4a <MUSART_u8ReceiveCharNonBlocking+0x7a>


	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
 8003e46:	2300      	movs	r3, #0
 8003e48:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState ;
 8003e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3714      	adds	r7, #20
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bc80      	pop	{r7}
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	20000038 	.word	0x20000038
 8003e5c:	0007a11f 	.word	0x0007a11f

08003e60 <MUSART_u8ReceiveArraySynch>:
 *
 *
 ******************************************************************************
 */
uint8_t  MUSART_u8ReceiveArraySynch  (  USARTindex_t Copy_USARTindex , uint8_t * Copy_pu8DataArray  , uint8_t Copy_u8Size  )
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	4603      	mov	r3, r0
 8003e68:	6039      	str	r1, [r7, #0]
 8003e6a:	71fb      	strb	r3, [r7, #7]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 8003e70:	2301      	movs	r3, #1
 8003e72:	73fb      	strb	r3, [r7, #15]
	if ( Copy_pu8DataArray != NULL )
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d012      	beq.n	8003ea0 <MUSART_u8ReceiveArraySynch+0x40>
	{
	   for (uint8_t Local_u8Counter = 0 ; Local_u8Counter < Copy_u8Size ; Local_u8Counter++ )
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	73bb      	strb	r3, [r7, #14]
 8003e7e:	e00a      	b.n	8003e96 <MUSART_u8ReceiveArraySynch+0x36>
	   {
    	   MUSART_u8ReceiveCharSynch( Copy_USARTindex , & (Copy_pu8DataArray[Local_u8Counter]) );
 8003e80:	7bbb      	ldrb	r3, [r7, #14]
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	441a      	add	r2, r3
 8003e86:	79fb      	ldrb	r3, [r7, #7]
 8003e88:	4611      	mov	r1, r2
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7ff ff6a 	bl	8003d64 <MUSART_u8ReceiveCharSynch>
	   for (uint8_t Local_u8Counter = 0 ; Local_u8Counter < Copy_u8Size ; Local_u8Counter++ )
 8003e90:	7bbb      	ldrb	r3, [r7, #14]
 8003e92:	3301      	adds	r3, #1
 8003e94:	73bb      	strb	r3, [r7, #14]
 8003e96:	7bba      	ldrb	r2, [r7, #14]
 8003e98:	79bb      	ldrb	r3, [r7, #6]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d3f0      	bcc.n	8003e80 <MUSART_u8ReceiveArraySynch+0x20>
 8003e9e:	e001      	b.n	8003ea4 <MUSART_u8ReceiveArraySynch+0x44>
	   }
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState ;
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <MUSART_u8ReceiveArrayNonBlocking>:
 *
 *
 ******************************************************************************
 */
uint8_t  MUSART_u8ReceiveArrayNonBlocking  (  USARTindex_t Copy_USARTindex , uint8_t * Copy_pu8DataArray  , uint8_t Copy_u8Size  )
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b084      	sub	sp, #16
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	6039      	str	r1, [r7, #0]
 8003eb8:	71fb      	strb	r3, [r7, #7]
 8003eba:	4613      	mov	r3, r2
 8003ebc:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	73fb      	strb	r3, [r7, #15]
	uint8_t Local_u8StepErrorState = ERROR_STATE_OK ;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	737b      	strb	r3, [r7, #13]

	if ( Copy_pu8DataArray != NULL )
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d01a      	beq.n	8003f02 <MUSART_u8ReceiveArrayNonBlocking+0x54>
	{
	   for (uint8_t Local_u8Counter = 0 ; Local_u8Counter < Copy_u8Size ; Local_u8Counter++ )
 8003ecc:	2300      	movs	r3, #0
 8003ece:	73bb      	strb	r3, [r7, #14]
 8003ed0:	e012      	b.n	8003ef8 <MUSART_u8ReceiveArrayNonBlocking+0x4a>
	   {
		   Local_u8StepErrorState = MUSART_u8ReceiveCharNonBlocking( Copy_USARTindex , & (Copy_pu8DataArray[Local_u8Counter]) );
 8003ed2:	7bbb      	ldrb	r3, [r7, #14]
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	441a      	add	r2, r3
 8003ed8:	79fb      	ldrb	r3, [r7, #7]
 8003eda:	4611      	mov	r1, r2
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7ff ff77 	bl	8003dd0 <MUSART_u8ReceiveCharNonBlocking>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	737b      	strb	r3, [r7, #13]
		   if ( Local_u8StepErrorState == ERROR_STATE_TIME_OUT )
 8003ee6:	7b7b      	ldrb	r3, [r7, #13]
 8003ee8:	2b03      	cmp	r3, #3
 8003eea:	d102      	bne.n	8003ef2 <MUSART_u8ReceiveArrayNonBlocking+0x44>
		   {
			   Local_u8ErrorState = ERROR_STATE_TIME_OUT ;
 8003eec:	2303      	movs	r3, #3
 8003eee:	73fb      	strb	r3, [r7, #15]
			   break;
 8003ef0:	e009      	b.n	8003f06 <MUSART_u8ReceiveArrayNonBlocking+0x58>
	   for (uint8_t Local_u8Counter = 0 ; Local_u8Counter < Copy_u8Size ; Local_u8Counter++ )
 8003ef2:	7bbb      	ldrb	r3, [r7, #14]
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	73bb      	strb	r3, [r7, #14]
 8003ef8:	7bba      	ldrb	r2, [r7, #14]
 8003efa:	79bb      	ldrb	r3, [r7, #6]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d3e8      	bcc.n	8003ed2 <MUSART_u8ReceiveArrayNonBlocking+0x24>
 8003f00:	e001      	b.n	8003f06 <MUSART_u8ReceiveArrayNonBlocking+0x58>
		   }
	   }
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
 8003f02:	2300      	movs	r3, #0
 8003f04:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState ;
 8003f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <MUSART_u8TransmitCharSynch>:
 *
 *
 ******************************************************************************
 */
uint8_t  MUSART_u8TransmitCharSynch     ( USARTindex_t Copy_USARTindex , uint8_t  Copy_u8DataChar  )
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	4603      	mov	r3, r0
 8003f18:	460a      	mov	r2, r1
 8003f1a:	71fb      	strb	r3, [r7, #7]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 8003f20:	2301      	movs	r3, #1
 8003f22:	73fb      	strb	r3, [r7, #15]
	if ( 1 )
	{
		CLR_BIT( USART_Index[Copy_USARTindex] -> SR , USART_SR_TC );
 8003f24:	79fb      	ldrb	r3, [r7, #7]
 8003f26:	4a17      	ldr	r2, [pc, #92]	; (8003f84 <MUSART_u8TransmitCharSynch+0x74>)
 8003f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	79fb      	ldrb	r3, [r7, #7]
 8003f30:	4914      	ldr	r1, [pc, #80]	; (8003f84 <MUSART_u8TransmitCharSynch+0x74>)
 8003f32:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f3a:	601a      	str	r2, [r3, #0]
		USART_Index[Copy_USARTindex] -> DR = Copy_u8DataChar ;
 8003f3c:	79fb      	ldrb	r3, [r7, #7]
 8003f3e:	4a11      	ldr	r2, [pc, #68]	; (8003f84 <MUSART_u8TransmitCharSynch+0x74>)
 8003f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f44:	79ba      	ldrb	r2, [r7, #6]
 8003f46:	605a      	str	r2, [r3, #4]
		while ( USART_SR_TC_MASK == GET_BIT( USART_Index[Copy_USARTindex] -> SR , USART_SR_TC ) )  ;
 8003f48:	bf00      	nop
 8003f4a:	79fb      	ldrb	r3, [r7, #7]
 8003f4c:	4a0d      	ldr	r2, [pc, #52]	; (8003f84 <MUSART_u8TransmitCharSynch+0x74>)
 8003f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	099b      	lsrs	r3, r3, #6
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d0f5      	beq.n	8003f4a <MUSART_u8TransmitCharSynch+0x3a>
		CLR_BIT( USART_Index[Copy_USARTindex] -> SR , USART_SR_TC );
 8003f5e:	79fb      	ldrb	r3, [r7, #7]
 8003f60:	4a08      	ldr	r2, [pc, #32]	; (8003f84 <MUSART_u8TransmitCharSynch+0x74>)
 8003f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	79fb      	ldrb	r3, [r7, #7]
 8003f6a:	4906      	ldr	r1, [pc, #24]	; (8003f84 <MUSART_u8TransmitCharSynch+0x74>)
 8003f6c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
	}
	return Local_u8ErrorState ;
 8003f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3714      	adds	r7, #20
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bc80      	pop	{r7}
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	20000038 	.word	0x20000038

08003f88 <MUSART_u8TransmitArraySynch>:
 *
 *
 ******************************************************************************
 */
uint8_t   MUSART_u8TransmitArraySynch  ( USARTindex_t Copy_USARTindex , uint8_t * Copy_pu8DataArray , uint8_t Copy_u8Size )
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	4603      	mov	r3, r0
 8003f90:	6039      	str	r1, [r7, #0]
 8003f92:	71fb      	strb	r3, [r7, #7]
 8003f94:	4613      	mov	r3, r2
 8003f96:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	73fb      	strb	r3, [r7, #15]
	if ( Copy_pu8DataArray != NULL )
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d013      	beq.n	8003fca <MUSART_u8TransmitArraySynch+0x42>
	{
       for (uint8_t Local_u8Counter = 0 ; Local_u8Counter < Copy_u8Size ; Local_u8Counter++ )
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	73bb      	strb	r3, [r7, #14]
 8003fa6:	e00b      	b.n	8003fc0 <MUSART_u8TransmitArraySynch+0x38>
	   {
    	   MUSART_u8TransmitCharSynch( Copy_USARTindex , Copy_pu8DataArray[Local_u8Counter]  );
 8003fa8:	7bbb      	ldrb	r3, [r7, #14]
 8003faa:	683a      	ldr	r2, [r7, #0]
 8003fac:	4413      	add	r3, r2
 8003fae:	781a      	ldrb	r2, [r3, #0]
 8003fb0:	79fb      	ldrb	r3, [r7, #7]
 8003fb2:	4611      	mov	r1, r2
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7ff ffab 	bl	8003f10 <MUSART_u8TransmitCharSynch>
       for (uint8_t Local_u8Counter = 0 ; Local_u8Counter < Copy_u8Size ; Local_u8Counter++ )
 8003fba:	7bbb      	ldrb	r3, [r7, #14]
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	73bb      	strb	r3, [r7, #14]
 8003fc0:	7bba      	ldrb	r2, [r7, #14]
 8003fc2:	79bb      	ldrb	r3, [r7, #6]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d3ef      	bcc.n	8003fa8 <MUSART_u8TransmitArraySynch+0x20>
 8003fc8:	e001      	b.n	8003fce <MUSART_u8TransmitArraySynch+0x46>
	   }
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState ;
 8003fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <MUSART_voidClearFlags>:
 *
 *
 ******************************************************************************
 */
void   MUSART_voidClearFlags( USARTindex_t Copy_USARTindex )
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	4603      	mov	r3, r0
 8003fe0:	71fb      	strb	r3, [r7, #7]
	USART_Index[Copy_USARTindex] -> SR = USART_SR_MASK ;
 8003fe2:	79fb      	ldrb	r3, [r7, #7]
 8003fe4:	4a04      	ldr	r2, [pc, #16]	; (8003ff8 <MUSART_voidClearFlags+0x20>)
 8003fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fea:	2200      	movs	r2, #0
 8003fec:	601a      	str	r2, [r3, #0]
}
 8003fee:	bf00      	nop
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bc80      	pop	{r7}
 8003ff6:	4770      	bx	lr
 8003ff8:	20000038 	.word	0x20000038

08003ffc <MUSART_u8ReceiveCharNonSynch>:
 *
 *
 ******************************************************************************
 */
uint8_t  MUSART_u8ReceiveCharNonSynch     ( USARTindex_t Copy_USARTindex , void (*Copy_pFun) (uint8_t) )
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	4603      	mov	r3, r0
 8004004:	6039      	str	r1, [r7, #0]
 8004006:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 8004008:	2301      	movs	r3, #1
 800400a:	73fb      	strb	r3, [r7, #15]
	if (Copy_pFun!= NULL  )
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d005      	beq.n	800401e <MUSART_u8ReceiveCharNonSynch+0x22>
	{
		USART_ApfCallBack[Copy_USARTindex] = Copy_pFun;
 8004012:	79fb      	ldrb	r3, [r7, #7]
 8004014:	4906      	ldr	r1, [pc, #24]	; (8004030 <MUSART_u8ReceiveCharNonSynch+0x34>)
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800401c:	e001      	b.n	8004022 <MUSART_u8ReceiveCharNonSynch+0x26>
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
 800401e:	2300      	movs	r3, #0
 8004020:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState ;
 8004022:	7bfb      	ldrb	r3, [r7, #15]
}
 8004024:	4618      	mov	r0, r3
 8004026:	3714      	adds	r7, #20
 8004028:	46bd      	mov	sp, r7
 800402a:	bc80      	pop	{r7}
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	200000f4 	.word	0x200000f4

08004034 <USART1_IRQHandler>:
/*************************************************************************************************************************************/
/********************************************************* Handlers implementations **************************************************/
/*************************************************************************************************************************************/
void USART1_IRQHandler(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
	if (  USART_ApfCallBack[USART_1] != NULL )
 8004038:	4b08      	ldr	r3, [pc, #32]	; (800405c <USART1_IRQHandler+0x28>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00a      	beq.n	8004056 <USART1_IRQHandler+0x22>
	{
		USART_ApfCallBack[USART_1](USART_Index[USART_1] -> DR);
 8004040:	4b06      	ldr	r3, [pc, #24]	; (800405c <USART1_IRQHandler+0x28>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a06      	ldr	r2, [pc, #24]	; (8004060 <USART1_IRQHandler+0x2c>)
 8004046:	6812      	ldr	r2, [r2, #0]
 8004048:	6852      	ldr	r2, [r2, #4]
 800404a:	b2d2      	uxtb	r2, r2
 800404c:	4610      	mov	r0, r2
 800404e:	4798      	blx	r3
		MUSART_voidClearFlags(USART_1);
 8004050:	2000      	movs	r0, #0
 8004052:	f7ff ffc1 	bl	8003fd8 <MUSART_voidClearFlags>

	}

}
 8004056:	bf00      	nop
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	200000f4 	.word	0x200000f4
 8004060:	20000038 	.word	0x20000038

08004064 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
	if (  USART_ApfCallBack[USART_2] != NULL )
 8004068:	4b08      	ldr	r3, [pc, #32]	; (800408c <USART2_IRQHandler+0x28>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00a      	beq.n	8004086 <USART2_IRQHandler+0x22>
	{
		USART_ApfCallBack[USART_2](USART_Index[USART_2] -> DR);
 8004070:	4b06      	ldr	r3, [pc, #24]	; (800408c <USART2_IRQHandler+0x28>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	4a06      	ldr	r2, [pc, #24]	; (8004090 <USART2_IRQHandler+0x2c>)
 8004076:	6852      	ldr	r2, [r2, #4]
 8004078:	6852      	ldr	r2, [r2, #4]
 800407a:	b2d2      	uxtb	r2, r2
 800407c:	4610      	mov	r0, r2
 800407e:	4798      	blx	r3
		MUSART_voidClearFlags(USART_2);
 8004080:	2001      	movs	r0, #1
 8004082:	f7ff ffa9 	bl	8003fd8 <MUSART_voidClearFlags>

	}

}
 8004086:	bf00      	nop
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	200000f4 	.word	0x200000f4
 8004090:	20000038 	.word	0x20000038

08004094 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0
	if (  USART_ApfCallBack[USART_3] != NULL )
 8004098:	4b08      	ldr	r3, [pc, #32]	; (80040bc <USART3_IRQHandler+0x28>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00a      	beq.n	80040b6 <USART3_IRQHandler+0x22>
	{
		USART_ApfCallBack[USART_3](USART_Index[USART_3] -> DR);
 80040a0:	4b06      	ldr	r3, [pc, #24]	; (80040bc <USART3_IRQHandler+0x28>)
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	4a06      	ldr	r2, [pc, #24]	; (80040c0 <USART3_IRQHandler+0x2c>)
 80040a6:	6892      	ldr	r2, [r2, #8]
 80040a8:	6852      	ldr	r2, [r2, #4]
 80040aa:	b2d2      	uxtb	r2, r2
 80040ac:	4610      	mov	r0, r2
 80040ae:	4798      	blx	r3
		MUSART_voidClearFlags(USART_3);
 80040b0:	2002      	movs	r0, #2
 80040b2:	f7ff ff91 	bl	8003fd8 <MUSART_voidClearFlags>
	}

}
 80040b6:	bf00      	nop
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	200000f4 	.word	0x200000f4
 80040c0:	20000038 	.word	0x20000038

080040c4 <V2G_u8PlugCable>:

/*************************************************************************************************************/
/************************************* Plug Cable ************************************************************/
/*************************************************************************************************************/
uint8_t V2G_u8PlugCable ( void )
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
	uint8_t Local_u8SuccessFlag     =  0  ;
 80040ca:	2300      	movs	r3, #0
 80040cc:	73fb      	strb	r3, [r7, #15]
	uint8_t Local_u8LengthToFollow  =  0  ;
 80040ce:	2300      	movs	r3, #0
 80040d0:	73bb      	strb	r3, [r7, #14]
	uint8_t Local_u8SelectCmd       =  0  ;
 80040d2:	2300      	movs	r3, #0
 80040d4:	737b      	strb	r3, [r7, #13]
	uint8_t Local_u8ACTStatus[2]    = {0} ;
 80040d6:	2300      	movs	r3, #0
 80040d8:	813b      	strh	r3, [r7, #8]
	uint8_t Local_u8ReceivedData[3] = {0} ;
 80040da:	4b17      	ldr	r3, [pc, #92]	; (8004138 <V2G_u8PlugCable+0x74>)
 80040dc:	881b      	ldrh	r3, [r3, #0]
 80040de:	80bb      	strh	r3, [r7, #4]
 80040e0:	2300      	movs	r3, #0
 80040e2:	71bb      	strb	r3, [r7, #6]

	Local_u8LengthToFollow = 1 ;
 80040e4:	2301      	movs	r3, #1
 80040e6:	73bb      	strb	r3, [r7, #14]
	MUSART_u8TransmitArraySynch(V2G_USART_INDEX, &Local_u8LengthToFollow, 1);
 80040e8:	f107 030e 	add.w	r3, r7, #14
 80040ec:	2201      	movs	r2, #1
 80040ee:	4619      	mov	r1, r3
 80040f0:	2002      	movs	r0, #2
 80040f2:	f7ff ff49 	bl	8003f88 <MUSART_u8TransmitArraySynch>
	Local_u8SelectCmd =  V2G_EV_PLUG_CABLE ;
 80040f6:	2351      	movs	r3, #81	; 0x51
 80040f8:	737b      	strb	r3, [r7, #13]
	MUSART_u8TransmitArraySynch(V2G_USART_INDEX, &Local_u8SelectCmd , 1);
 80040fa:	f107 030d 	add.w	r3, r7, #13
 80040fe:	2201      	movs	r2, #1
 8004100:	4619      	mov	r1, r3
 8004102:	2002      	movs	r0, #2
 8004104:	f7ff ff40 	bl	8003f88 <MUSART_u8TransmitArraySynch>

	MUSART_u8ReceiveArrayNonBlocking(V2G_USART_INDEX, Local_u8ACTStatus, 2);
 8004108:	f107 0308 	add.w	r3, r7, #8
 800410c:	2202      	movs	r2, #2
 800410e:	4619      	mov	r1, r3
 8004110:	2002      	movs	r0, #2
 8004112:	f7ff fecc 	bl	8003eae <MUSART_u8ReceiveArrayNonBlocking>
	if (Local_u8ACTStatus[0] == V2G_EV_ACK )
 8004116:	7a3b      	ldrb	r3, [r7, #8]
 8004118:	2ba5      	cmp	r3, #165	; 0xa5
 800411a:	d107      	bne.n	800412c <V2G_u8PlugCable+0x68>
	{
		MUSART_u8ReceiveArrayNonBlocking(V2G_USART_INDEX, Local_u8ReceivedData, Local_u8ACTStatus[1] );
 800411c:	7a7a      	ldrb	r2, [r7, #9]
 800411e:	1d3b      	adds	r3, r7, #4
 8004120:	4619      	mov	r1, r3
 8004122:	2002      	movs	r0, #2
 8004124:	f7ff fec3 	bl	8003eae <MUSART_u8ReceiveArrayNonBlocking>
		Local_u8SuccessFlag = 1 ;
 8004128:	2301      	movs	r3, #1
 800412a:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8SuccessFlag ;
 800412c:	7bfb      	ldrb	r3, [r7, #15]
}
 800412e:	4618      	mov	r0, r3
 8004130:	3710      	adds	r7, #16
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	0800516c 	.word	0x0800516c

0800413c <V2G_u8Identification>:
/*************************************************************************************************************/
/************************************* Identification ********************************************************/
/*************************************************************************************************************/
uint8_t V2G_u8Identification ( void )
{
 800413c:	b5b0      	push	{r4, r5, r7, lr}
 800413e:	b088      	sub	sp, #32
 8004140:	af00      	add	r7, sp, #0
	uint8_t Local_u8SuccessFlag     =  0  ;
 8004142:	2300      	movs	r3, #0
 8004144:	77fb      	strb	r3, [r7, #31]
	uint8_t Local_u8LengthToFollow  =  0  ;
 8004146:	2300      	movs	r3, #0
 8004148:	77bb      	strb	r3, [r7, #30]
	uint8_t Local_u8SelectCmd       =  0  ;
 800414a:	2300      	movs	r3, #0
 800414c:	777b      	strb	r3, [r7, #29]
	uint8_t Local_u8ACTStatus[2]    = {0} ;
 800414e:	2300      	movs	r3, #0
 8004150:	833b      	strh	r3, [r7, #24]
	uint8_t Local_u8ReceivedData[3] = {0} ;
 8004152:	4b1f      	ldr	r3, [pc, #124]	; (80041d0 <V2G_u8Identification+0x94>)
 8004154:	881b      	ldrh	r3, [r3, #0]
 8004156:	82bb      	strh	r3, [r7, #20]
 8004158:	2300      	movs	r3, #0
 800415a:	75bb      	strb	r3, [r7, #22]

	uint8_t  Local_pu8VIN[]   = VEHICLE_VIN ;
 800415c:	4b1d      	ldr	r3, [pc, #116]	; (80041d4 <V2G_u8Identification+0x98>)
 800415e:	463c      	mov	r4, r7
 8004160:	461d      	mov	r5, r3
 8004162:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004164:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004166:	682b      	ldr	r3, [r5, #0]
 8004168:	8023      	strh	r3, [r4, #0]
	Local_u8LengthToFollow = 1 + sizeof(Local_pu8VIN) ;
 800416a:	2313      	movs	r3, #19
 800416c:	77bb      	strb	r3, [r7, #30]
	MUSART_u8TransmitArraySynch(V2G_USART_INDEX, &Local_u8LengthToFollow, 1);
 800416e:	f107 031e 	add.w	r3, r7, #30
 8004172:	2201      	movs	r2, #1
 8004174:	4619      	mov	r1, r3
 8004176:	2002      	movs	r0, #2
 8004178:	f7ff ff06 	bl	8003f88 <MUSART_u8TransmitArraySynch>
	Local_u8SelectCmd =  V2G_EV_IDENTIFICATION ;
 800417c:	2352      	movs	r3, #82	; 0x52
 800417e:	777b      	strb	r3, [r7, #29]
	MUSART_u8TransmitArraySynch(V2G_USART_INDEX, &Local_u8SelectCmd , 1);
 8004180:	f107 031d 	add.w	r3, r7, #29
 8004184:	2201      	movs	r2, #1
 8004186:	4619      	mov	r1, r3
 8004188:	2002      	movs	r0, #2
 800418a:	f7ff fefd 	bl	8003f88 <MUSART_u8TransmitArraySynch>
	MUSART_u8TransmitArraySynch(V2G_USART_INDEX, Local_pu8VIN       , sizeof(Local_pu8VIN));
 800418e:	463b      	mov	r3, r7
 8004190:	2212      	movs	r2, #18
 8004192:	4619      	mov	r1, r3
 8004194:	2002      	movs	r0, #2
 8004196:	f7ff fef7 	bl	8003f88 <MUSART_u8TransmitArraySynch>

	MUSART_u8ReceiveArraySynch(V2G_USART_INDEX, Local_u8ACTStatus, 2);
 800419a:	f107 0318 	add.w	r3, r7, #24
 800419e:	2202      	movs	r2, #2
 80041a0:	4619      	mov	r1, r3
 80041a2:	2002      	movs	r0, #2
 80041a4:	f7ff fe5c 	bl	8003e60 <MUSART_u8ReceiveArraySynch>
	if (Local_u8ACTStatus[0] == V2G_EV_ACK )
 80041a8:	7e3b      	ldrb	r3, [r7, #24]
 80041aa:	2ba5      	cmp	r3, #165	; 0xa5
 80041ac:	d10b      	bne.n	80041c6 <V2G_u8Identification+0x8a>
	{
		MUSART_u8ReceiveArraySynch(V2G_USART_INDEX, Local_u8ReceivedData, Local_u8ACTStatus[1] );
 80041ae:	7e7a      	ldrb	r2, [r7, #25]
 80041b0:	f107 0314 	add.w	r3, r7, #20
 80041b4:	4619      	mov	r1, r3
 80041b6:	2002      	movs	r0, #2
 80041b8:	f7ff fe52 	bl	8003e60 <MUSART_u8ReceiveArraySynch>
		if ( Local_u8ReceivedData[0] == V2G_EV_VERIFY_IDENTIFICATION_SCCESS )
 80041bc:	7d3b      	ldrb	r3, [r7, #20]
 80041be:	2bb3      	cmp	r3, #179	; 0xb3
 80041c0:	d101      	bne.n	80041c6 <V2G_u8Identification+0x8a>
		{
			Local_u8SuccessFlag =  1;
 80041c2:	2301      	movs	r3, #1
 80041c4:	77fb      	strb	r3, [r7, #31]
		}
	}
	return Local_u8SuccessFlag ;
 80041c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3720      	adds	r7, #32
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bdb0      	pop	{r4, r5, r7, pc}
 80041d0:	0800516c 	.word	0x0800516c
 80041d4:	08005170 	.word	0x08005170

080041d8 <V2G_u8ChargeParameter>:
/*************************************************************************************************************/
/************************************* Charge Parameter ******************************************************/
/*************************************************************************************************************/
uint8_t V2G_u8ChargeParameter ( void )
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
	uint8_t Local_u8SuccessFlag     =  0  ;
 80041de:	2300      	movs	r3, #0
 80041e0:	73fb      	strb	r3, [r7, #15]
	uint8_t Local_u8LengthToFollow  =  0  ;
 80041e2:	2300      	movs	r3, #0
 80041e4:	737b      	strb	r3, [r7, #13]
	uint8_t Local_u8SelectCmd       =  0  ;
 80041e6:	2300      	movs	r3, #0
 80041e8:	733b      	strb	r3, [r7, #12]
	uint8_t Local_u8ACTStatus[2]    = {0} ;
 80041ea:	2300      	movs	r3, #0
 80041ec:	813b      	strh	r3, [r7, #8]
	uint8_t Local_u8ReceivedData[3] = {0} ;
 80041ee:	4b23      	ldr	r3, [pc, #140]	; (800427c <V2G_u8ChargeParameter+0xa4>)
 80041f0:	881b      	ldrh	r3, [r3, #0]
 80041f2:	80bb      	strh	r3, [r7, #4]
 80041f4:	2300      	movs	r3, #0
 80041f6:	71bb      	strb	r3, [r7, #6]

	uint8_t Local_u8Voltage  = SCARKIT_u8GetVoltageValue();
 80041f8:	f7fd f94c 	bl	8001494 <SCARKIT_u8GetVoltageValue>
 80041fc:	4603      	mov	r3, r0
 80041fe:	73bb      	strb	r3, [r7, #14]
	//uint8_t Local_u8Voltage = 5;
	uint8_t Local_u8EnergyAmount = (Local_u8Voltage*100)/12  ;
 8004200:	7bbb      	ldrb	r3, [r7, #14]
 8004202:	2264      	movs	r2, #100	; 0x64
 8004204:	fb02 f303 	mul.w	r3, r2, r3
 8004208:	4a1d      	ldr	r2, [pc, #116]	; (8004280 <V2G_u8ChargeParameter+0xa8>)
 800420a:	fb82 1203 	smull	r1, r2, r2, r3
 800420e:	1052      	asrs	r2, r2, #1
 8004210:	17db      	asrs	r3, r3, #31
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	b2db      	uxtb	r3, r3
 8004216:	70fb      	strb	r3, [r7, #3]

	Local_u8LengthToFollow = 2 ;
 8004218:	2302      	movs	r3, #2
 800421a:	737b      	strb	r3, [r7, #13]
	MUSART_u8TransmitArraySynch(V2G_USART_INDEX, &Local_u8LengthToFollow, 1);
 800421c:	f107 030d 	add.w	r3, r7, #13
 8004220:	2201      	movs	r2, #1
 8004222:	4619      	mov	r1, r3
 8004224:	2002      	movs	r0, #2
 8004226:	f7ff feaf 	bl	8003f88 <MUSART_u8TransmitArraySynch>
	Local_u8SelectCmd =  V2G_EV_CHARGE_PARAMETAR ;
 800422a:	2353      	movs	r3, #83	; 0x53
 800422c:	733b      	strb	r3, [r7, #12]
	MUSART_u8TransmitArraySynch(V2G_USART_INDEX, &Local_u8SelectCmd   , 1);
 800422e:	f107 030c 	add.w	r3, r7, #12
 8004232:	2201      	movs	r2, #1
 8004234:	4619      	mov	r1, r3
 8004236:	2002      	movs	r0, #2
 8004238:	f7ff fea6 	bl	8003f88 <MUSART_u8TransmitArraySynch>
	MUSART_u8TransmitArraySynch(V2G_USART_INDEX, &Local_u8EnergyAmount, 1 );
 800423c:	1cfb      	adds	r3, r7, #3
 800423e:	2201      	movs	r2, #1
 8004240:	4619      	mov	r1, r3
 8004242:	2002      	movs	r0, #2
 8004244:	f7ff fea0 	bl	8003f88 <MUSART_u8TransmitArraySynch>

	MUSART_u8ReceiveArrayNonBlocking(V2G_USART_INDEX, Local_u8ACTStatus, 2);
 8004248:	f107 0308 	add.w	r3, r7, #8
 800424c:	2202      	movs	r2, #2
 800424e:	4619      	mov	r1, r3
 8004250:	2002      	movs	r0, #2
 8004252:	f7ff fe2c 	bl	8003eae <MUSART_u8ReceiveArrayNonBlocking>
	if (Local_u8ACTStatus[0] == V2G_EV_ACK  )
 8004256:	7a3b      	ldrb	r3, [r7, #8]
 8004258:	2ba5      	cmp	r3, #165	; 0xa5
 800425a:	d10a      	bne.n	8004272 <V2G_u8ChargeParameter+0x9a>
	{
		MUSART_u8ReceiveArrayNonBlocking(V2G_USART_INDEX, Local_u8ReceivedData, Local_u8ACTStatus[1] );
 800425c:	7a7a      	ldrb	r2, [r7, #9]
 800425e:	1d3b      	adds	r3, r7, #4
 8004260:	4619      	mov	r1, r3
 8004262:	2002      	movs	r0, #2
 8004264:	f7ff fe23 	bl	8003eae <MUSART_u8ReceiveArrayNonBlocking>
		if (Local_u8ReceivedData[0] == V2G_EV_ACCEPT_CHARGING  )
 8004268:	793b      	ldrb	r3, [r7, #4]
 800426a:	2bb5      	cmp	r3, #181	; 0xb5
 800426c:	d101      	bne.n	8004272 <V2G_u8ChargeParameter+0x9a>
		{
			Local_u8SuccessFlag =  1;
 800426e:	2301      	movs	r3, #1
 8004270:	73fb      	strb	r3, [r7, #15]
		}
	}
	return Local_u8SuccessFlag ;
 8004272:	7bfb      	ldrb	r3, [r7, #15]
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	0800516c 	.word	0x0800516c
 8004280:	2aaaaaab 	.word	0x2aaaaaab

08004284 <V2G_u8ChargingCost>:
/*************************************************************************************************************/
/************************************* Charging Profiles *****************************************************/
/*************************************************************************************************************/
uint8_t V2G_u8ChargingCost ( void )
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
	uint8_t Local_u8SuccessFlag     =  0  ;
 800428a:	2300      	movs	r3, #0
 800428c:	73fb      	strb	r3, [r7, #15]
	uint8_t Local_u8LengthToFollow  =  0  ;
 800428e:	2300      	movs	r3, #0
 8004290:	73bb      	strb	r3, [r7, #14]
	uint8_t Local_u8SelectCmd       =  0  ;
 8004292:	2300      	movs	r3, #0
 8004294:	737b      	strb	r3, [r7, #13]
	uint8_t Local_u8ACTStatus[2]    = {0} ;
 8004296:	2300      	movs	r3, #0
 8004298:	813b      	strh	r3, [r7, #8]
	uint8_t Local_u8ReceivedData[3] = {0} ;
 800429a:	4b18      	ldr	r3, [pc, #96]	; (80042fc <V2G_u8ChargingCost+0x78>)
 800429c:	881b      	ldrh	r3, [r3, #0]
 800429e:	80bb      	strh	r3, [r7, #4]
 80042a0:	2300      	movs	r3, #0
 80042a2:	71bb      	strb	r3, [r7, #6]

	Local_u8LengthToFollow = 1 ;
 80042a4:	2301      	movs	r3, #1
 80042a6:	73bb      	strb	r3, [r7, #14]
	MUSART_u8TransmitArraySynch(V2G_USART_INDEX, &Local_u8LengthToFollow, 1);
 80042a8:	f107 030e 	add.w	r3, r7, #14
 80042ac:	2201      	movs	r2, #1
 80042ae:	4619      	mov	r1, r3
 80042b0:	2002      	movs	r0, #2
 80042b2:	f7ff fe69 	bl	8003f88 <MUSART_u8TransmitArraySynch>
	Local_u8SelectCmd =  V2G_EV_CHARGING_PROFILE ;
 80042b6:	2354      	movs	r3, #84	; 0x54
 80042b8:	737b      	strb	r3, [r7, #13]
	MUSART_u8TransmitArraySynch(V2G_USART_INDEX, &Local_u8SelectCmd   , 1 );
 80042ba:	f107 030d 	add.w	r3, r7, #13
 80042be:	2201      	movs	r2, #1
 80042c0:	4619      	mov	r1, r3
 80042c2:	2002      	movs	r0, #2
 80042c4:	f7ff fe60 	bl	8003f88 <MUSART_u8TransmitArraySynch>

	MUSART_u8ReceiveArraySynch(V2G_USART_INDEX, Local_u8ACTStatus, 2);
 80042c8:	f107 0308 	add.w	r3, r7, #8
 80042cc:	2202      	movs	r2, #2
 80042ce:	4619      	mov	r1, r3
 80042d0:	2002      	movs	r0, #2
 80042d2:	f7ff fdc5 	bl	8003e60 <MUSART_u8ReceiveArraySynch>
	if (Local_u8ACTStatus[0] == V2G_EV_ACK  )
 80042d6:	7a3b      	ldrb	r3, [r7, #8]
 80042d8:	2ba5      	cmp	r3, #165	; 0xa5
 80042da:	d10a      	bne.n	80042f2 <V2G_u8ChargingCost+0x6e>
	{
		MUSART_u8ReceiveArraySynch(V2G_USART_INDEX, Local_u8ReceivedData, Local_u8ACTStatus[1] );
 80042dc:	7a7a      	ldrb	r2, [r7, #9]
 80042de:	1d3b      	adds	r3, r7, #4
 80042e0:	4619      	mov	r1, r3
 80042e2:	2002      	movs	r0, #2
 80042e4:	f7ff fdbc 	bl	8003e60 <MUSART_u8ReceiveArraySynch>
		if (Local_u8ReceivedData[0] == V2G_EV_ADD_COST_SCCESS  )
 80042e8:	793b      	ldrb	r3, [r7, #4]
 80042ea:	2bb0      	cmp	r3, #176	; 0xb0
 80042ec:	d101      	bne.n	80042f2 <V2G_u8ChargingCost+0x6e>
		{
			Local_u8SuccessFlag = 1 ;
 80042ee:	2301      	movs	r3, #1
 80042f0:	73fb      	strb	r3, [r7, #15]
		}
	}
	return Local_u8SuccessFlag ;
 80042f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	0800516c 	.word	0x0800516c

08004300 <V2G_voidStartCharging>:
/*************************************************************************************************************/
/************************************* Start Charging ********************************************************/
/*************************************************************************************************************/
void V2G_voidStartCharging ( void )
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
	uint8_t Local_u8LengthToFollow  =  0  ;
 8004306:	2300      	movs	r3, #0
 8004308:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8SelectCmd       =  0  ;
 800430a:	2300      	movs	r3, #0
 800430c:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8ACTStatus[2]    = {0} ;
 800430e:	2300      	movs	r3, #0
 8004310:	80bb      	strh	r3, [r7, #4]
	uint8_t Local_u8ReceivedData[3] = {0} ;
 8004312:	4b14      	ldr	r3, [pc, #80]	; (8004364 <V2G_voidStartCharging+0x64>)
 8004314:	881b      	ldrh	r3, [r3, #0]
 8004316:	803b      	strh	r3, [r7, #0]
 8004318:	2300      	movs	r3, #0
 800431a:	70bb      	strb	r3, [r7, #2]

	Local_u8LengthToFollow = 1 ;
 800431c:	2301      	movs	r3, #1
 800431e:	71fb      	strb	r3, [r7, #7]
	MUSART_u8TransmitArraySynch(V2G_USART_INDEX, &Local_u8LengthToFollow, 1);
 8004320:	1dfb      	adds	r3, r7, #7
 8004322:	2201      	movs	r2, #1
 8004324:	4619      	mov	r1, r3
 8004326:	2002      	movs	r0, #2
 8004328:	f7ff fe2e 	bl	8003f88 <MUSART_u8TransmitArraySynch>
	Local_u8SelectCmd =  V2G_EV_START_CHARGING ;
 800432c:	2355      	movs	r3, #85	; 0x55
 800432e:	71bb      	strb	r3, [r7, #6]
	MUSART_u8TransmitArraySynch(V2G_USART_INDEX, &Local_u8SelectCmd, 1);
 8004330:	1dbb      	adds	r3, r7, #6
 8004332:	2201      	movs	r2, #1
 8004334:	4619      	mov	r1, r3
 8004336:	2002      	movs	r0, #2
 8004338:	f7ff fe26 	bl	8003f88 <MUSART_u8TransmitArraySynch>

	MUSART_u8ReceiveArrayNonBlocking(V2G_USART_INDEX, Local_u8ACTStatus, 2);
 800433c:	1d3b      	adds	r3, r7, #4
 800433e:	2202      	movs	r2, #2
 8004340:	4619      	mov	r1, r3
 8004342:	2002      	movs	r0, #2
 8004344:	f7ff fdb3 	bl	8003eae <MUSART_u8ReceiveArrayNonBlocking>
	if (Local_u8ACTStatus[0] == V2G_EV_ACK  )
 8004348:	793b      	ldrb	r3, [r7, #4]
 800434a:	2ba5      	cmp	r3, #165	; 0xa5
 800434c:	d105      	bne.n	800435a <V2G_voidStartCharging+0x5a>
	{
		MUSART_u8ReceiveArrayNonBlocking(V2G_USART_INDEX, Local_u8ReceivedData, Local_u8ACTStatus[1] );
 800434e:	797a      	ldrb	r2, [r7, #5]
 8004350:	463b      	mov	r3, r7
 8004352:	4619      	mov	r1, r3
 8004354:	2002      	movs	r0, #2
 8004356:	f7ff fdaa 	bl	8003eae <MUSART_u8ReceiveArrayNonBlocking>
		{
	        // What ?
		}

	}
}
 800435a:	bf00      	nop
 800435c:	3708      	adds	r7, #8
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	0800516c 	.word	0x0800516c

08004368 <V2G_voidEndCharging>:
/*************************************************************************************************************/
/************************************* END Charging **********************************************************/
/*************************************************************************************************************/
void V2G_voidEndCharging ( void )
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
	uint8_t Local_u8LengthToFollow  =  0  ;
 800436e:	2300      	movs	r3, #0
 8004370:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8SelectCmd       =  0  ;
 8004372:	2300      	movs	r3, #0
 8004374:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8ACTStatus[2]    = {0} ;
 8004376:	2300      	movs	r3, #0
 8004378:	80bb      	strh	r3, [r7, #4]
	uint8_t Local_u8ReceivedData[3] = {0} ;
 800437a:	4b14      	ldr	r3, [pc, #80]	; (80043cc <V2G_voidEndCharging+0x64>)
 800437c:	881b      	ldrh	r3, [r3, #0]
 800437e:	803b      	strh	r3, [r7, #0]
 8004380:	2300      	movs	r3, #0
 8004382:	70bb      	strb	r3, [r7, #2]

	Local_u8LengthToFollow = 1 ;
 8004384:	2301      	movs	r3, #1
 8004386:	71fb      	strb	r3, [r7, #7]
	MUSART_u8TransmitArraySynch(V2G_USART_INDEX, &Local_u8LengthToFollow, 1);
 8004388:	1dfb      	adds	r3, r7, #7
 800438a:	2201      	movs	r2, #1
 800438c:	4619      	mov	r1, r3
 800438e:	2002      	movs	r0, #2
 8004390:	f7ff fdfa 	bl	8003f88 <MUSART_u8TransmitArraySynch>
	Local_u8SelectCmd =   V2G_EV_END_CHARGING ;
 8004394:	2356      	movs	r3, #86	; 0x56
 8004396:	71bb      	strb	r3, [r7, #6]
	MUSART_u8TransmitArraySynch(V2G_USART_INDEX, &Local_u8SelectCmd, 1);
 8004398:	1dbb      	adds	r3, r7, #6
 800439a:	2201      	movs	r2, #1
 800439c:	4619      	mov	r1, r3
 800439e:	2002      	movs	r0, #2
 80043a0:	f7ff fdf2 	bl	8003f88 <MUSART_u8TransmitArraySynch>

	MUSART_u8ReceiveArrayNonBlocking(V2G_USART_INDEX, Local_u8ACTStatus, 2);
 80043a4:	1d3b      	adds	r3, r7, #4
 80043a6:	2202      	movs	r2, #2
 80043a8:	4619      	mov	r1, r3
 80043aa:	2002      	movs	r0, #2
 80043ac:	f7ff fd7f 	bl	8003eae <MUSART_u8ReceiveArrayNonBlocking>
	if (Local_u8ACTStatus[0] == V2G_EV_ACK  )
 80043b0:	793b      	ldrb	r3, [r7, #4]
 80043b2:	2ba5      	cmp	r3, #165	; 0xa5
 80043b4:	d105      	bne.n	80043c2 <V2G_voidEndCharging+0x5a>
	{
		MUSART_u8ReceiveArrayNonBlocking(V2G_USART_INDEX, Local_u8ReceivedData, Local_u8ACTStatus[1] );
 80043b6:	797a      	ldrb	r2, [r7, #5]
 80043b8:	463b      	mov	r3, r7
 80043ba:	4619      	mov	r1, r3
 80043bc:	2002      	movs	r0, #2
 80043be:	f7ff fd76 	bl	8003eae <MUSART_u8ReceiveArrayNonBlocking>
		if (Local_u8ReceivedData[0] ==  V2G_EV_ACCEPT_END_CHARGING )
		{
	        // What ?
		}
	}
}
 80043c2:	bf00      	nop
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	0800516c 	.word	0x0800516c

080043d0 <V2G_voidSendEnergyAmount>:
/*************************************************************************************************************/
/************************************* Send Energy Amount ****************************************************/
/*************************************************************************************************************/
void V2G_voidSendEnergyAmount (void )
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
	uint8_t Local_u8LengthToFollow  =  0  ;
 80043d6:	2300      	movs	r3, #0
 80043d8:	73bb      	strb	r3, [r7, #14]
	uint8_t Local_u8SelectCmd       =  0  ;
 80043da:	2300      	movs	r3, #0
 80043dc:	737b      	strb	r3, [r7, #13]
	uint8_t Local_u8ACTStatus[2]    = {0} ;
 80043de:	2300      	movs	r3, #0
 80043e0:	813b      	strh	r3, [r7, #8]
	uint8_t Local_u8ReceivedData[3] = {0} ;
 80043e2:	4b20      	ldr	r3, [pc, #128]	; (8004464 <V2G_voidSendEnergyAmount+0x94>)
 80043e4:	881b      	ldrh	r3, [r3, #0]
 80043e6:	80bb      	strh	r3, [r7, #4]
 80043e8:	2300      	movs	r3, #0
 80043ea:	71bb      	strb	r3, [r7, #6]

	uint8_t Local_u8Voltage  = SCARKIT_u8GetVoltageValue();
 80043ec:	f7fd f852 	bl	8001494 <SCARKIT_u8GetVoltageValue>
 80043f0:	4603      	mov	r3, r0
 80043f2:	73fb      	strb	r3, [r7, #15]
	//uint8_t Local_u8Voltage = 10 ;
	uint8_t Local_u8EnergyAmount =  (Local_u8Voltage*100)/12  ;
 80043f4:	7bfb      	ldrb	r3, [r7, #15]
 80043f6:	2264      	movs	r2, #100	; 0x64
 80043f8:	fb02 f303 	mul.w	r3, r2, r3
 80043fc:	4a1a      	ldr	r2, [pc, #104]	; (8004468 <V2G_voidSendEnergyAmount+0x98>)
 80043fe:	fb82 1203 	smull	r1, r2, r2, r3
 8004402:	1052      	asrs	r2, r2, #1
 8004404:	17db      	asrs	r3, r3, #31
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	b2db      	uxtb	r3, r3
 800440a:	70fb      	strb	r3, [r7, #3]


	Local_u8LengthToFollow = 2 ;
 800440c:	2302      	movs	r3, #2
 800440e:	73bb      	strb	r3, [r7, #14]
	MUSART_u8TransmitArraySynch(V2G_USART_INDEX, &Local_u8LengthToFollow, 1);
 8004410:	f107 030e 	add.w	r3, r7, #14
 8004414:	2201      	movs	r2, #1
 8004416:	4619      	mov	r1, r3
 8004418:	2002      	movs	r0, #2
 800441a:	f7ff fdb5 	bl	8003f88 <MUSART_u8TransmitArraySynch>
	Local_u8SelectCmd =  V2G_EV_SEND_ENERGY_AMOUNT ;
 800441e:	2357      	movs	r3, #87	; 0x57
 8004420:	737b      	strb	r3, [r7, #13]
	MUSART_u8TransmitArraySynch(V2G_USART_INDEX, &Local_u8SelectCmd   , 1);
 8004422:	f107 030d 	add.w	r3, r7, #13
 8004426:	2201      	movs	r2, #1
 8004428:	4619      	mov	r1, r3
 800442a:	2002      	movs	r0, #2
 800442c:	f7ff fdac 	bl	8003f88 <MUSART_u8TransmitArraySynch>
	MUSART_u8TransmitArraySynch(V2G_USART_INDEX, &Local_u8EnergyAmount, 1 );
 8004430:	1cfb      	adds	r3, r7, #3
 8004432:	2201      	movs	r2, #1
 8004434:	4619      	mov	r1, r3
 8004436:	2002      	movs	r0, #2
 8004438:	f7ff fda6 	bl	8003f88 <MUSART_u8TransmitArraySynch>

	MUSART_u8ReceiveArrayNonBlocking(V2G_USART_INDEX, Local_u8ACTStatus, 2);
 800443c:	f107 0308 	add.w	r3, r7, #8
 8004440:	2202      	movs	r2, #2
 8004442:	4619      	mov	r1, r3
 8004444:	2002      	movs	r0, #2
 8004446:	f7ff fd32 	bl	8003eae <MUSART_u8ReceiveArrayNonBlocking>
	if (Local_u8ACTStatus[0] == V2G_EV_ACK  )
 800444a:	7a3b      	ldrb	r3, [r7, #8]
 800444c:	2ba5      	cmp	r3, #165	; 0xa5
 800444e:	d105      	bne.n	800445c <V2G_voidSendEnergyAmount+0x8c>
	{
		MUSART_u8ReceiveArrayNonBlocking(V2G_USART_INDEX, Local_u8ReceivedData, Local_u8ACTStatus[1] );
 8004450:	7a7a      	ldrb	r2, [r7, #9]
 8004452:	1d3b      	adds	r3, r7, #4
 8004454:	4619      	mov	r1, r3
 8004456:	2002      	movs	r0, #2
 8004458:	f7ff fd29 	bl	8003eae <MUSART_u8ReceiveArrayNonBlocking>
		if (Local_u8ReceivedData[0] == V2G_EV_ACCEPT_UPDATE_ENARGY  )
		{
	        // What ?
		}
	}
}
 800445c:	bf00      	nop
 800445e:	3710      	adds	r7, #16
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	0800516c 	.word	0x0800516c
 8004468:	2aaaaaab 	.word	0x2aaaaaab

0800446c <USART1_voidCallBackFunc>:

volatile uint8_t Global_u8SpecialVehicleFlag     = 0 ;
volatile uint8_t Global_u8GUITrafficSignFlag     = 1 ;

void USART1_voidCallBackFunc ( uint8_t Copy_u8NotAckORSignID )
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	4603      	mov	r3, r0
 8004474:	71fb      	strb	r3, [r7, #7]
	switch (Copy_u8NotAckORSignID)
 8004476:	79fb      	ldrb	r3, [r7, #7]
 8004478:	3ba1      	subs	r3, #161	; 0xa1
 800447a:	2b2f      	cmp	r3, #47	; 0x2f
 800447c:	f200 80f4 	bhi.w	8004668 <USART1_voidCallBackFunc+0x1fc>
 8004480:	a201      	add	r2, pc, #4	; (adr r2, 8004488 <USART1_voidCallBackFunc+0x1c>)
 8004482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004486:	bf00      	nop
 8004488:	08004549 	.word	0x08004549
 800448c:	08004669 	.word	0x08004669
 8004490:	08004669 	.word	0x08004669
 8004494:	08004669 	.word	0x08004669
 8004498:	08004669 	.word	0x08004669
 800449c:	08004669 	.word	0x08004669
 80044a0:	08004669 	.word	0x08004669
 80044a4:	08004669 	.word	0x08004669
 80044a8:	08004669 	.word	0x08004669
 80044ac:	08004669 	.word	0x08004669
 80044b0:	08004669 	.word	0x08004669
 80044b4:	08004669 	.word	0x08004669
 80044b8:	08004669 	.word	0x08004669
 80044bc:	08004669 	.word	0x08004669
 80044c0:	08004669 	.word	0x08004669
 80044c4:	08004569 	.word	0x08004569
 80044c8:	0800458b 	.word	0x0800458b
 80044cc:	080045ad 	.word	0x080045ad
 80044d0:	08004669 	.word	0x08004669
 80044d4:	080045cf 	.word	0x080045cf
 80044d8:	080045f7 	.word	0x080045f7
 80044dc:	0800461f 	.word	0x0800461f
 80044e0:	08004669 	.word	0x08004669
 80044e4:	08004669 	.word	0x08004669
 80044e8:	08004669 	.word	0x08004669
 80044ec:	08004669 	.word	0x08004669
 80044f0:	08004669 	.word	0x08004669
 80044f4:	08004669 	.word	0x08004669
 80044f8:	08004669 	.word	0x08004669
 80044fc:	08004669 	.word	0x08004669
 8004500:	08004669 	.word	0x08004669
 8004504:	08004669 	.word	0x08004669
 8004508:	08004669 	.word	0x08004669
 800450c:	08004669 	.word	0x08004669
 8004510:	08004669 	.word	0x08004669
 8004514:	08004669 	.word	0x08004669
 8004518:	08004669 	.word	0x08004669
 800451c:	08004669 	.word	0x08004669
 8004520:	08004669 	.word	0x08004669
 8004524:	08004669 	.word	0x08004669
 8004528:	08004669 	.word	0x08004669
 800452c:	08004669 	.word	0x08004669
 8004530:	08004669 	.word	0x08004669
 8004534:	08004669 	.word	0x08004669
 8004538:	08004669 	.word	0x08004669
 800453c:	08004669 	.word	0x08004669
 8004540:	08004669 	.word	0x08004669
 8004544:	08004647 	.word	0x08004647
	{
	case V2X_NACK_FOUND :
		Global_u8FoundFlag   = 0 ;
 8004548:	4b51      	ldr	r3, [pc, #324]	; (8004690 <USART1_voidCallBackFunc+0x224>)
 800454a:	2200      	movs	r2, #0
 800454c:	701a      	strb	r2, [r3, #0]
		Global_u8GuiSignFlag = 1 ;
 800454e:	4b51      	ldr	r3, [pc, #324]	; (8004694 <USART1_voidCallBackFunc+0x228>)
 8004550:	2201      	movs	r2, #1
 8004552:	701a      	strb	r2, [r3, #0]
		MGPIO_u8TogPinValue          ( PORTA , PIN11       );
 8004554:	210b      	movs	r1, #11
 8004556:	2000      	movs	r0, #0
 8004558:	f7fd fc24 	bl	8001da4 <MGPIO_u8TogPinValue>
		MGPIO_u8SetPinValue          ( PORTA , PIN12 , LOW );
 800455c:	2200      	movs	r2, #0
 800455e:	210c      	movs	r1, #12
 8004560:	2000      	movs	r0, #0
 8004562:	f7fd fbe1 	bl	8001d28 <MGPIO_u8SetPinValue>
		break;
 8004566:	e07f      	b.n	8004668 <USART1_voidCallBackFunc+0x1fc>
	case V2I_ID_STOP :
		Global_u8FoundFlag   = 1 ;
 8004568:	4b49      	ldr	r3, [pc, #292]	; (8004690 <USART1_voidCallBackFunc+0x224>)
 800456a:	2201      	movs	r2, #1
 800456c:	701a      	strb	r2, [r3, #0]
		Global_u8GuiSignFlag = 2 ;
 800456e:	4b49      	ldr	r3, [pc, #292]	; (8004694 <USART1_voidCallBackFunc+0x228>)
 8004570:	2202      	movs	r2, #2
 8004572:	701a      	strb	r2, [r3, #0]
		MGPIO_u8SetPinValue         ( PORTA , PIN11 , LOW  );
 8004574:	2200      	movs	r2, #0
 8004576:	210b      	movs	r1, #11
 8004578:	2000      	movs	r0, #0
 800457a:	f7fd fbd5 	bl	8001d28 <MGPIO_u8SetPinValue>
		MGPIO_u8SetPinValue         ( PORTA , PIN12 , HIGH );
 800457e:	2201      	movs	r2, #1
 8004580:	210c      	movs	r1, #12
 8004582:	2000      	movs	r0, #0
 8004584:	f7fd fbd0 	bl	8001d28 <MGPIO_u8SetPinValue>

		break;
 8004588:	e06e      	b.n	8004668 <USART1_voidCallBackFunc+0x1fc>
	case V2I_ID_SPEED_50 :
		Global_u8FoundFlag   = 1 ;
 800458a:	4b41      	ldr	r3, [pc, #260]	; (8004690 <USART1_voidCallBackFunc+0x224>)
 800458c:	2201      	movs	r2, #1
 800458e:	701a      	strb	r2, [r3, #0]
		Global_u8GuiSignFlag = 3 ;
 8004590:	4b40      	ldr	r3, [pc, #256]	; (8004694 <USART1_voidCallBackFunc+0x228>)
 8004592:	2203      	movs	r2, #3
 8004594:	701a      	strb	r2, [r3, #0]
		MGPIO_u8SetPinValue         ( PORTA , PIN11 , LOW  );
 8004596:	2200      	movs	r2, #0
 8004598:	210b      	movs	r1, #11
 800459a:	2000      	movs	r0, #0
 800459c:	f7fd fbc4 	bl	8001d28 <MGPIO_u8SetPinValue>
		MGPIO_u8SetPinValue         ( PORTA , PIN12 , HIGH );
 80045a0:	2201      	movs	r2, #1
 80045a2:	210c      	movs	r1, #12
 80045a4:	2000      	movs	r0, #0
 80045a6:	f7fd fbbf 	bl	8001d28 <MGPIO_u8SetPinValue>
		break;
 80045aa:	e05d      	b.n	8004668 <USART1_voidCallBackFunc+0x1fc>
	case V2I_ID_SPEED_25 :
		Global_u8FoundFlag   = 1 ;
 80045ac:	4b38      	ldr	r3, [pc, #224]	; (8004690 <USART1_voidCallBackFunc+0x224>)
 80045ae:	2201      	movs	r2, #1
 80045b0:	701a      	strb	r2, [r3, #0]
		Global_u8GuiSignFlag = 4 ;
 80045b2:	4b38      	ldr	r3, [pc, #224]	; (8004694 <USART1_voidCallBackFunc+0x228>)
 80045b4:	2204      	movs	r2, #4
 80045b6:	701a      	strb	r2, [r3, #0]
		MGPIO_u8SetPinValue         ( PORTA , PIN11 , LOW  );
 80045b8:	2200      	movs	r2, #0
 80045ba:	210b      	movs	r1, #11
 80045bc:	2000      	movs	r0, #0
 80045be:	f7fd fbb3 	bl	8001d28 <MGPIO_u8SetPinValue>
		MGPIO_u8SetPinValue         ( PORTA , PIN12 , HIGH );
 80045c2:	2201      	movs	r2, #1
 80045c4:	210c      	movs	r1, #12
 80045c6:	2000      	movs	r0, #0
 80045c8:	f7fd fbae 	bl	8001d28 <MGPIO_u8SetPinValue>
		break;
 80045cc:	e04c      	b.n	8004668 <USART1_voidCallBackFunc+0x1fc>
	case V2I_ID_TRAFFIC_RED :
		Global_u8FoundFlag   = 1 ;
 80045ce:	4b30      	ldr	r3, [pc, #192]	; (8004690 <USART1_voidCallBackFunc+0x224>)
 80045d0:	2201      	movs	r2, #1
 80045d2:	701a      	strb	r2, [r3, #0]
		Global_u8GuiSignFlag = 5 ;
 80045d4:	4b2f      	ldr	r3, [pc, #188]	; (8004694 <USART1_voidCallBackFunc+0x228>)
 80045d6:	2205      	movs	r2, #5
 80045d8:	701a      	strb	r2, [r3, #0]
		MGPIO_u8SetPinValue         ( PORTA , PIN11 , LOW  );
 80045da:	2200      	movs	r2, #0
 80045dc:	210b      	movs	r1, #11
 80045de:	2000      	movs	r0, #0
 80045e0:	f7fd fba2 	bl	8001d28 <MGPIO_u8SetPinValue>
		MGPIO_u8SetPinValue         ( PORTA , PIN12 , HIGH );
 80045e4:	2201      	movs	r2, #1
 80045e6:	210c      	movs	r1, #12
 80045e8:	2000      	movs	r0, #0
 80045ea:	f7fd fb9d 	bl	8001d28 <MGPIO_u8SetPinValue>
		Global_u8SpecialVehicleFlag = 1 ;
 80045ee:	4b2a      	ldr	r3, [pc, #168]	; (8004698 <USART1_voidCallBackFunc+0x22c>)
 80045f0:	2201      	movs	r2, #1
 80045f2:	701a      	strb	r2, [r3, #0]
		break;
 80045f4:	e038      	b.n	8004668 <USART1_voidCallBackFunc+0x1fc>
	case V2I_ID_TRAFFIC_YELLOW :
		Global_u8FoundFlag   = 1 ;
 80045f6:	4b26      	ldr	r3, [pc, #152]	; (8004690 <USART1_voidCallBackFunc+0x224>)
 80045f8:	2201      	movs	r2, #1
 80045fa:	701a      	strb	r2, [r3, #0]
		Global_u8GuiSignFlag = 6 ;
 80045fc:	4b25      	ldr	r3, [pc, #148]	; (8004694 <USART1_voidCallBackFunc+0x228>)
 80045fe:	2206      	movs	r2, #6
 8004600:	701a      	strb	r2, [r3, #0]
		MGPIO_u8SetPinValue         ( PORTA , PIN11 , LOW  );
 8004602:	2200      	movs	r2, #0
 8004604:	210b      	movs	r1, #11
 8004606:	2000      	movs	r0, #0
 8004608:	f7fd fb8e 	bl	8001d28 <MGPIO_u8SetPinValue>
		MGPIO_u8SetPinValue         ( PORTA , PIN12 , HIGH );
 800460c:	2201      	movs	r2, #1
 800460e:	210c      	movs	r1, #12
 8004610:	2000      	movs	r0, #0
 8004612:	f7fd fb89 	bl	8001d28 <MGPIO_u8SetPinValue>
		Global_u8SpecialVehicleFlag = 0 ;
 8004616:	4b20      	ldr	r3, [pc, #128]	; (8004698 <USART1_voidCallBackFunc+0x22c>)
 8004618:	2200      	movs	r2, #0
 800461a:	701a      	strb	r2, [r3, #0]
		break;
 800461c:	e024      	b.n	8004668 <USART1_voidCallBackFunc+0x1fc>
	case V2I_ID_TRAFFIC_GREAN :
		Global_u8FoundFlag   = 1 ;
 800461e:	4b1c      	ldr	r3, [pc, #112]	; (8004690 <USART1_voidCallBackFunc+0x224>)
 8004620:	2201      	movs	r2, #1
 8004622:	701a      	strb	r2, [r3, #0]
		Global_u8GuiSignFlag = 7 ;
 8004624:	4b1b      	ldr	r3, [pc, #108]	; (8004694 <USART1_voidCallBackFunc+0x228>)
 8004626:	2207      	movs	r2, #7
 8004628:	701a      	strb	r2, [r3, #0]
		MGPIO_u8SetPinValue         ( PORTA , PIN11 , LOW  );
 800462a:	2200      	movs	r2, #0
 800462c:	210b      	movs	r1, #11
 800462e:	2000      	movs	r0, #0
 8004630:	f7fd fb7a 	bl	8001d28 <MGPIO_u8SetPinValue>
		MGPIO_u8SetPinValue         ( PORTA , PIN12 , HIGH );
 8004634:	2201      	movs	r2, #1
 8004636:	210c      	movs	r1, #12
 8004638:	2000      	movs	r0, #0
 800463a:	f7fd fb75 	bl	8001d28 <MGPIO_u8SetPinValue>
		Global_u8SpecialVehicleFlag = 0 ;
 800463e:	4b16      	ldr	r3, [pc, #88]	; (8004698 <USART1_voidCallBackFunc+0x22c>)
 8004640:	2200      	movs	r2, #0
 8004642:	701a      	strb	r2, [r3, #0]
		break;
 8004644:	e010      	b.n	8004668 <USART1_voidCallBackFunc+0x1fc>
	case V2P_ID_VEHICLE_PEDESTRIAN :
		Global_u8FoundFlag   = 1 ;
 8004646:	4b12      	ldr	r3, [pc, #72]	; (8004690 <USART1_voidCallBackFunc+0x224>)
 8004648:	2201      	movs	r2, #1
 800464a:	701a      	strb	r2, [r3, #0]
		Global_u8GuiSignFlag = 8 ;
 800464c:	4b11      	ldr	r3, [pc, #68]	; (8004694 <USART1_voidCallBackFunc+0x228>)
 800464e:	2208      	movs	r2, #8
 8004650:	701a      	strb	r2, [r3, #0]
		MGPIO_u8SetPinValue         ( PORTA , PIN11 , LOW  );
 8004652:	2200      	movs	r2, #0
 8004654:	210b      	movs	r1, #11
 8004656:	2000      	movs	r0, #0
 8004658:	f7fd fb66 	bl	8001d28 <MGPIO_u8SetPinValue>
		MGPIO_u8SetPinValue         ( PORTA , PIN12 , HIGH );
 800465c:	2201      	movs	r2, #1
 800465e:	210c      	movs	r1, #12
 8004660:	2000      	movs	r0, #0
 8004662:	f7fd fb61 	bl	8001d28 <MGPIO_u8SetPinValue>

		break;
 8004666:	bf00      	nop
	}
	if ( Copy_u8NotAckORSignID != Global_u8PreviousNotAckORSignID)
 8004668:	4b0c      	ldr	r3, [pc, #48]	; (800469c <USART1_voidCallBackFunc+0x230>)
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	b2db      	uxtb	r3, r3
 800466e:	79fa      	ldrb	r2, [r7, #7]
 8004670:	429a      	cmp	r2, r3
 8004672:	d005      	beq.n	8004680 <USART1_voidCallBackFunc+0x214>
	{
		Global_u8PreviousNotAckORSignID = Copy_u8NotAckORSignID ;
 8004674:	4a09      	ldr	r2, [pc, #36]	; (800469c <USART1_voidCallBackFunc+0x230>)
 8004676:	79fb      	ldrb	r3, [r7, #7]
 8004678:	7013      	strb	r3, [r2, #0]
		Global_u8GuiFristSignFlag = 1 ;
 800467a:	4b09      	ldr	r3, [pc, #36]	; (80046a0 <USART1_voidCallBackFunc+0x234>)
 800467c:	2201      	movs	r2, #1
 800467e:	701a      	strb	r2, [r3, #0]
	}
	Global_u8ReceiveFlag = 0 ;
 8004680:	4b08      	ldr	r3, [pc, #32]	; (80046a4 <USART1_voidCallBackFunc+0x238>)
 8004682:	2200      	movs	r2, #0
 8004684:	701a      	strb	r2, [r3, #0]
}
 8004686:	bf00      	nop
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	20000108 	.word	0x20000108
 8004694:	2000010a 	.word	0x2000010a
 8004698:	2000010c 	.word	0x2000010c
 800469c:	2000004c 	.word	0x2000004c
 80046a0:	2000010b 	.word	0x2000010b
 80046a4:	20000109 	.word	0x20000109

080046a8 <V2X_voidCheckIorP>:
void V2X_voidCheckIorP ( void )
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
	uint8_t Local_u8LengthToFollow  =  0  ;
 80046ae:	2300      	movs	r3, #0
 80046b0:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8SelectCmd       =  0  ;
 80046b2:	2300      	movs	r3, #0
 80046b4:	71bb      	strb	r3, [r7, #6]
	Local_u8LengthToFollow = 1 ;
 80046b6:	2301      	movs	r3, #1
 80046b8:	71fb      	strb	r3, [r7, #7]
	MUSART_u8TransmitArraySynch(USART_1 , &Local_u8LengthToFollow , 1);
 80046ba:	1dfb      	adds	r3, r7, #7
 80046bc:	2201      	movs	r2, #1
 80046be:	4619      	mov	r1, r3
 80046c0:	2000      	movs	r0, #0
 80046c2:	f7ff fc61 	bl	8003f88 <MUSART_u8TransmitArraySynch>
	Local_u8SelectCmd =  V2X_CHECK_OBJECT ;
 80046c6:	23a2      	movs	r3, #162	; 0xa2
 80046c8:	71bb      	strb	r3, [r7, #6]
	MUSART_u8TransmitArraySynch(USART_1 , &Local_u8SelectCmd      , 1);
 80046ca:	1dbb      	adds	r3, r7, #6
 80046cc:	2201      	movs	r2, #1
 80046ce:	4619      	mov	r1, r3
 80046d0:	2000      	movs	r0, #0
 80046d2:	f7ff fc59 	bl	8003f88 <MUSART_u8TransmitArraySynch>
}
 80046d6:	bf00      	nop
 80046d8:	3708      	adds	r7, #8
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
	...

080046e0 <USART2_voidCallBackFunc>:
/**************************************************** Call Back Functions *******************************************************************/
/********************************************************************************************************************************************/
volatile uint8_t  Global_u8BluetoothPreviousAction = 0  ;
volatile uint8_t  Global_u8SpeedValue              = 50 ;
void USART2_voidCallBackFunc ( uint8_t Copy_u8BluetoothAction )
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	4603      	mov	r3, r0
 80046e8:	71fb      	strb	r3, [r7, #7]
	/*********************************************************************/
	if ( Copy_u8BluetoothAction != Global_u8BluetoothPreviousAction )
 80046ea:	4b94      	ldr	r3, [pc, #592]	; (800493c <USART2_voidCallBackFunc+0x25c>)
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	79fa      	ldrb	r2, [r7, #7]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	f000 811c 	beq.w	8004930 <USART2_voidCallBackFunc+0x250>
	{
		Global_u8BluetoothPreviousAction = Copy_u8BluetoothAction ;
 80046f8:	4a90      	ldr	r2, [pc, #576]	; (800493c <USART2_voidCallBackFunc+0x25c>)
 80046fa:	79fb      	ldrb	r3, [r7, #7]
 80046fc:	7013      	strb	r3, [r2, #0]
		switch (Copy_u8BluetoothAction)
 80046fe:	79fb      	ldrb	r3, [r7, #7]
 8004700:	3b31      	subs	r3, #49	; 0x31
 8004702:	2b40      	cmp	r3, #64	; 0x40
 8004704:	f200 8115 	bhi.w	8004932 <USART2_voidCallBackFunc+0x252>
 8004708:	a201      	add	r2, pc, #4	; (adr r2, 8004710 <USART2_voidCallBackFunc+0x30>)
 800470a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800470e:	bf00      	nop
 8004710:	08004891 	.word	0x08004891
 8004714:	080048a1 	.word	0x080048a1
 8004718:	080048b1 	.word	0x080048b1
 800471c:	080048c1 	.word	0x080048c1
 8004720:	080048d1 	.word	0x080048d1
 8004724:	080048e1 	.word	0x080048e1
 8004728:	080048f1 	.word	0x080048f1
 800472c:	08004901 	.word	0x08004901
 8004730:	08004911 	.word	0x08004911
 8004734:	08004933 	.word	0x08004933
 8004738:	08004933 	.word	0x08004933
 800473c:	08004933 	.word	0x08004933
 8004740:	08004933 	.word	0x08004933
 8004744:	08004933 	.word	0x08004933
 8004748:	08004933 	.word	0x08004933
 800474c:	08004933 	.word	0x08004933
 8004750:	08004933 	.word	0x08004933
 8004754:	0800482f 	.word	0x0800482f
 8004758:	08004933 	.word	0x08004933
 800475c:	08004933 	.word	0x08004933
 8004760:	08004933 	.word	0x08004933
 8004764:	08004815 	.word	0x08004815
 8004768:	08004933 	.word	0x08004933
 800476c:	08004933 	.word	0x08004933
 8004770:	08004933 	.word	0x08004933
 8004774:	08004933 	.word	0x08004933
 8004778:	08004933 	.word	0x08004933
 800477c:	08004863 	.word	0x08004863
 8004780:	08004933 	.word	0x08004933
 8004784:	08004933 	.word	0x08004933
 8004788:	08004933 	.word	0x08004933
 800478c:	08004933 	.word	0x08004933
 8004790:	08004933 	.word	0x08004933
 8004794:	08004849 	.word	0x08004849
 8004798:	0800487d 	.word	0x0800487d
 800479c:	08004933 	.word	0x08004933
 80047a0:	08004933 	.word	0x08004933
 80047a4:	08004933 	.word	0x08004933
 80047a8:	08004933 	.word	0x08004933
 80047ac:	08004933 	.word	0x08004933
 80047b0:	08004933 	.word	0x08004933
 80047b4:	08004933 	.word	0x08004933
 80047b8:	08004933 	.word	0x08004933
 80047bc:	08004933 	.word	0x08004933
 80047c0:	08004933 	.word	0x08004933
 80047c4:	08004933 	.word	0x08004933
 80047c8:	08004933 	.word	0x08004933
 80047cc:	08004933 	.word	0x08004933
 80047d0:	08004933 	.word	0x08004933
 80047d4:	08004933 	.word	0x08004933
 80047d8:	08004933 	.word	0x08004933
 80047dc:	08004933 	.word	0x08004933
 80047e0:	08004933 	.word	0x08004933
 80047e4:	08004933 	.word	0x08004933
 80047e8:	08004933 	.word	0x08004933
 80047ec:	08004933 	.word	0x08004933
 80047f0:	08004933 	.word	0x08004933
 80047f4:	08004933 	.word	0x08004933
 80047f8:	08004933 	.word	0x08004933
 80047fc:	08004933 	.word	0x08004933
 8004800:	08004933 	.word	0x08004933
 8004804:	08004933 	.word	0x08004933
 8004808:	08004933 	.word	0x08004933
 800480c:	08004933 	.word	0x08004933
 8004810:	08004921 	.word	0x08004921
		{
		case 'F':
			SCARKIT_voidCarDirection(CAR_FORWARD);
 8004814:	2000      	movs	r0, #0
 8004816:	f7fc fec7 	bl	80015a8 <SCARKIT_voidCarDirection>
			SGUI_voidUpdateDirection(GUI_FORWARD);
 800481a:	2000      	movs	r0, #0
 800481c:	f7fd fd84 	bl	8002328 <SGUI_voidUpdateDirection>
			SGUI_voidUpdateSpeed(Global_u8SpeedValue);
 8004820:	4b47      	ldr	r3, [pc, #284]	; (8004940 <USART2_voidCallBackFunc+0x260>)
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	b2db      	uxtb	r3, r3
 8004826:	4618      	mov	r0, r3
 8004828:	f7fd fcfc 	bl	8002224 <SGUI_voidUpdateSpeed>
			break;
 800482c:	e081      	b.n	8004932 <USART2_voidCallBackFunc+0x252>
		case 'B':
			SCARKIT_voidCarDirection(CAR_BACKWARD);
 800482e:	2003      	movs	r0, #3
 8004830:	f7fc feba 	bl	80015a8 <SCARKIT_voidCarDirection>
			SGUI_voidUpdateDirection(GUI_BACKWARD);
 8004834:	2003      	movs	r0, #3
 8004836:	f7fd fd77 	bl	8002328 <SGUI_voidUpdateDirection>
			SGUI_voidUpdateSpeed(Global_u8SpeedValue);
 800483a:	4b41      	ldr	r3, [pc, #260]	; (8004940 <USART2_voidCallBackFunc+0x260>)
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	b2db      	uxtb	r3, r3
 8004840:	4618      	mov	r0, r3
 8004842:	f7fd fcef 	bl	8002224 <SGUI_voidUpdateSpeed>
			break;
 8004846:	e074      	b.n	8004932 <USART2_voidCallBackFunc+0x252>
		case 'R':
			SCARKIT_voidCarDirection(CAR_RIGHT);
 8004848:	2001      	movs	r0, #1
 800484a:	f7fc fead 	bl	80015a8 <SCARKIT_voidCarDirection>
			SGUI_voidUpdateDirection(GUI_RIGHT);
 800484e:	2001      	movs	r0, #1
 8004850:	f7fd fd6a 	bl	8002328 <SGUI_voidUpdateDirection>
			SGUI_voidUpdateSpeed(Global_u8SpeedValue);
 8004854:	4b3a      	ldr	r3, [pc, #232]	; (8004940 <USART2_voidCallBackFunc+0x260>)
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	b2db      	uxtb	r3, r3
 800485a:	4618      	mov	r0, r3
 800485c:	f7fd fce2 	bl	8002224 <SGUI_voidUpdateSpeed>
			break;
 8004860:	e067      	b.n	8004932 <USART2_voidCallBackFunc+0x252>
		case 'L':
			SCARKIT_voidCarDirection(CAR_LEFT);
 8004862:	2002      	movs	r0, #2
 8004864:	f7fc fea0 	bl	80015a8 <SCARKIT_voidCarDirection>
			SGUI_voidUpdateDirection(GUI_LEFT);
 8004868:	2002      	movs	r0, #2
 800486a:	f7fd fd5d 	bl	8002328 <SGUI_voidUpdateDirection>
			SGUI_voidUpdateSpeed(Global_u8SpeedValue);
 800486e:	4b34      	ldr	r3, [pc, #208]	; (8004940 <USART2_voidCallBackFunc+0x260>)
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	b2db      	uxtb	r3, r3
 8004874:	4618      	mov	r0, r3
 8004876:	f7fd fcd5 	bl	8002224 <SGUI_voidUpdateSpeed>
			break;
 800487a:	e05a      	b.n	8004932 <USART2_voidCallBackFunc+0x252>
		case 'S':
			SCARKIT_voidCarDirection(CAR_STOP);
 800487c:	2004      	movs	r0, #4
 800487e:	f7fc fe93 	bl	80015a8 <SCARKIT_voidCarDirection>
			SGUI_voidUpdateDirection(GUI_STOP);
 8004882:	2004      	movs	r0, #4
 8004884:	f7fd fd50 	bl	8002328 <SGUI_voidUpdateDirection>
			SGUI_voidUpdateSpeed(0);
 8004888:	2000      	movs	r0, #0
 800488a:	f7fd fccb 	bl	8002224 <SGUI_voidUpdateSpeed>
			break;
 800488e:	e050      	b.n	8004932 <USART2_voidCallBackFunc+0x252>
		case '1':
			SCARKIT_voidCarSpeed(SPEED_BOTH_WHEEL,10);
 8004890:	210a      	movs	r1, #10
 8004892:	2002      	movs	r0, #2
 8004894:	f7fc fe4e 	bl	8001534 <SCARKIT_voidCarSpeed>
			Global_u8SpeedValue=10;
 8004898:	4b29      	ldr	r3, [pc, #164]	; (8004940 <USART2_voidCallBackFunc+0x260>)
 800489a:	220a      	movs	r2, #10
 800489c:	701a      	strb	r2, [r3, #0]
			break;
 800489e:	e048      	b.n	8004932 <USART2_voidCallBackFunc+0x252>
		case '2':
			SCARKIT_voidCarSpeed(SPEED_BOTH_WHEEL,20);
 80048a0:	2114      	movs	r1, #20
 80048a2:	2002      	movs	r0, #2
 80048a4:	f7fc fe46 	bl	8001534 <SCARKIT_voidCarSpeed>
			Global_u8SpeedValue=20;
 80048a8:	4b25      	ldr	r3, [pc, #148]	; (8004940 <USART2_voidCallBackFunc+0x260>)
 80048aa:	2214      	movs	r2, #20
 80048ac:	701a      	strb	r2, [r3, #0]
			break;
 80048ae:	e040      	b.n	8004932 <USART2_voidCallBackFunc+0x252>
		case '3':
			SCARKIT_voidCarSpeed(SPEED_BOTH_WHEEL,30);
 80048b0:	211e      	movs	r1, #30
 80048b2:	2002      	movs	r0, #2
 80048b4:	f7fc fe3e 	bl	8001534 <SCARKIT_voidCarSpeed>
			Global_u8SpeedValue=30;
 80048b8:	4b21      	ldr	r3, [pc, #132]	; (8004940 <USART2_voidCallBackFunc+0x260>)
 80048ba:	221e      	movs	r2, #30
 80048bc:	701a      	strb	r2, [r3, #0]
			break;
 80048be:	e038      	b.n	8004932 <USART2_voidCallBackFunc+0x252>
		case '4':
			SCARKIT_voidCarSpeed(SPEED_BOTH_WHEEL,40);
 80048c0:	2128      	movs	r1, #40	; 0x28
 80048c2:	2002      	movs	r0, #2
 80048c4:	f7fc fe36 	bl	8001534 <SCARKIT_voidCarSpeed>
			Global_u8SpeedValue=40;
 80048c8:	4b1d      	ldr	r3, [pc, #116]	; (8004940 <USART2_voidCallBackFunc+0x260>)
 80048ca:	2228      	movs	r2, #40	; 0x28
 80048cc:	701a      	strb	r2, [r3, #0]
			break;
 80048ce:	e030      	b.n	8004932 <USART2_voidCallBackFunc+0x252>
		case '5':
			SCARKIT_voidCarSpeed(SPEED_BOTH_WHEEL,50);
 80048d0:	2132      	movs	r1, #50	; 0x32
 80048d2:	2002      	movs	r0, #2
 80048d4:	f7fc fe2e 	bl	8001534 <SCARKIT_voidCarSpeed>
			Global_u8SpeedValue=50;
 80048d8:	4b19      	ldr	r3, [pc, #100]	; (8004940 <USART2_voidCallBackFunc+0x260>)
 80048da:	2232      	movs	r2, #50	; 0x32
 80048dc:	701a      	strb	r2, [r3, #0]
			break;
 80048de:	e028      	b.n	8004932 <USART2_voidCallBackFunc+0x252>
		case '6':
			SCARKIT_voidCarSpeed(SPEED_BOTH_WHEEL,60);
 80048e0:	213c      	movs	r1, #60	; 0x3c
 80048e2:	2002      	movs	r0, #2
 80048e4:	f7fc fe26 	bl	8001534 <SCARKIT_voidCarSpeed>
			Global_u8SpeedValue=60;
 80048e8:	4b15      	ldr	r3, [pc, #84]	; (8004940 <USART2_voidCallBackFunc+0x260>)
 80048ea:	223c      	movs	r2, #60	; 0x3c
 80048ec:	701a      	strb	r2, [r3, #0]
			break;
 80048ee:	e020      	b.n	8004932 <USART2_voidCallBackFunc+0x252>
		case '7':
			SCARKIT_voidCarSpeed(SPEED_BOTH_WHEEL,70);
 80048f0:	2146      	movs	r1, #70	; 0x46
 80048f2:	2002      	movs	r0, #2
 80048f4:	f7fc fe1e 	bl	8001534 <SCARKIT_voidCarSpeed>
			Global_u8SpeedValue=70;
 80048f8:	4b11      	ldr	r3, [pc, #68]	; (8004940 <USART2_voidCallBackFunc+0x260>)
 80048fa:	2246      	movs	r2, #70	; 0x46
 80048fc:	701a      	strb	r2, [r3, #0]
			break;
 80048fe:	e018      	b.n	8004932 <USART2_voidCallBackFunc+0x252>
		case '8':
			SCARKIT_voidCarSpeed(SPEED_BOTH_WHEEL,80);
 8004900:	2150      	movs	r1, #80	; 0x50
 8004902:	2002      	movs	r0, #2
 8004904:	f7fc fe16 	bl	8001534 <SCARKIT_voidCarSpeed>
			Global_u8SpeedValue=80;
 8004908:	4b0d      	ldr	r3, [pc, #52]	; (8004940 <USART2_voidCallBackFunc+0x260>)
 800490a:	2250      	movs	r2, #80	; 0x50
 800490c:	701a      	strb	r2, [r3, #0]
			break;
 800490e:	e010      	b.n	8004932 <USART2_voidCallBackFunc+0x252>
		case '9':
			SCARKIT_voidCarSpeed(SPEED_BOTH_WHEEL,90);
 8004910:	215a      	movs	r1, #90	; 0x5a
 8004912:	2002      	movs	r0, #2
 8004914:	f7fc fe0e 	bl	8001534 <SCARKIT_voidCarSpeed>
			Global_u8SpeedValue=90;
 8004918:	4b09      	ldr	r3, [pc, #36]	; (8004940 <USART2_voidCallBackFunc+0x260>)
 800491a:	225a      	movs	r2, #90	; 0x5a
 800491c:	701a      	strb	r2, [r3, #0]
			break;
 800491e:	e008      	b.n	8004932 <USART2_voidCallBackFunc+0x252>
		case 'q':
			SCARKIT_voidCarSpeed(SPEED_BOTH_WHEEL,100);
 8004920:	2164      	movs	r1, #100	; 0x64
 8004922:	2002      	movs	r0, #2
 8004924:	f7fc fe06 	bl	8001534 <SCARKIT_voidCarSpeed>
			Global_u8SpeedValue=100;
 8004928:	4b05      	ldr	r3, [pc, #20]	; (8004940 <USART2_voidCallBackFunc+0x260>)
 800492a:	2264      	movs	r2, #100	; 0x64
 800492c:	701a      	strb	r2, [r3, #0]
			break;
 800492e:	e000      	b.n	8004932 <USART2_voidCallBackFunc+0x252>
		}
	}
 8004930:	bf00      	nop
	/*********************************************************************/
}
 8004932:	bf00      	nop
 8004934:	3708      	adds	r7, #8
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	2000010d 	.word	0x2000010d
 8004940:	2000004e 	.word	0x2000004e

08004944 <V2X_voidSpecialVehicle>:
/********************************************************************************************************************************************/
/********************************************************************************************************************************************/
/********************************************************************************************************************************************/
void V2X_voidSpecialVehicle ( void )
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
	uint8_t Local_u8LengthToFollow  =  0  ;
 800494a:	2300      	movs	r3, #0
 800494c:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8SelectCmd       =  0  ;
 800494e:	2300      	movs	r3, #0
 8004950:	71bb      	strb	r3, [r7, #6]
	Local_u8LengthToFollow = 1 ;
 8004952:	2301      	movs	r3, #1
 8004954:	71fb      	strb	r3, [r7, #7]
	MUSART_u8TransmitArraySynch(USART_1 , &Local_u8LengthToFollow , 1);
 8004956:	1dfb      	adds	r3, r7, #7
 8004958:	2201      	movs	r2, #1
 800495a:	4619      	mov	r1, r3
 800495c:	2000      	movs	r0, #0
 800495e:	f7ff fb13 	bl	8003f88 <MUSART_u8TransmitArraySynch>
	Local_u8SelectCmd =  V2X_SPECIAL_VEHICLE ;
 8004962:	23a3      	movs	r3, #163	; 0xa3
 8004964:	71bb      	strb	r3, [r7, #6]
	MUSART_u8TransmitArraySynch(USART_1 , &Local_u8SelectCmd      , 1);
 8004966:	1dbb      	adds	r3, r7, #6
 8004968:	2201      	movs	r2, #1
 800496a:	4619      	mov	r1, r3
 800496c:	2000      	movs	r0, #0
 800496e:	f7ff fb0b 	bl	8003f88 <MUSART_u8TransmitArraySynch>
}
 8004972:	bf00      	nop
 8004974:	3708      	adds	r7, #8
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
	...

0800497c <EXTI_voidPB15CallBack>:
void EXTI_voidPB15CallBack ( void )
{
 800497c:	b580      	push	{r7, lr}
 800497e:	af00      	add	r7, sp, #0
	if ( Global_u8SpecialVehicleFlag == 1 )
 8004980:	4b05      	ldr	r3, [pc, #20]	; (8004998 <EXTI_voidPB15CallBack+0x1c>)
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b01      	cmp	r3, #1
 8004988:	d104      	bne.n	8004994 <EXTI_voidPB15CallBack+0x18>
	{
		V2X_voidSpecialVehicle();
 800498a:	f7ff ffdb 	bl	8004944 <V2X_voidSpecialVehicle>
		Global_u8SpecialVehicleFlag = 0;
 800498e:	4b02      	ldr	r3, [pc, #8]	; (8004998 <EXTI_voidPB15CallBack+0x1c>)
 8004990:	2200      	movs	r2, #0
 8004992:	701a      	strb	r2, [r3, #0]
	}
}
 8004994:	bf00      	nop
 8004996:	bd80      	pop	{r7, pc}
 8004998:	2000010c 	.word	0x2000010c

0800499c <EXTI_voidPB14CallBack>:
volatile uint8_t Global_u8StartCounter = 0 ;
volatile uint8_t Global_u8ModeFlag     = 0 ;
volatile uint8_t Global_u8InitVoltage  = 5 ;
void EXTI_voidPB14CallBack ( void )
{
 800499c:	b580      	push	{r7, lr}
 800499e:	af00      	add	r7, sp, #0
	if ( Global_u8StartCounter ==  0 )
 80049a0:	4b33      	ldr	r3, [pc, #204]	; (8004a70 <EXTI_voidPB14CallBack+0xd4>)
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d160      	bne.n	8004a6c <EXTI_voidPB14CallBack+0xd0>
	{
		Global_u8StartCounter =  V2G_u8PlugCable();
 80049aa:	f7ff fb8b 	bl	80040c4 <V2G_u8PlugCable>
 80049ae:	4603      	mov	r3, r0
 80049b0:	461a      	mov	r2, r3
 80049b2:	4b2f      	ldr	r3, [pc, #188]	; (8004a70 <EXTI_voidPB14CallBack+0xd4>)
 80049b4:	701a      	strb	r2, [r3, #0]
		STIMERS_voidDelayMS(1000);
 80049b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80049ba:	f7fe ff1e 	bl	80037fa <STIMERS_voidDelayMS>
		if ( Global_u8StartCounter ==  1 )
 80049be:	4b2c      	ldr	r3, [pc, #176]	; (8004a70 <EXTI_voidPB14CallBack+0xd4>)
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d14e      	bne.n	8004a66 <EXTI_voidPB14CallBack+0xca>
		{
			Global_u8StartCounter += V2G_u8Identification();
 80049c8:	f7ff fbb8 	bl	800413c <V2G_u8Identification>
 80049cc:	4603      	mov	r3, r0
 80049ce:	461a      	mov	r2, r3
 80049d0:	4b27      	ldr	r3, [pc, #156]	; (8004a70 <EXTI_voidPB14CallBack+0xd4>)
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	4413      	add	r3, r2
 80049d8:	b2da      	uxtb	r2, r3
 80049da:	4b25      	ldr	r3, [pc, #148]	; (8004a70 <EXTI_voidPB14CallBack+0xd4>)
 80049dc:	701a      	strb	r2, [r3, #0]
			STIMERS_voidDelayMS(1000);
 80049de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80049e2:	f7fe ff0a 	bl	80037fa <STIMERS_voidDelayMS>
			if ( Global_u8StartCounter ==  2 )
 80049e6:	4b22      	ldr	r3, [pc, #136]	; (8004a70 <EXTI_voidPB14CallBack+0xd4>)
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d136      	bne.n	8004a5e <EXTI_voidPB14CallBack+0xc2>
			{
				Global_u8StartCounter += V2G_u8ChargeParameter();
 80049f0:	f7ff fbf2 	bl	80041d8 <V2G_u8ChargeParameter>
 80049f4:	4603      	mov	r3, r0
 80049f6:	461a      	mov	r2, r3
 80049f8:	4b1d      	ldr	r3, [pc, #116]	; (8004a70 <EXTI_voidPB14CallBack+0xd4>)
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	4413      	add	r3, r2
 8004a00:	b2da      	uxtb	r2, r3
 8004a02:	4b1b      	ldr	r3, [pc, #108]	; (8004a70 <EXTI_voidPB14CallBack+0xd4>)
 8004a04:	701a      	strb	r2, [r3, #0]
				STIMERS_voidDelayMS(1000);
 8004a06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a0a:	f7fe fef6 	bl	80037fa <STIMERS_voidDelayMS>
				if ( Global_u8StartCounter ==  3 )
 8004a0e:	4b18      	ldr	r3, [pc, #96]	; (8004a70 <EXTI_voidPB14CallBack+0xd4>)
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b03      	cmp	r3, #3
 8004a16:	d11e      	bne.n	8004a56 <EXTI_voidPB14CallBack+0xba>
				{
					V2G_voidStartCharging();
 8004a18:	f7ff fc72 	bl	8004300 <V2G_voidStartCharging>
					SGUI_voidV2GStartEnd(GUI_V2G_START);
 8004a1c:	2001      	movs	r0, #1
 8004a1e:	f7fe f8d7 	bl	8002bd0 <SGUI_voidV2GStartEnd>
					Global_u8StartCounter++;
 8004a22:	4b13      	ldr	r3, [pc, #76]	; (8004a70 <EXTI_voidPB14CallBack+0xd4>)
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	3301      	adds	r3, #1
 8004a2a:	b2da      	uxtb	r2, r3
 8004a2c:	4b10      	ldr	r3, [pc, #64]	; (8004a70 <EXTI_voidPB14CallBack+0xd4>)
 8004a2e:	701a      	strb	r2, [r3, #0]
					STIMERS_voidDelayMS(1000);
 8004a30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a34:	f7fe fee1 	bl	80037fa <STIMERS_voidDelayMS>
					SGUI_voidV2GBattaryLimit ( Global_u8InitVoltage , 1 );
 8004a38:	4b0e      	ldr	r3, [pc, #56]	; (8004a74 <EXTI_voidPB14CallBack+0xd8>)
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2101      	movs	r1, #1
 8004a40:	4618      	mov	r0, r3
 8004a42:	f7fd ff91 	bl	8002968 <SGUI_voidV2GBattaryLimit>
					STIMERS_voidDelayMS(1000);
 8004a46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a4a:	f7fe fed6 	bl	80037fa <STIMERS_voidDelayMS>
					Global_u8ModeFlag  = 1 ;
 8004a4e:	4b0a      	ldr	r3, [pc, #40]	; (8004a78 <EXTI_voidPB14CallBack+0xdc>)
 8004a50:	2201      	movs	r2, #1
 8004a52:	701a      	strb	r2, [r3, #0]
		else
		{
			Global_u8StartCounter = 0 ;
		}
	}
}
 8004a54:	e00a      	b.n	8004a6c <EXTI_voidPB14CallBack+0xd0>
					Global_u8StartCounter = 0 ;
 8004a56:	4b06      	ldr	r3, [pc, #24]	; (8004a70 <EXTI_voidPB14CallBack+0xd4>)
 8004a58:	2200      	movs	r2, #0
 8004a5a:	701a      	strb	r2, [r3, #0]
}
 8004a5c:	e006      	b.n	8004a6c <EXTI_voidPB14CallBack+0xd0>
				Global_u8StartCounter = 0 ;
 8004a5e:	4b04      	ldr	r3, [pc, #16]	; (8004a70 <EXTI_voidPB14CallBack+0xd4>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	701a      	strb	r2, [r3, #0]
}
 8004a64:	e002      	b.n	8004a6c <EXTI_voidPB14CallBack+0xd0>
			Global_u8StartCounter = 0 ;
 8004a66:	4b02      	ldr	r3, [pc, #8]	; (8004a70 <EXTI_voidPB14CallBack+0xd4>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	701a      	strb	r2, [r3, #0]
}
 8004a6c:	bf00      	nop
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	2000010e 	.word	0x2000010e
 8004a74:	2000004f 	.word	0x2000004f
 8004a78:	2000010f 	.word	0x2000010f

08004a7c <EXTI_voidPB13CallBack>:
void EXTI_voidPB13CallBack ( void )
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	af00      	add	r7, sp, #0
	if ( Global_u8StartCounter ==  4 )
 8004a80:	4b20      	ldr	r3, [pc, #128]	; (8004b04 <EXTI_voidPB13CallBack+0x88>)
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b04      	cmp	r3, #4
 8004a88:	d13a      	bne.n	8004b00 <EXTI_voidPB13CallBack+0x84>
	{
		V2G_voidSendEnergyAmount();
 8004a8a:	f7ff fca1 	bl	80043d0 <V2G_voidSendEnergyAmount>
		STIMERS_voidDelayMS(1000);
 8004a8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a92:	f7fe feb2 	bl	80037fa <STIMERS_voidDelayMS>
		Global_u8StartCounter += V2G_u8ChargingCost();
 8004a96:	f7ff fbf5 	bl	8004284 <V2G_u8ChargingCost>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	4b19      	ldr	r3, [pc, #100]	; (8004b04 <EXTI_voidPB13CallBack+0x88>)
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	4413      	add	r3, r2
 8004aa6:	b2da      	uxtb	r2, r3
 8004aa8:	4b16      	ldr	r3, [pc, #88]	; (8004b04 <EXTI_voidPB13CallBack+0x88>)
 8004aaa:	701a      	strb	r2, [r3, #0]
		STIMERS_voidDelayMS(1000);
 8004aac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ab0:	f7fe fea3 	bl	80037fa <STIMERS_voidDelayMS>
		if ( Global_u8StartCounter ==  5 )
 8004ab4:	4b13      	ldr	r3, [pc, #76]	; (8004b04 <EXTI_voidPB13CallBack+0x88>)
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b05      	cmp	r3, #5
 8004abc:	d120      	bne.n	8004b00 <EXTI_voidPB13CallBack+0x84>
		{
			V2G_voidEndCharging ();
 8004abe:	f7ff fc53 	bl	8004368 <V2G_voidEndCharging>
			SGUI_voidV2GStartEnd(GUI_V2G_END);
 8004ac2:	2000      	movs	r0, #0
 8004ac4:	f7fe f884 	bl	8002bd0 <SGUI_voidV2GStartEnd>
			Global_u8StartCounter = 0 ;
 8004ac8:	4b0e      	ldr	r3, [pc, #56]	; (8004b04 <EXTI_voidPB13CallBack+0x88>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	701a      	strb	r2, [r3, #0]
			STIMERS_voidDelayMS(1000);
 8004ace:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ad2:	f7fe fe92 	bl	80037fa <STIMERS_voidDelayMS>
			SGUI_voidMainFrame( 0 , Global_u8InitVoltage , GUI_STOP );
 8004ad6:	4b0c      	ldr	r3, [pc, #48]	; (8004b08 <EXTI_voidPB13CallBack+0x8c>)
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	2204      	movs	r2, #4
 8004ade:	4619      	mov	r1, r3
 8004ae0:	2000      	movs	r0, #0
 8004ae2:	f7fd fb43 	bl	800216c <SGUI_voidMainFrame>
			STIMERS_voidDelayMS(1000);
 8004ae6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004aea:	f7fe fe86 	bl	80037fa <STIMERS_voidDelayMS>
			Global_u8ModeFlag  = 0 ;
 8004aee:	4b07      	ldr	r3, [pc, #28]	; (8004b0c <EXTI_voidPB13CallBack+0x90>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	701a      	strb	r2, [r3, #0]
			Global_u8GuiFristSignFlag = 1 ;
 8004af4:	4b06      	ldr	r3, [pc, #24]	; (8004b10 <EXTI_voidPB13CallBack+0x94>)
 8004af6:	2201      	movs	r2, #1
 8004af8:	701a      	strb	r2, [r3, #0]
			Global_u8GuiSignFlag = 1 ;
 8004afa:	4b06      	ldr	r3, [pc, #24]	; (8004b14 <EXTI_voidPB13CallBack+0x98>)
 8004afc:	2201      	movs	r2, #1
 8004afe:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8004b00:	bf00      	nop
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	2000010e 	.word	0x2000010e
 8004b08:	2000004f 	.word	0x2000004f
 8004b0c:	2000010f 	.word	0x2000010f
 8004b10:	2000010b 	.word	0x2000010b
 8004b14:	2000010a 	.word	0x2000010a

08004b18 <main>:
/********************************************************************************************************************************************/
/**************************************************** Main Function  ************************************************************************/
/********************************************************************************************************************************************/
int main(void)
{
 8004b18:	b590      	push	{r4, r7, lr}
 8004b1a:	b093      	sub	sp, #76	; 0x4c
 8004b1c:	af00      	add	r7, sp, #0
	/********************************************************************************************************************************************/

	/********************************************************************************************************************************************/
	/**************************************************** CORE Configurations *******************************************************************/
	/********************************************************************************************************************************************/
	MSTK_u8ClockConfig      ( STK_AHB_DIV_8  );
 8004b1e:	2000      	movs	r0, #0
 8004b20:	f7fe fbc6 	bl	80032b0 <MSTK_u8ClockConfig>
	MNVIC_u8EnableInterrupt ( NVIC_USART1    );
 8004b24:	2025      	movs	r0, #37	; 0x25
 8004b26:	f7fe f8b7 	bl	8002c98 <MNVIC_u8EnableInterrupt>
	MNVIC_u8EnableInterrupt ( NVIC_USART2    );
 8004b2a:	2026      	movs	r0, #38	; 0x26
 8004b2c:	f7fe f8b4 	bl	8002c98 <MNVIC_u8EnableInterrupt>
	MNVIC_u8EnableInterrupt ( NVIC_EXTI15_10 );
 8004b30:	2028      	movs	r0, #40	; 0x28
 8004b32:	f7fe f8b1 	bl	8002c98 <MNVIC_u8EnableInterrupt>


	/********************************************************************************************************************************************/
	/**************************************************** RCC Configurations ********************************************************************/
	/********************************************************************************************************************************************/
	MRCC_u8SetClockState(HSE,ENABLE);
 8004b36:	2101      	movs	r1, #1
 8004b38:	2001      	movs	r0, #1
 8004b3a:	f7fe f8df 	bl	8002cfc <MRCC_u8SetClockState>
	MRCC_u8SetSystemClock(HSE);
 8004b3e:	2001      	movs	r0, #1
 8004b40:	f7fe f972 	bl	8002e28 <MRCC_u8SetSystemClock>
	MRCC_u8PeripheralsClockState(APB2,PER_AFIO,ENABLE);
 8004b44:	2201      	movs	r2, #1
 8004b46:	2100      	movs	r1, #0
 8004b48:	2002      	movs	r0, #2
 8004b4a:	f7fe f9ef 	bl	8002f2c <MRCC_u8PeripheralsClockState>
	MRCC_u8PeripheralsClockState(APB2,PER_IOPA,ENABLE);
 8004b4e:	2201      	movs	r2, #1
 8004b50:	2102      	movs	r1, #2
 8004b52:	2002      	movs	r0, #2
 8004b54:	f7fe f9ea 	bl	8002f2c <MRCC_u8PeripheralsClockState>
	MRCC_u8PeripheralsClockState(APB2,PER_IOPB,ENABLE);
 8004b58:	2201      	movs	r2, #1
 8004b5a:	2103      	movs	r1, #3
 8004b5c:	2002      	movs	r0, #2
 8004b5e:	f7fe f9e5 	bl	8002f2c <MRCC_u8PeripheralsClockState>
	MRCC_u8PeripheralsClockState(APB2,PER_IOPC,ENABLE);
 8004b62:	2201      	movs	r2, #1
 8004b64:	2104      	movs	r1, #4
 8004b66:	2002      	movs	r0, #2
 8004b68:	f7fe f9e0 	bl	8002f2c <MRCC_u8PeripheralsClockState>
	MRCC_u8PeripheralsClockState(APB2,PER_USART1,ENABLE);
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	210e      	movs	r1, #14
 8004b70:	2002      	movs	r0, #2
 8004b72:	f7fe f9db 	bl	8002f2c <MRCC_u8PeripheralsClockState>
	MRCC_u8PeripheralsClockState(APB1,PER_USART2,ENABLE);
 8004b76:	2201      	movs	r2, #1
 8004b78:	2111      	movs	r1, #17
 8004b7a:	2001      	movs	r0, #1
 8004b7c:	f7fe f9d6 	bl	8002f2c <MRCC_u8PeripheralsClockState>
	MRCC_u8PeripheralsClockState(APB1,PER_USART3,ENABLE);
 8004b80:	2201      	movs	r2, #1
 8004b82:	2112      	movs	r1, #18
 8004b84:	2001      	movs	r0, #1
 8004b86:	f7fe f9d1 	bl	8002f2c <MRCC_u8PeripheralsClockState>
	MRCC_u8APB1PeripheralsClockState(PER_TIM2,ENABLE);
 8004b8a:	2101      	movs	r1, #1
 8004b8c:	2000      	movs	r0, #0
 8004b8e:	f7fe f96d 	bl	8002e6c <MRCC_u8APB1PeripheralsClockState>
	MRCC_u8APB1PeripheralsClockState(PER_TIM3,ENABLE);
 8004b92:	2101      	movs	r1, #1
 8004b94:	2001      	movs	r0, #1
 8004b96:	f7fe f969 	bl	8002e6c <MRCC_u8APB1PeripheralsClockState>
	MRCC_u8APB2PeripheralsClockState(PER_SPI1,ENABLE);
 8004b9a:	2101      	movs	r1, #1
 8004b9c:	200c      	movs	r0, #12
 8004b9e:	f7fe f995 	bl	8002ecc <MRCC_u8APB2PeripheralsClockState>
	MRCC_u8APB2PeripheralsClockState(PER_ADC1,ENABLE);
 8004ba2:	2101      	movs	r1, #1
 8004ba4:	2009      	movs	r0, #9
 8004ba6:	f7fe f991 	bl	8002ecc <MRCC_u8APB2PeripheralsClockState>

	/********************************************************************************************************************************************/
	/**************************************************** MCAL Configurations *******************************************************************/
	/********************************************************************************************************************************************/
	MGPIO_u8SetPinDirection(PORTA, PIN9 , OUTPUT_SPEED_2MHZ_AFPP);
 8004baa:	220a      	movs	r2, #10
 8004bac:	2109      	movs	r1, #9
 8004bae:	2000      	movs	r0, #0
 8004bb0:	f7fd f86c 	bl	8001c8c <MGPIO_u8SetPinDirection>
	MGPIO_u8SetPinDirection(PORTA, PIN10, INPUT_FLOATING);
 8004bb4:	2204      	movs	r2, #4
 8004bb6:	210a      	movs	r1, #10
 8004bb8:	2000      	movs	r0, #0
 8004bba:	f7fd f867 	bl	8001c8c <MGPIO_u8SetPinDirection>
	USARTconfig_t UART = {USART_1,RECEIVER_ENABLE,TRANSMITTER_ENABLE,RXNE_INTERRUPT_ENABLE
 8004bbe:	4bac      	ldr	r3, [pc, #688]	; (8004e70 <main+0x358>)
 8004bc0:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8004bc4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004bc6:	c407      	stmia	r4!, {r0, r1, r2}
 8004bc8:	7023      	strb	r3, [r4, #0]
			,TRANSMITTER_COMPLETE_INTERRUPT_DISABLE,TXE_INTERRUPT_DISABLE
			,PARITY_SELECTION_EVEN,PARITY_CONTROL_DISABLE,DATA_8_BITS,ONE_BIT
			,INHIBITED,DMAR_DISABLE,DMAT_DISABLE};
	MUSART_u8SetConfiguration(&UART);
 8004bca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7fe fea8 	bl	8003924 <MUSART_u8SetConfiguration>
	MUSART_u8UsartStatus(USART_1, USART_ENABLE);
 8004bd4:	2101      	movs	r1, #1
 8004bd6:	2000      	movs	r0, #0
 8004bd8:	f7ff f898 	bl	8003d0c <MUSART_u8UsartStatus>
	MUSART_u8ReceiveCharNonSynch(USART_1,USART1_voidCallBackFunc);
 8004bdc:	49a5      	ldr	r1, [pc, #660]	; (8004e74 <main+0x35c>)
 8004bde:	2000      	movs	r0, #0
 8004be0:	f7ff fa0c 	bl	8003ffc <MUSART_u8ReceiveCharNonSynch>
	/*************************************************************************************************************/
	MGPIO_u8SetPinDirection(PORTA, PIN2 , OUTPUT_SPEED_2MHZ_AFPP);
 8004be4:	220a      	movs	r2, #10
 8004be6:	2102      	movs	r1, #2
 8004be8:	2000      	movs	r0, #0
 8004bea:	f7fd f84f 	bl	8001c8c <MGPIO_u8SetPinDirection>
	MGPIO_u8SetPinDirection(PORTA, PIN3 , INPUT_FLOATING);
 8004bee:	2204      	movs	r2, #4
 8004bf0:	2103      	movs	r1, #3
 8004bf2:	2000      	movs	r0, #0
 8004bf4:	f7fd f84a 	bl	8001c8c <MGPIO_u8SetPinDirection>
	USARTconfig_t UART2 = {USART_2,RECEIVER_ENABLE,TRANSMITTER_ENABLE,RXNE_INTERRUPT_ENABLE
 8004bf8:	4b9f      	ldr	r3, [pc, #636]	; (8004e78 <main+0x360>)
 8004bfa:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004bfe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c00:	c407      	stmia	r4!, {r0, r1, r2}
 8004c02:	7023      	strb	r3, [r4, #0]
			,TRANSMITTER_COMPLETE_INTERRUPT_DISABLE,TXE_INTERRUPT_DISABLE
			,PARITY_SELECTION_EVEN,PARITY_CONTROL_DISABLE,DATA_8_BITS,ONE_BIT
			,INHIBITED,DMAR_DISABLE,DMAT_DISABLE};
	MUSART_u8SetConfiguration(&UART2);
 8004c04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7fe fe8b 	bl	8003924 <MUSART_u8SetConfiguration>
	MUSART_u8UsartStatus(USART_2, USART_ENABLE);
 8004c0e:	2101      	movs	r1, #1
 8004c10:	2001      	movs	r0, #1
 8004c12:	f7ff f87b 	bl	8003d0c <MUSART_u8UsartStatus>
	MUSART_u8ReceiveCharNonSynch(USART_2,USART2_voidCallBackFunc);
 8004c16:	4999      	ldr	r1, [pc, #612]	; (8004e7c <main+0x364>)
 8004c18:	2001      	movs	r0, #1
 8004c1a:	f7ff f9ef 	bl	8003ffc <MUSART_u8ReceiveCharNonSynch>
	/*************************************************************************************************************/
	MGPIO_u8SetPinDirection(PORTB, PIN10 , OUTPUT_SPEED_2MHZ_AFPP);
 8004c1e:	220a      	movs	r2, #10
 8004c20:	210a      	movs	r1, #10
 8004c22:	2001      	movs	r0, #1
 8004c24:	f7fd f832 	bl	8001c8c <MGPIO_u8SetPinDirection>
	MGPIO_u8SetPinDirection(PORTB, PIN11 , INPUT_FLOATING);
 8004c28:	2204      	movs	r2, #4
 8004c2a:	210b      	movs	r1, #11
 8004c2c:	2001      	movs	r0, #1
 8004c2e:	f7fd f82d 	bl	8001c8c <MGPIO_u8SetPinDirection>

	USARTconfig_t UART3 = {USART_3,RECEIVER_ENABLE,TRANSMITTER_ENABLE,RXNE_INTERRUPT_DISABLE
 8004c32:	4b93      	ldr	r3, [pc, #588]	; (8004e80 <main+0x368>)
 8004c34:	f107 0418 	add.w	r4, r7, #24
 8004c38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c3a:	c407      	stmia	r4!, {r0, r1, r2}
 8004c3c:	7023      	strb	r3, [r4, #0]
						,TRANSMITTER_COMPLETE_INTERRUPT_DISABLE,TXE_INTERRUPT_DISABLE
						,PARITY_SELECTION_EVEN,PARITY_CONTROL_DISABLE,DATA_8_BITS,ONE_BIT
						,INHIBITED,DMAR_DISABLE,DMAT_DISABLE};
	MUSART_u8SetConfiguration(&UART3);
 8004c3e:	f107 0318 	add.w	r3, r7, #24
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7fe fe6e 	bl	8003924 <MUSART_u8SetConfiguration>
	MUSART_u8UsartStatus(USART_3, USART_ENABLE);
 8004c48:	2101      	movs	r1, #1
 8004c4a:	2002      	movs	r0, #2
 8004c4c:	f7ff f85e 	bl	8003d0c <MUSART_u8UsartStatus>
	/*************************************************************************************************************/
	/*************************************************************************************************************/
	/*************************************************************************************************************/
	/*------------------------------------------------------------------------------------*/
	MAFIO_u8EXTIPortRemap   (AFIO_LINE13  , AFIO_Port_B);
 8004c50:	2101      	movs	r1, #1
 8004c52:	200d      	movs	r0, #13
 8004c54:	f7fc fb74 	bl	8001340 <MAFIO_u8EXTIPortRemap>
	MAFIO_u8EXTIPortRemap   (AFIO_LINE14  , AFIO_Port_B);
 8004c58:	2101      	movs	r1, #1
 8004c5a:	200e      	movs	r0, #14
 8004c5c:	f7fc fb70 	bl	8001340 <MAFIO_u8EXTIPortRemap>
	MAFIO_u8EXTIPortRemap   (AFIO_LINE15  , AFIO_Port_B);
 8004c60:	2101      	movs	r1, #1
 8004c62:	200f      	movs	r0, #15
 8004c64:	f7fc fb6c 	bl	8001340 <MAFIO_u8EXTIPortRemap>
	MGPIO_u8SetPinDirection(PORTB, PIN13 , INPUT_PULL_UP_DOWEN );
 8004c68:	2208      	movs	r2, #8
 8004c6a:	210d      	movs	r1, #13
 8004c6c:	2001      	movs	r0, #1
 8004c6e:	f7fd f80d 	bl	8001c8c <MGPIO_u8SetPinDirection>
	MGPIO_u8SetPinValue    (PORTB, PIN13 , HIGH );
 8004c72:	2201      	movs	r2, #1
 8004c74:	210d      	movs	r1, #13
 8004c76:	2001      	movs	r0, #1
 8004c78:	f7fd f856 	bl	8001d28 <MGPIO_u8SetPinValue>
	MGPIO_u8SetPinDirection(PORTB, PIN14 , INPUT_PULL_UP_DOWEN );
 8004c7c:	2208      	movs	r2, #8
 8004c7e:	210e      	movs	r1, #14
 8004c80:	2001      	movs	r0, #1
 8004c82:	f7fd f803 	bl	8001c8c <MGPIO_u8SetPinDirection>
	MGPIO_u8SetPinValue    (PORTB, PIN14 , HIGH );
 8004c86:	2201      	movs	r2, #1
 8004c88:	210e      	movs	r1, #14
 8004c8a:	2001      	movs	r0, #1
 8004c8c:	f7fd f84c 	bl	8001d28 <MGPIO_u8SetPinValue>
	MGPIO_u8SetPinDirection(PORTB, PIN15 , INPUT_PULL_UP_DOWEN );
 8004c90:	2208      	movs	r2, #8
 8004c92:	210f      	movs	r1, #15
 8004c94:	2001      	movs	r0, #1
 8004c96:	f7fc fff9 	bl	8001c8c <MGPIO_u8SetPinDirection>
	MGPIO_u8SetPinValue    (PORTB, PIN15 , HIGH );
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	210f      	movs	r1, #15
 8004c9e:	2001      	movs	r0, #1
 8004ca0:	f7fd f842 	bl	8001d28 <MGPIO_u8SetPinValue>
	EXTI_config_t EXTI_PB13 = { LINE13 , RISING , EXTI_ENABLE , EXTI_voidPB13CallBack };
 8004ca4:	4a77      	ldr	r2, [pc, #476]	; (8004e84 <main+0x36c>)
 8004ca6:	f107 0310 	add.w	r3, r7, #16
 8004caa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004cae:	e883 0003 	stmia.w	r3, {r0, r1}
	EXTI_config_t EXTI_PB14 = { LINE14 , RISING , EXTI_ENABLE , EXTI_voidPB14CallBack };
 8004cb2:	4a75      	ldr	r2, [pc, #468]	; (8004e88 <main+0x370>)
 8004cb4:	f107 0308 	add.w	r3, r7, #8
 8004cb8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004cbc:	e883 0003 	stmia.w	r3, {r0, r1}
	EXTI_config_t EXTI_PB15 = { LINE15 , RISING , EXTI_ENABLE , EXTI_voidPB15CallBack };
 8004cc0:	4a72      	ldr	r2, [pc, #456]	; (8004e8c <main+0x374>)
 8004cc2:	463b      	mov	r3, r7
 8004cc4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004cc8:	e883 0003 	stmia.w	r3, {r0, r1}
	MEXTI_u8Config ( &EXTI_PB13 );
 8004ccc:	f107 0310 	add.w	r3, r7, #16
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7fc fde5 	bl	80018a0 <MEXTI_u8Config>
	MEXTI_u8Config ( &EXTI_PB14 );
 8004cd6:	f107 0308 	add.w	r3, r7, #8
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7fc fde0 	bl	80018a0 <MEXTI_u8Config>
	MEXTI_u8Config ( &EXTI_PB15 );
 8004ce0:	463b      	mov	r3, r7
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7fc fddc 	bl	80018a0 <MEXTI_u8Config>
	/********************************************************************************************************************************************/

	/********************************************************************************************************************************************/
	/**************************************************** SERVIES Configurations ****************************************************************/
	/********************************************************************************************************************************************/
	SCARKIT_voidInit();
 8004ce8:	f7fc fb94 	bl	8001414 <SCARKIT_voidInit>
	SCARKIT_voidCarDirection ( CAR_STOP );
 8004cec:	2004      	movs	r0, #4
 8004cee:	f7fc fc5b 	bl	80015a8 <SCARKIT_voidCarDirection>

    Global_u8InitVoltage = SCARKIT_u8GetVoltageValue ( );
 8004cf2:	f7fc fbcf 	bl	8001494 <SCARKIT_u8GetVoltageValue>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	4b65      	ldr	r3, [pc, #404]	; (8004e90 <main+0x378>)
 8004cfc:	701a      	strb	r2, [r3, #0]
	SGUI_voidInit();
 8004cfe:	f7fd fa2f 	bl	8002160 <SGUI_voidInit>
	SGUI_voidMainFrame ( 0 , Global_u8InitVoltage , GUI_STOP   );
 8004d02:	4b63      	ldr	r3, [pc, #396]	; (8004e90 <main+0x378>)
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	2204      	movs	r2, #4
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	2000      	movs	r0, #0
 8004d0e:	f7fd fa2d 	bl	800216c <SGUI_voidMainFrame>


	MGPIO_u8SetPinDirection(PORTA, PIN11 , OUTPUT_SPEED_10MHZ_PP);
 8004d12:	2201      	movs	r2, #1
 8004d14:	210b      	movs	r1, #11
 8004d16:	2000      	movs	r0, #0
 8004d18:	f7fc ffb8 	bl	8001c8c <MGPIO_u8SetPinDirection>
	MGPIO_u8SetPinDirection(PORTA, PIN12 , OUTPUT_SPEED_10MHZ_PP);
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	210c      	movs	r1, #12
 8004d20:	2000      	movs	r0, #0
 8004d22:	f7fc ffb3 	bl	8001c8c <MGPIO_u8SetPinDirection>
	/********************************************************************************************************************************************/

	while(1)
	{
		/********************************************************************************/
		if ( Global_u8ModeFlag == 1 )
 8004d26:	4b5b      	ldr	r3, [pc, #364]	; (8004e94 <main+0x37c>)
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d106      	bne.n	8004d3e <main+0x226>
		{
			V2G_voidSendEnergyAmount();
 8004d30:	f7ff fb4e 	bl	80043d0 <V2G_voidSendEnergyAmount>
			STIMERS_voidDelayMS(5000);
 8004d34:	f241 3088 	movw	r0, #5000	; 0x1388
 8004d38:	f7fe fd5f 	bl	80037fa <STIMERS_voidDelayMS>
 8004d3c:	e074      	b.n	8004e28 <main+0x310>
		}
		else
		{
			/*********************************************************************/
			if ( Global_u8ReceiveFlag == 0 )
 8004d3e:	4b56      	ldr	r3, [pc, #344]	; (8004e98 <main+0x380>)
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d104      	bne.n	8004d52 <main+0x23a>
			{
				V2X_voidCheckIorP();
 8004d48:	f7ff fcae 	bl	80046a8 <V2X_voidCheckIorP>
				Global_u8ReceiveFlag = 1 ;
 8004d4c:	4b52      	ldr	r3, [pc, #328]	; (8004e98 <main+0x380>)
 8004d4e:	2201      	movs	r2, #1
 8004d50:	701a      	strb	r2, [r3, #0]
			}
			if ( Global_u8FoundFlag == 1 )
 8004d52:	4b52      	ldr	r3, [pc, #328]	; (8004e9c <main+0x384>)
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d104      	bne.n	8004d66 <main+0x24e>
			{
				STIMERS_voidDelayMS(5000);
 8004d5c:	f241 3088 	movw	r0, #5000	; 0x1388
 8004d60:	f7fe fd4b 	bl	80037fa <STIMERS_voidDelayMS>
 8004d64:	e003      	b.n	8004d6e <main+0x256>
			}
			else
			{
				STIMERS_voidDelayMS(2000);
 8004d66:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004d6a:	f7fe fd46 	bl	80037fa <STIMERS_voidDelayMS>
			}
			/*********************************************************************/
			if ( Global_u8GuiFristSignFlag == 1 )
 8004d6e:	4b4c      	ldr	r3, [pc, #304]	; (8004ea0 <main+0x388>)
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d157      	bne.n	8004e28 <main+0x310>
			{
				switch (Global_u8GuiSignFlag)
 8004d78:	4b4a      	ldr	r3, [pc, #296]	; (8004ea4 <main+0x38c>)
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	2b07      	cmp	r3, #7
 8004d82:	d84e      	bhi.n	8004e22 <main+0x30a>
 8004d84:	a201      	add	r2, pc, #4	; (adr r2, 8004d8c <main+0x274>)
 8004d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d8a:	bf00      	nop
 8004d8c:	08004dad 	.word	0x08004dad
 8004d90:	08004dc5 	.word	0x08004dc5
 8004d94:	08004dcb 	.word	0x08004dcb
 8004d98:	08004dd3 	.word	0x08004dd3
 8004d9c:	08004ddb 	.word	0x08004ddb
 8004da0:	08004df1 	.word	0x08004df1
 8004da4:	08004e07 	.word	0x08004e07
 8004da8:	08004e1d 	.word	0x08004e1d
				{
				case 1 :
					SGUI_voidMainFrame( 0 , Global_u8InitVoltage , GUI_STOP );
 8004dac:	4b38      	ldr	r3, [pc, #224]	; (8004e90 <main+0x378>)
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	2204      	movs	r2, #4
 8004db4:	4619      	mov	r1, r3
 8004db6:	2000      	movs	r0, #0
 8004db8:	f7fd f9d8 	bl	800216c <SGUI_voidMainFrame>
					Global_u8GUITrafficSignFlag = 1 ;
 8004dbc:	4b3a      	ldr	r3, [pc, #232]	; (8004ea8 <main+0x390>)
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	701a      	strb	r2, [r3, #0]
					break;
 8004dc2:	e02e      	b.n	8004e22 <main+0x30a>
				case 2 :
					SGUI_voidV2IStopSign();
 8004dc4:	f7fd fc5e 	bl	8002684 <SGUI_voidV2IStopSign>
					break;
 8004dc8:	e02b      	b.n	8004e22 <main+0x30a>
				case 3 :
					SGUI_voidV2ISpeedSign(GUI_ID_SPEED_50);
 8004dca:	20b1      	movs	r0, #177	; 0xb1
 8004dcc:	f7fd fc7e 	bl	80026cc <SGUI_voidV2ISpeedSign>
					break;
 8004dd0:	e027      	b.n	8004e22 <main+0x30a>
				case 4 :
					SGUI_voidV2ISpeedSign(GUI_ID_SPEED_25);
 8004dd2:	20b2      	movs	r0, #178	; 0xb2
 8004dd4:	f7fd fc7a 	bl	80026cc <SGUI_voidV2ISpeedSign>
					break;
 8004dd8:	e023      	b.n	8004e22 <main+0x30a>
				case 5 :
					SGUI_voidV2ITrafficSign( GUI_ID_TRAFFIC_RED    , Global_u8GUITrafficSignFlag );
 8004dda:	4b33      	ldr	r3, [pc, #204]	; (8004ea8 <main+0x390>)
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	4619      	mov	r1, r3
 8004de2:	20b4      	movs	r0, #180	; 0xb4
 8004de4:	f7fd fcd0 	bl	8002788 <SGUI_voidV2ITrafficSign>
					Global_u8GUITrafficSignFlag = 0 ;
 8004de8:	4b2f      	ldr	r3, [pc, #188]	; (8004ea8 <main+0x390>)
 8004dea:	2200      	movs	r2, #0
 8004dec:	701a      	strb	r2, [r3, #0]
					break;
 8004dee:	e018      	b.n	8004e22 <main+0x30a>
				case 6 :
					SGUI_voidV2ITrafficSign( GUI_ID_TRAFFIC_YELLOW , Global_u8GUITrafficSignFlag );
 8004df0:	4b2d      	ldr	r3, [pc, #180]	; (8004ea8 <main+0x390>)
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	4619      	mov	r1, r3
 8004df8:	20b5      	movs	r0, #181	; 0xb5
 8004dfa:	f7fd fcc5 	bl	8002788 <SGUI_voidV2ITrafficSign>
					Global_u8GUITrafficSignFlag = 0 ;
 8004dfe:	4b2a      	ldr	r3, [pc, #168]	; (8004ea8 <main+0x390>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	701a      	strb	r2, [r3, #0]
					break;
 8004e04:	e00d      	b.n	8004e22 <main+0x30a>
				case 7 :
					SGUI_voidV2ITrafficSign( GUI_ID_TRAFFIC_GREAN  , Global_u8GUITrafficSignFlag );
 8004e06:	4b28      	ldr	r3, [pc, #160]	; (8004ea8 <main+0x390>)
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	20b6      	movs	r0, #182	; 0xb6
 8004e10:	f7fd fcba 	bl	8002788 <SGUI_voidV2ITrafficSign>
					Global_u8GUITrafficSignFlag = 0 ;
 8004e14:	4b24      	ldr	r3, [pc, #144]	; (8004ea8 <main+0x390>)
 8004e16:	2200      	movs	r2, #0
 8004e18:	701a      	strb	r2, [r3, #0]
					break;
 8004e1a:	e002      	b.n	8004e22 <main+0x30a>
				case 8 :
					SGUI_voidV2PPedestrian();
 8004e1c:	f7fd fd76 	bl	800290c <SGUI_voidV2PPedestrian>
					break;
 8004e20:	bf00      	nop

				}
				Global_u8GuiFristSignFlag = 0 ;
 8004e22:	4b1f      	ldr	r3, [pc, #124]	; (8004ea0 <main+0x388>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	701a      	strb	r2, [r3, #0]
			}
			/*********************************************************************/
		}
		/********************************************************************************/
		uint8_t Local_u8Voltage = SCARKIT_u8GetVoltageValue();
 8004e28:	f7fc fb34 	bl	8001494 <SCARKIT_u8GetVoltageValue>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if ( (Local_u8Voltage - Global_u8InitVoltage) >= 3 )
 8004e32:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004e36:	4a16      	ldr	r2, [pc, #88]	; (8004e90 <main+0x378>)
 8004e38:	7812      	ldrb	r2, [r2, #0]
 8004e3a:	b2d2      	uxtb	r2, r2
 8004e3c:	1a9b      	subs	r3, r3, r2
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	f77f af71 	ble.w	8004d26 <main+0x20e>
		{
			if ( Global_u8ModeFlag == 1 )
 8004e44:	4b13      	ldr	r3, [pc, #76]	; (8004e94 <main+0x37c>)
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d106      	bne.n	8004e5c <main+0x344>
			{
				SGUI_voidV2GBattaryLimit ( Local_u8Voltage , 0 );
 8004e4e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004e52:	2100      	movs	r1, #0
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7fd fd87 	bl	8002968 <SGUI_voidV2GBattaryLimit>
 8004e5a:	e004      	b.n	8004e66 <main+0x34e>
			}
			else
			{
				SGUI_voidUpdateBattaryVolt(Local_u8Voltage);
 8004e5c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004e60:	4618      	mov	r0, r3
 8004e62:	f7fd fb09 	bl	8002478 <SGUI_voidUpdateBattaryVolt>
			}
			Global_u8InitVoltage = Local_u8Voltage ;
 8004e66:	4a0a      	ldr	r2, [pc, #40]	; (8004e90 <main+0x378>)
 8004e68:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004e6c:	7013      	strb	r3, [r2, #0]
	{
 8004e6e:	e75a      	b.n	8004d26 <main+0x20e>
 8004e70:	08005184 	.word	0x08005184
 8004e74:	0800446d 	.word	0x0800446d
 8004e78:	08005194 	.word	0x08005194
 8004e7c:	080046e1 	.word	0x080046e1
 8004e80:	080051a4 	.word	0x080051a4
 8004e84:	080051b4 	.word	0x080051b4
 8004e88:	080051bc 	.word	0x080051bc
 8004e8c:	080051c4 	.word	0x080051c4
 8004e90:	2000004f 	.word	0x2000004f
 8004e94:	2000010f 	.word	0x2000010f
 8004e98:	20000109 	.word	0x20000109
 8004e9c:	20000108 	.word	0x20000108
 8004ea0:	2000010b 	.word	0x2000010b
 8004ea4:	2000010a 	.word	0x2000010a
 8004ea8:	2000004d 	.word	0x2000004d

08004eac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004eac:	480d      	ldr	r0, [pc, #52]	; (8004ee4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004eae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004eb0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004eb4:	480c      	ldr	r0, [pc, #48]	; (8004ee8 <LoopForever+0x6>)
  ldr r1, =_edata
 8004eb6:	490d      	ldr	r1, [pc, #52]	; (8004eec <LoopForever+0xa>)
  ldr r2, =_sidata
 8004eb8:	4a0d      	ldr	r2, [pc, #52]	; (8004ef0 <LoopForever+0xe>)
  movs r3, #0
 8004eba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ebc:	e002      	b.n	8004ec4 <LoopCopyDataInit>

08004ebe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004ebe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004ec0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004ec2:	3304      	adds	r3, #4

08004ec4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ec4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ec6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ec8:	d3f9      	bcc.n	8004ebe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004eca:	4a0a      	ldr	r2, [pc, #40]	; (8004ef4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004ecc:	4c0a      	ldr	r4, [pc, #40]	; (8004ef8 <LoopForever+0x16>)
  movs r3, #0
 8004ece:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ed0:	e001      	b.n	8004ed6 <LoopFillZerobss>

08004ed2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004ed2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ed4:	3204      	adds	r2, #4

08004ed6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004ed6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ed8:	d3fb      	bcc.n	8004ed2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004eda:	f000 f811 	bl	8004f00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004ede:	f7ff fe1b 	bl	8004b18 <main>

08004ee2 <LoopForever>:

LoopForever:
    b LoopForever
 8004ee2:	e7fe      	b.n	8004ee2 <LoopForever>
  ldr   r0, =_estack
 8004ee4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8004ee8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004eec:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8004ef0:	08005444 	.word	0x08005444
  ldr r2, =_sbss
 8004ef4:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8004ef8:	20000110 	.word	0x20000110

08004efc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004efc:	e7fe      	b.n	8004efc <ADC1_2_IRQHandler>
	...

08004f00 <__libc_init_array>:
 8004f00:	b570      	push	{r4, r5, r6, lr}
 8004f02:	2600      	movs	r6, #0
 8004f04:	4d0c      	ldr	r5, [pc, #48]	; (8004f38 <__libc_init_array+0x38>)
 8004f06:	4c0d      	ldr	r4, [pc, #52]	; (8004f3c <__libc_init_array+0x3c>)
 8004f08:	1b64      	subs	r4, r4, r5
 8004f0a:	10a4      	asrs	r4, r4, #2
 8004f0c:	42a6      	cmp	r6, r4
 8004f0e:	d109      	bne.n	8004f24 <__libc_init_array+0x24>
 8004f10:	f000 f822 	bl	8004f58 <_init>
 8004f14:	2600      	movs	r6, #0
 8004f16:	4d0a      	ldr	r5, [pc, #40]	; (8004f40 <__libc_init_array+0x40>)
 8004f18:	4c0a      	ldr	r4, [pc, #40]	; (8004f44 <__libc_init_array+0x44>)
 8004f1a:	1b64      	subs	r4, r4, r5
 8004f1c:	10a4      	asrs	r4, r4, #2
 8004f1e:	42a6      	cmp	r6, r4
 8004f20:	d105      	bne.n	8004f2e <__libc_init_array+0x2e>
 8004f22:	bd70      	pop	{r4, r5, r6, pc}
 8004f24:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f28:	4798      	blx	r3
 8004f2a:	3601      	adds	r6, #1
 8004f2c:	e7ee      	b.n	8004f0c <__libc_init_array+0xc>
 8004f2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f32:	4798      	blx	r3
 8004f34:	3601      	adds	r6, #1
 8004f36:	e7f2      	b.n	8004f1e <__libc_init_array+0x1e>
 8004f38:	0800543c 	.word	0x0800543c
 8004f3c:	0800543c 	.word	0x0800543c
 8004f40:	0800543c 	.word	0x0800543c
 8004f44:	08005440 	.word	0x08005440

08004f48 <memset>:
 8004f48:	4603      	mov	r3, r0
 8004f4a:	4402      	add	r2, r0
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d100      	bne.n	8004f52 <memset+0xa>
 8004f50:	4770      	bx	lr
 8004f52:	f803 1b01 	strb.w	r1, [r3], #1
 8004f56:	e7f9      	b.n	8004f4c <memset+0x4>

08004f58 <_init>:
 8004f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f5a:	bf00      	nop
 8004f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f5e:	bc08      	pop	{r3}
 8004f60:	469e      	mov	lr, r3
 8004f62:	4770      	bx	lr

08004f64 <_fini>:
 8004f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f66:	bf00      	nop
 8004f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f6a:	bc08      	pop	{r3}
 8004f6c:	469e      	mov	lr, r3
 8004f6e:	4770      	bx	lr
