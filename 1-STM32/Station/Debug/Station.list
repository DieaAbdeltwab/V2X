
Station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f30  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08002060  08002060  00012060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002188  08002188  00020040  2**0
                  CONTENTS
  4 .ARM          00000008  08002188  08002188  00012188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002190  08002190  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002190  08002190  00012190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002194  08002194  00012194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08002198  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000040  080021d8  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  080021d8  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005228  00000000  00000000  00020069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001050  00000000  00000000  00025291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000540  00000000  00000000  000262e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000490  00000000  00000000  00026828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000016d4  00000000  00000000  00026cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005509  00000000  00000000  0002838c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000c991  00000000  00000000  0002d895  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0003a226  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000136c  00000000  00000000  0003a278  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000040 	.word	0x20000040
 800014c:	00000000 	.word	0x00000000
 8000150:	08002048 	.word	0x08002048

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000044 	.word	0x20000044
 800016c:	08002048 	.word	0x08002048

08000170 <__aeabi_uldivmod>:
 8000170:	b953      	cbnz	r3, 8000188 <__aeabi_uldivmod+0x18>
 8000172:	b94a      	cbnz	r2, 8000188 <__aeabi_uldivmod+0x18>
 8000174:	2900      	cmp	r1, #0
 8000176:	bf08      	it	eq
 8000178:	2800      	cmpeq	r0, #0
 800017a:	bf1c      	itt	ne
 800017c:	f04f 31ff 	movne.w	r1, #4294967295
 8000180:	f04f 30ff 	movne.w	r0, #4294967295
 8000184:	f000 b976 	b.w	8000474 <__aeabi_idiv0>
 8000188:	f1ad 0c08 	sub.w	ip, sp, #8
 800018c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000190:	f000 f806 	bl	80001a0 <__udivmoddi4>
 8000194:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000198:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800019c:	b004      	add	sp, #16
 800019e:	4770      	bx	lr

080001a0 <__udivmoddi4>:
 80001a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001a4:	9e08      	ldr	r6, [sp, #32]
 80001a6:	460d      	mov	r5, r1
 80001a8:	4604      	mov	r4, r0
 80001aa:	4688      	mov	r8, r1
 80001ac:	2b00      	cmp	r3, #0
 80001ae:	d14d      	bne.n	800024c <__udivmoddi4+0xac>
 80001b0:	428a      	cmp	r2, r1
 80001b2:	4694      	mov	ip, r2
 80001b4:	d968      	bls.n	8000288 <__udivmoddi4+0xe8>
 80001b6:	fab2 f282 	clz	r2, r2
 80001ba:	b152      	cbz	r2, 80001d2 <__udivmoddi4+0x32>
 80001bc:	fa01 f302 	lsl.w	r3, r1, r2
 80001c0:	f1c2 0120 	rsb	r1, r2, #32
 80001c4:	fa20 f101 	lsr.w	r1, r0, r1
 80001c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80001cc:	ea41 0803 	orr.w	r8, r1, r3
 80001d0:	4094      	lsls	r4, r2
 80001d2:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001d6:	fbb8 f7f1 	udiv	r7, r8, r1
 80001da:	fa1f fe8c 	uxth.w	lr, ip
 80001de:	fb01 8817 	mls	r8, r1, r7, r8
 80001e2:	fb07 f00e 	mul.w	r0, r7, lr
 80001e6:	0c23      	lsrs	r3, r4, #16
 80001e8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001ec:	4298      	cmp	r0, r3
 80001ee:	d90a      	bls.n	8000206 <__udivmoddi4+0x66>
 80001f0:	eb1c 0303 	adds.w	r3, ip, r3
 80001f4:	f107 35ff 	add.w	r5, r7, #4294967295
 80001f8:	f080 811e 	bcs.w	8000438 <__udivmoddi4+0x298>
 80001fc:	4298      	cmp	r0, r3
 80001fe:	f240 811b 	bls.w	8000438 <__udivmoddi4+0x298>
 8000202:	3f02      	subs	r7, #2
 8000204:	4463      	add	r3, ip
 8000206:	1a1b      	subs	r3, r3, r0
 8000208:	fbb3 f0f1 	udiv	r0, r3, r1
 800020c:	fb01 3310 	mls	r3, r1, r0, r3
 8000210:	fb00 fe0e 	mul.w	lr, r0, lr
 8000214:	b2a4      	uxth	r4, r4
 8000216:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800021a:	45a6      	cmp	lr, r4
 800021c:	d90a      	bls.n	8000234 <__udivmoddi4+0x94>
 800021e:	eb1c 0404 	adds.w	r4, ip, r4
 8000222:	f100 33ff 	add.w	r3, r0, #4294967295
 8000226:	f080 8109 	bcs.w	800043c <__udivmoddi4+0x29c>
 800022a:	45a6      	cmp	lr, r4
 800022c:	f240 8106 	bls.w	800043c <__udivmoddi4+0x29c>
 8000230:	4464      	add	r4, ip
 8000232:	3802      	subs	r0, #2
 8000234:	2100      	movs	r1, #0
 8000236:	eba4 040e 	sub.w	r4, r4, lr
 800023a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800023e:	b11e      	cbz	r6, 8000248 <__udivmoddi4+0xa8>
 8000240:	2300      	movs	r3, #0
 8000242:	40d4      	lsrs	r4, r2
 8000244:	e9c6 4300 	strd	r4, r3, [r6]
 8000248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800024c:	428b      	cmp	r3, r1
 800024e:	d908      	bls.n	8000262 <__udivmoddi4+0xc2>
 8000250:	2e00      	cmp	r6, #0
 8000252:	f000 80ee 	beq.w	8000432 <__udivmoddi4+0x292>
 8000256:	2100      	movs	r1, #0
 8000258:	e9c6 0500 	strd	r0, r5, [r6]
 800025c:	4608      	mov	r0, r1
 800025e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000262:	fab3 f183 	clz	r1, r3
 8000266:	2900      	cmp	r1, #0
 8000268:	d14a      	bne.n	8000300 <__udivmoddi4+0x160>
 800026a:	42ab      	cmp	r3, r5
 800026c:	d302      	bcc.n	8000274 <__udivmoddi4+0xd4>
 800026e:	4282      	cmp	r2, r0
 8000270:	f200 80fc 	bhi.w	800046c <__udivmoddi4+0x2cc>
 8000274:	1a84      	subs	r4, r0, r2
 8000276:	eb65 0303 	sbc.w	r3, r5, r3
 800027a:	2001      	movs	r0, #1
 800027c:	4698      	mov	r8, r3
 800027e:	2e00      	cmp	r6, #0
 8000280:	d0e2      	beq.n	8000248 <__udivmoddi4+0xa8>
 8000282:	e9c6 4800 	strd	r4, r8, [r6]
 8000286:	e7df      	b.n	8000248 <__udivmoddi4+0xa8>
 8000288:	b902      	cbnz	r2, 800028c <__udivmoddi4+0xec>
 800028a:	deff      	udf	#255	; 0xff
 800028c:	fab2 f282 	clz	r2, r2
 8000290:	2a00      	cmp	r2, #0
 8000292:	f040 8091 	bne.w	80003b8 <__udivmoddi4+0x218>
 8000296:	eba1 000c 	sub.w	r0, r1, ip
 800029a:	2101      	movs	r1, #1
 800029c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a0:	fa1f fe8c 	uxth.w	lr, ip
 80002a4:	fbb0 f3f7 	udiv	r3, r0, r7
 80002a8:	fb07 0013 	mls	r0, r7, r3, r0
 80002ac:	0c25      	lsrs	r5, r4, #16
 80002ae:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002b2:	fb0e f003 	mul.w	r0, lr, r3
 80002b6:	42a8      	cmp	r0, r5
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0x12c>
 80002ba:	eb1c 0505 	adds.w	r5, ip, r5
 80002be:	f103 38ff 	add.w	r8, r3, #4294967295
 80002c2:	d202      	bcs.n	80002ca <__udivmoddi4+0x12a>
 80002c4:	42a8      	cmp	r0, r5
 80002c6:	f200 80ce 	bhi.w	8000466 <__udivmoddi4+0x2c6>
 80002ca:	4643      	mov	r3, r8
 80002cc:	1a2d      	subs	r5, r5, r0
 80002ce:	fbb5 f0f7 	udiv	r0, r5, r7
 80002d2:	fb07 5510 	mls	r5, r7, r0, r5
 80002d6:	fb0e fe00 	mul.w	lr, lr, r0
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002e0:	45a6      	cmp	lr, r4
 80002e2:	d908      	bls.n	80002f6 <__udivmoddi4+0x156>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 35ff 	add.w	r5, r0, #4294967295
 80002ec:	d202      	bcs.n	80002f4 <__udivmoddi4+0x154>
 80002ee:	45a6      	cmp	lr, r4
 80002f0:	f200 80b6 	bhi.w	8000460 <__udivmoddi4+0x2c0>
 80002f4:	4628      	mov	r0, r5
 80002f6:	eba4 040e 	sub.w	r4, r4, lr
 80002fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80002fe:	e79e      	b.n	800023e <__udivmoddi4+0x9e>
 8000300:	f1c1 0720 	rsb	r7, r1, #32
 8000304:	408b      	lsls	r3, r1
 8000306:	fa22 fc07 	lsr.w	ip, r2, r7
 800030a:	ea4c 0c03 	orr.w	ip, ip, r3
 800030e:	fa25 fa07 	lsr.w	sl, r5, r7
 8000312:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000316:	fbba f8f9 	udiv	r8, sl, r9
 800031a:	fa20 f307 	lsr.w	r3, r0, r7
 800031e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000322:	408d      	lsls	r5, r1
 8000324:	fa1f fe8c 	uxth.w	lr, ip
 8000328:	431d      	orrs	r5, r3
 800032a:	fa00 f301 	lsl.w	r3, r0, r1
 800032e:	fb08 f00e 	mul.w	r0, r8, lr
 8000332:	0c2c      	lsrs	r4, r5, #16
 8000334:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000338:	42a0      	cmp	r0, r4
 800033a:	fa02 f201 	lsl.w	r2, r2, r1
 800033e:	d90b      	bls.n	8000358 <__udivmoddi4+0x1b8>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f108 3aff 	add.w	sl, r8, #4294967295
 8000348:	f080 8088 	bcs.w	800045c <__udivmoddi4+0x2bc>
 800034c:	42a0      	cmp	r0, r4
 800034e:	f240 8085 	bls.w	800045c <__udivmoddi4+0x2bc>
 8000352:	f1a8 0802 	sub.w	r8, r8, #2
 8000356:	4464      	add	r4, ip
 8000358:	1a24      	subs	r4, r4, r0
 800035a:	fbb4 f0f9 	udiv	r0, r4, r9
 800035e:	fb09 4410 	mls	r4, r9, r0, r4
 8000362:	fb00 fe0e 	mul.w	lr, r0, lr
 8000366:	b2ad      	uxth	r5, r5
 8000368:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x1e2>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 35ff 	add.w	r5, r0, #4294967295
 8000378:	d26c      	bcs.n	8000454 <__udivmoddi4+0x2b4>
 800037a:	45a6      	cmp	lr, r4
 800037c:	d96a      	bls.n	8000454 <__udivmoddi4+0x2b4>
 800037e:	3802      	subs	r0, #2
 8000380:	4464      	add	r4, ip
 8000382:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000386:	fba0 9502 	umull	r9, r5, r0, r2
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	42ac      	cmp	r4, r5
 8000390:	46c8      	mov	r8, r9
 8000392:	46ae      	mov	lr, r5
 8000394:	d356      	bcc.n	8000444 <__udivmoddi4+0x2a4>
 8000396:	d053      	beq.n	8000440 <__udivmoddi4+0x2a0>
 8000398:	2e00      	cmp	r6, #0
 800039a:	d069      	beq.n	8000470 <__udivmoddi4+0x2d0>
 800039c:	ebb3 0208 	subs.w	r2, r3, r8
 80003a0:	eb64 040e 	sbc.w	r4, r4, lr
 80003a4:	fa22 f301 	lsr.w	r3, r2, r1
 80003a8:	fa04 f707 	lsl.w	r7, r4, r7
 80003ac:	431f      	orrs	r7, r3
 80003ae:	40cc      	lsrs	r4, r1
 80003b0:	e9c6 7400 	strd	r7, r4, [r6]
 80003b4:	2100      	movs	r1, #0
 80003b6:	e747      	b.n	8000248 <__udivmoddi4+0xa8>
 80003b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003bc:	f1c2 0120 	rsb	r1, r2, #32
 80003c0:	fa25 f301 	lsr.w	r3, r5, r1
 80003c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c8:	fa20 f101 	lsr.w	r1, r0, r1
 80003cc:	4095      	lsls	r5, r2
 80003ce:	430d      	orrs	r5, r1
 80003d0:	fbb3 f1f7 	udiv	r1, r3, r7
 80003d4:	fb07 3311 	mls	r3, r7, r1, r3
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	0c28      	lsrs	r0, r5, #16
 80003de:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003e2:	fb01 f30e 	mul.w	r3, r1, lr
 80003e6:	4283      	cmp	r3, r0
 80003e8:	fa04 f402 	lsl.w	r4, r4, r2
 80003ec:	d908      	bls.n	8000400 <__udivmoddi4+0x260>
 80003ee:	eb1c 0000 	adds.w	r0, ip, r0
 80003f2:	f101 38ff 	add.w	r8, r1, #4294967295
 80003f6:	d22f      	bcs.n	8000458 <__udivmoddi4+0x2b8>
 80003f8:	4283      	cmp	r3, r0
 80003fa:	d92d      	bls.n	8000458 <__udivmoddi4+0x2b8>
 80003fc:	3902      	subs	r1, #2
 80003fe:	4460      	add	r0, ip
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	fbb0 f3f7 	udiv	r3, r0, r7
 8000406:	fb07 0013 	mls	r0, r7, r3, r0
 800040a:	b2ad      	uxth	r5, r5
 800040c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000410:	fb03 f00e 	mul.w	r0, r3, lr
 8000414:	42a8      	cmp	r0, r5
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x28a>
 8000418:	eb1c 0505 	adds.w	r5, ip, r5
 800041c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000420:	d216      	bcs.n	8000450 <__udivmoddi4+0x2b0>
 8000422:	42a8      	cmp	r0, r5
 8000424:	d914      	bls.n	8000450 <__udivmoddi4+0x2b0>
 8000426:	3b02      	subs	r3, #2
 8000428:	4465      	add	r5, ip
 800042a:	1a28      	subs	r0, r5, r0
 800042c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000430:	e738      	b.n	80002a4 <__udivmoddi4+0x104>
 8000432:	4631      	mov	r1, r6
 8000434:	4630      	mov	r0, r6
 8000436:	e707      	b.n	8000248 <__udivmoddi4+0xa8>
 8000438:	462f      	mov	r7, r5
 800043a:	e6e4      	b.n	8000206 <__udivmoddi4+0x66>
 800043c:	4618      	mov	r0, r3
 800043e:	e6f9      	b.n	8000234 <__udivmoddi4+0x94>
 8000440:	454b      	cmp	r3, r9
 8000442:	d2a9      	bcs.n	8000398 <__udivmoddi4+0x1f8>
 8000444:	ebb9 0802 	subs.w	r8, r9, r2
 8000448:	eb65 0e0c 	sbc.w	lr, r5, ip
 800044c:	3801      	subs	r0, #1
 800044e:	e7a3      	b.n	8000398 <__udivmoddi4+0x1f8>
 8000450:	4643      	mov	r3, r8
 8000452:	e7ea      	b.n	800042a <__udivmoddi4+0x28a>
 8000454:	4628      	mov	r0, r5
 8000456:	e794      	b.n	8000382 <__udivmoddi4+0x1e2>
 8000458:	4641      	mov	r1, r8
 800045a:	e7d1      	b.n	8000400 <__udivmoddi4+0x260>
 800045c:	46d0      	mov	r8, sl
 800045e:	e77b      	b.n	8000358 <__udivmoddi4+0x1b8>
 8000460:	4464      	add	r4, ip
 8000462:	3802      	subs	r0, #2
 8000464:	e747      	b.n	80002f6 <__udivmoddi4+0x156>
 8000466:	3b02      	subs	r3, #2
 8000468:	4465      	add	r5, ip
 800046a:	e72f      	b.n	80002cc <__udivmoddi4+0x12c>
 800046c:	4608      	mov	r0, r1
 800046e:	e706      	b.n	800027e <__udivmoddi4+0xde>
 8000470:	4631      	mov	r1, r6
 8000472:	e6e9      	b.n	8000248 <__udivmoddi4+0xa8>

08000474 <__aeabi_idiv0>:
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop

08000478 <ADC1_2_IRQHandler>:

/*************************************************************************************************************************************/
/********************************************************* Handlers implementations **************************************************/
/*************************************************************************************************************************************/
void ADC1_2_IRQHandler (void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
	if (  ADC_ApfCallBack[ADC_1] != NULL )
 800047c:	4b04      	ldr	r3, [pc, #16]	; (8000490 <ADC1_2_IRQHandler+0x18>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d002      	beq.n	800048a <ADC1_2_IRQHandler+0x12>
	{
		//MADC_u8ClearInterruptFlags(ADC_3);
		ADC_ApfCallBack[ADC_1]();
 8000484:	4b02      	ldr	r3, [pc, #8]	; (8000490 <ADC1_2_IRQHandler+0x18>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4798      	blx	r3
	}
}
 800048a:	bf00      	nop
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	2000005c 	.word	0x2000005c

08000494 <ADC3_IRQHandler>:
void ADC3_IRQHandler (void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
	if (  ADC_ApfCallBack[ADC_3] != NULL )
 8000498:	4b04      	ldr	r3, [pc, #16]	; (80004ac <ADC3_IRQHandler+0x18>)
 800049a:	689b      	ldr	r3, [r3, #8]
 800049c:	2b00      	cmp	r3, #0
 800049e:	d002      	beq.n	80004a6 <ADC3_IRQHandler+0x12>
	{
		//MADC_u8ClearInterruptFlags(ADC_3);
		ADC_ApfCallBack[ADC_3]();
 80004a0:	4b02      	ldr	r3, [pc, #8]	; (80004ac <ADC3_IRQHandler+0x18>)
 80004a2:	689b      	ldr	r3, [r3, #8]
 80004a4:	4798      	blx	r3
	}
}
 80004a6:	bf00      	nop
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	2000005c 	.word	0x2000005c

080004b0 <MDMA_u8ClearFlag>:
 *
 *
 ******************************************************************************
 */
static uint8_t  MDMA_u8ClearFlag( Channel_t Copy_ChannelIndex , Flags_t Copy_Flag )
{
 80004b0:	b480      	push	{r7}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	4603      	mov	r3, r0
 80004b8:	460a      	mov	r2, r1
 80004ba:	71fb      	strb	r3, [r7, #7]
 80004bc:	4613      	mov	r3, r2
 80004be:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK;
 80004c0:	2301      	movs	r3, #1
 80004c2:	73fb      	strb	r3, [r7, #15]
	if ( Copy_ChannelIndex <= DMA_CHANNEL7 &&  Copy_Flag <= DMA_TEIF )
 80004c4:	79fb      	ldrb	r3, [r7, #7]
 80004c6:	2b06      	cmp	r3, #6
 80004c8:	d812      	bhi.n	80004f0 <MDMA_u8ClearFlag+0x40>
 80004ca:	79bb      	ldrb	r3, [r7, #6]
 80004cc:	2b03      	cmp	r3, #3
 80004ce:	d80f      	bhi.n	80004f0 <MDMA_u8ClearFlag+0x40>
	{
		Copy_ChannelIndex *= DMA_FLAG_BIT_ACCESS ;
 80004d0:	79fb      	ldrb	r3, [r7, #7]
 80004d2:	009b      	lsls	r3, r3, #2
 80004d4:	71fb      	strb	r3, [r7, #7]
	    DMA->IFCR  |= DMA_FLAG_MASK << (Copy_ChannelIndex + Copy_Flag) ;
 80004d6:	4b0a      	ldr	r3, [pc, #40]	; (8000500 <MDMA_u8ClearFlag+0x50>)
 80004d8:	685b      	ldr	r3, [r3, #4]
 80004da:	79f9      	ldrb	r1, [r7, #7]
 80004dc:	79ba      	ldrb	r2, [r7, #6]
 80004de:	440a      	add	r2, r1
 80004e0:	2101      	movs	r1, #1
 80004e2:	fa01 f202 	lsl.w	r2, r1, r2
 80004e6:	4611      	mov	r1, r2
 80004e8:	4a05      	ldr	r2, [pc, #20]	; (8000500 <MDMA_u8ClearFlag+0x50>)
 80004ea:	430b      	orrs	r3, r1
 80004ec:	6053      	str	r3, [r2, #4]
 80004ee:	e001      	b.n	80004f4 <MDMA_u8ClearFlag+0x44>
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
 80004f0:	2300      	movs	r3, #0
 80004f2:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState ;
 80004f4:	7bfb      	ldrb	r3, [r7, #15]

}
 80004f6:	4618      	mov	r0, r3
 80004f8:	3714      	adds	r7, #20
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bc80      	pop	{r7}
 80004fe:	4770      	bx	lr
 8000500:	40020000 	.word	0x40020000

08000504 <DMA1_Channel1_IRQHandler>:
/*************************************************************************************************************************************/
/********************************************************* Handlers implementations **************************************************/
/*************************************************************************************************************************************/
void DMA1_Channel1_IRQHandler(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
	MDMA_u8ClearFlag( DMA_CHANNEL1 , DMA_GIF  );
 8000508:	2100      	movs	r1, #0
 800050a:	2000      	movs	r0, #0
 800050c:	f7ff ffd0 	bl	80004b0 <MDMA_u8ClearFlag>
	MDMA_u8ClearFlag( DMA_CHANNEL1 , DMA_TCIF );
 8000510:	2101      	movs	r1, #1
 8000512:	2000      	movs	r0, #0
 8000514:	f7ff ffcc 	bl	80004b0 <MDMA_u8ClearFlag>
	MDMA_u8ClearFlag( DMA_CHANNEL1 , DMA_HTIF );
 8000518:	2102      	movs	r1, #2
 800051a:	2000      	movs	r0, #0
 800051c:	f7ff ffc8 	bl	80004b0 <MDMA_u8ClearFlag>
	MDMA_u8ClearFlag( DMA_CHANNEL1 , DMA_TEIF );
 8000520:	2103      	movs	r1, #3
 8000522:	2000      	movs	r0, #0
 8000524:	f7ff ffc4 	bl	80004b0 <MDMA_u8ClearFlag>
	if ( DMA_ApfChannelCallBack[DMA_CHANNEL1] != NULL )
 8000528:	4b04      	ldr	r3, [pc, #16]	; (800053c <DMA1_Channel1_IRQHandler+0x38>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d002      	beq.n	8000536 <DMA1_Channel1_IRQHandler+0x32>
	{
		 DMA_ApfChannelCallBack[DMA_CHANNEL1]();
 8000530:	4b02      	ldr	r3, [pc, #8]	; (800053c <DMA1_Channel1_IRQHandler+0x38>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4798      	blx	r3

	}

}
 8000536:	bf00      	nop
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	20000068 	.word	0x20000068

08000540 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	MDMA_u8ClearFlag( DMA_CHANNEL2 , DMA_GIF  );
 8000544:	2100      	movs	r1, #0
 8000546:	2001      	movs	r0, #1
 8000548:	f7ff ffb2 	bl	80004b0 <MDMA_u8ClearFlag>
	MDMA_u8ClearFlag( DMA_CHANNEL2 , DMA_TCIF );
 800054c:	2101      	movs	r1, #1
 800054e:	2001      	movs	r0, #1
 8000550:	f7ff ffae 	bl	80004b0 <MDMA_u8ClearFlag>
	MDMA_u8ClearFlag( DMA_CHANNEL2 , DMA_HTIF );
 8000554:	2102      	movs	r1, #2
 8000556:	2001      	movs	r0, #1
 8000558:	f7ff ffaa 	bl	80004b0 <MDMA_u8ClearFlag>
	MDMA_u8ClearFlag( DMA_CHANNEL2 , DMA_TEIF );
 800055c:	2103      	movs	r1, #3
 800055e:	2001      	movs	r0, #1
 8000560:	f7ff ffa6 	bl	80004b0 <MDMA_u8ClearFlag>
	if ( DMA_ApfChannelCallBack[DMA_CHANNEL2] != NULL )
 8000564:	4b04      	ldr	r3, [pc, #16]	; (8000578 <DMA1_Channel2_IRQHandler+0x38>)
 8000566:	685b      	ldr	r3, [r3, #4]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d002      	beq.n	8000572 <DMA1_Channel2_IRQHandler+0x32>
	{
		 DMA_ApfChannelCallBack[DMA_CHANNEL2]();
 800056c:	4b02      	ldr	r3, [pc, #8]	; (8000578 <DMA1_Channel2_IRQHandler+0x38>)
 800056e:	685b      	ldr	r3, [r3, #4]
 8000570:	4798      	blx	r3
	}

}
 8000572:	bf00      	nop
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	20000068 	.word	0x20000068

0800057c <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
	MDMA_u8ClearFlag( DMA_CHANNEL3 , DMA_GIF  );
 8000580:	2100      	movs	r1, #0
 8000582:	2002      	movs	r0, #2
 8000584:	f7ff ff94 	bl	80004b0 <MDMA_u8ClearFlag>
	MDMA_u8ClearFlag( DMA_CHANNEL3 , DMA_TCIF );
 8000588:	2101      	movs	r1, #1
 800058a:	2002      	movs	r0, #2
 800058c:	f7ff ff90 	bl	80004b0 <MDMA_u8ClearFlag>
	MDMA_u8ClearFlag( DMA_CHANNEL3 , DMA_HTIF );
 8000590:	2102      	movs	r1, #2
 8000592:	2002      	movs	r0, #2
 8000594:	f7ff ff8c 	bl	80004b0 <MDMA_u8ClearFlag>
	MDMA_u8ClearFlag( DMA_CHANNEL3 , DMA_TEIF );
 8000598:	2103      	movs	r1, #3
 800059a:	2002      	movs	r0, #2
 800059c:	f7ff ff88 	bl	80004b0 <MDMA_u8ClearFlag>
	if ( DMA_ApfChannelCallBack[DMA_CHANNEL3] != NULL )
 80005a0:	4b04      	ldr	r3, [pc, #16]	; (80005b4 <DMA1_Channel3_IRQHandler+0x38>)
 80005a2:	689b      	ldr	r3, [r3, #8]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d002      	beq.n	80005ae <DMA1_Channel3_IRQHandler+0x32>
	{
		 DMA_ApfChannelCallBack[DMA_CHANNEL3]();
 80005a8:	4b02      	ldr	r3, [pc, #8]	; (80005b4 <DMA1_Channel3_IRQHandler+0x38>)
 80005aa:	689b      	ldr	r3, [r3, #8]
 80005ac:	4798      	blx	r3
	}

}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	20000068 	.word	0x20000068

080005b8 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	MDMA_u8ClearFlag( DMA_CHANNEL4 , DMA_GIF  );
 80005bc:	2100      	movs	r1, #0
 80005be:	2003      	movs	r0, #3
 80005c0:	f7ff ff76 	bl	80004b0 <MDMA_u8ClearFlag>
	MDMA_u8ClearFlag( DMA_CHANNEL4 , DMA_TCIF );
 80005c4:	2101      	movs	r1, #1
 80005c6:	2003      	movs	r0, #3
 80005c8:	f7ff ff72 	bl	80004b0 <MDMA_u8ClearFlag>
	MDMA_u8ClearFlag( DMA_CHANNEL4 , DMA_HTIF );
 80005cc:	2102      	movs	r1, #2
 80005ce:	2003      	movs	r0, #3
 80005d0:	f7ff ff6e 	bl	80004b0 <MDMA_u8ClearFlag>
	MDMA_u8ClearFlag( DMA_CHANNEL4 , DMA_TEIF );
 80005d4:	2103      	movs	r1, #3
 80005d6:	2003      	movs	r0, #3
 80005d8:	f7ff ff6a 	bl	80004b0 <MDMA_u8ClearFlag>
	if ( DMA_ApfChannelCallBack[DMA_CHANNEL4] != NULL )
 80005dc:	4b04      	ldr	r3, [pc, #16]	; (80005f0 <DMA1_Channel4_IRQHandler+0x38>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d002      	beq.n	80005ea <DMA1_Channel4_IRQHandler+0x32>
	{
		 DMA_ApfChannelCallBack[DMA_CHANNEL4]();
 80005e4:	4b02      	ldr	r3, [pc, #8]	; (80005f0 <DMA1_Channel4_IRQHandler+0x38>)
 80005e6:	68db      	ldr	r3, [r3, #12]
 80005e8:	4798      	blx	r3
	}

}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20000068 	.word	0x20000068

080005f4 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
	MDMA_u8ClearFlag( DMA_CHANNEL5 , DMA_GIF  );
 80005f8:	2100      	movs	r1, #0
 80005fa:	2004      	movs	r0, #4
 80005fc:	f7ff ff58 	bl	80004b0 <MDMA_u8ClearFlag>
	MDMA_u8ClearFlag( DMA_CHANNEL5 , DMA_TCIF );
 8000600:	2101      	movs	r1, #1
 8000602:	2004      	movs	r0, #4
 8000604:	f7ff ff54 	bl	80004b0 <MDMA_u8ClearFlag>
	MDMA_u8ClearFlag( DMA_CHANNEL5 , DMA_HTIF );
 8000608:	2102      	movs	r1, #2
 800060a:	2004      	movs	r0, #4
 800060c:	f7ff ff50 	bl	80004b0 <MDMA_u8ClearFlag>
	MDMA_u8ClearFlag( DMA_CHANNEL5 , DMA_TEIF );
 8000610:	2103      	movs	r1, #3
 8000612:	2004      	movs	r0, #4
 8000614:	f7ff ff4c 	bl	80004b0 <MDMA_u8ClearFlag>
	if ( DMA_ApfChannelCallBack[DMA_CHANNEL5] != NULL )
 8000618:	4b04      	ldr	r3, [pc, #16]	; (800062c <DMA1_Channel5_IRQHandler+0x38>)
 800061a:	691b      	ldr	r3, [r3, #16]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d002      	beq.n	8000626 <DMA1_Channel5_IRQHandler+0x32>
	{
		 DMA_ApfChannelCallBack[DMA_CHANNEL5]();
 8000620:	4b02      	ldr	r3, [pc, #8]	; (800062c <DMA1_Channel5_IRQHandler+0x38>)
 8000622:	691b      	ldr	r3, [r3, #16]
 8000624:	4798      	blx	r3
	}

}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	20000068 	.word	0x20000068

08000630 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	MDMA_u8ClearFlag( DMA_CHANNEL6 , DMA_GIF  );
 8000634:	2100      	movs	r1, #0
 8000636:	2005      	movs	r0, #5
 8000638:	f7ff ff3a 	bl	80004b0 <MDMA_u8ClearFlag>
	MDMA_u8ClearFlag( DMA_CHANNEL6 , DMA_TCIF );
 800063c:	2101      	movs	r1, #1
 800063e:	2005      	movs	r0, #5
 8000640:	f7ff ff36 	bl	80004b0 <MDMA_u8ClearFlag>
	MDMA_u8ClearFlag( DMA_CHANNEL6 , DMA_HTIF );
 8000644:	2102      	movs	r1, #2
 8000646:	2005      	movs	r0, #5
 8000648:	f7ff ff32 	bl	80004b0 <MDMA_u8ClearFlag>
	MDMA_u8ClearFlag( DMA_CHANNEL6 , DMA_TEIF );
 800064c:	2103      	movs	r1, #3
 800064e:	2005      	movs	r0, #5
 8000650:	f7ff ff2e 	bl	80004b0 <MDMA_u8ClearFlag>
	if ( DMA_ApfChannelCallBack[DMA_CHANNEL6] != NULL )
 8000654:	4b04      	ldr	r3, [pc, #16]	; (8000668 <DMA1_Channel6_IRQHandler+0x38>)
 8000656:	695b      	ldr	r3, [r3, #20]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d002      	beq.n	8000662 <DMA1_Channel6_IRQHandler+0x32>
	{
		 DMA_ApfChannelCallBack[DMA_CHANNEL6]();
 800065c:	4b02      	ldr	r3, [pc, #8]	; (8000668 <DMA1_Channel6_IRQHandler+0x38>)
 800065e:	695b      	ldr	r3, [r3, #20]
 8000660:	4798      	blx	r3
	}

}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000068 	.word	0x20000068

0800066c <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
	MDMA_u8ClearFlag( DMA_CHANNEL7 , DMA_GIF  );
 8000670:	2100      	movs	r1, #0
 8000672:	2006      	movs	r0, #6
 8000674:	f7ff ff1c 	bl	80004b0 <MDMA_u8ClearFlag>
	MDMA_u8ClearFlag( DMA_CHANNEL7 , DMA_TCIF );
 8000678:	2101      	movs	r1, #1
 800067a:	2006      	movs	r0, #6
 800067c:	f7ff ff18 	bl	80004b0 <MDMA_u8ClearFlag>
	MDMA_u8ClearFlag( DMA_CHANNEL7 , DMA_HTIF );
 8000680:	2102      	movs	r1, #2
 8000682:	2006      	movs	r0, #6
 8000684:	f7ff ff14 	bl	80004b0 <MDMA_u8ClearFlag>
	MDMA_u8ClearFlag( DMA_CHANNEL7 , DMA_TEIF );
 8000688:	2103      	movs	r1, #3
 800068a:	2006      	movs	r0, #6
 800068c:	f7ff ff10 	bl	80004b0 <MDMA_u8ClearFlag>
	if ( DMA_ApfChannelCallBack[DMA_CHANNEL7] != NULL )
 8000690:	4b04      	ldr	r3, [pc, #16]	; (80006a4 <DMA1_Channel7_IRQHandler+0x38>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d002      	beq.n	800069e <DMA1_Channel7_IRQHandler+0x32>
	{
		 DMA_ApfChannelCallBack[DMA_CHANNEL7]();
 8000698:	4b02      	ldr	r3, [pc, #8]	; (80006a4 <DMA1_Channel7_IRQHandler+0x38>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	4798      	blx	r3
	}

}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000068 	.word	0x20000068

080006a8 <EXTI0_IRQHandler>:
}
/*************************************************************************************************************************************/
/********************************************************* Handlers implementations **************************************************/
/*************************************************************************************************************************************/
void EXTI0_IRQHandler         ( void )
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	if ( EXTI_ApfCallBack[LINE0] != NULL )
 80006ac:	4b07      	ldr	r3, [pc, #28]	; (80006cc <EXTI0_IRQHandler+0x24>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d008      	beq.n	80006c6 <EXTI0_IRQHandler+0x1e>
	{
		 SET_BIT( EXTI->PR , LINE0 );
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <EXTI0_IRQHandler+0x28>)
 80006b6:	695b      	ldr	r3, [r3, #20]
 80006b8:	4a05      	ldr	r2, [pc, #20]	; (80006d0 <EXTI0_IRQHandler+0x28>)
 80006ba:	f043 0301 	orr.w	r3, r3, #1
 80006be:	6153      	str	r3, [r2, #20]
		 EXTI_ApfCallBack[LINE0]();
 80006c0:	4b02      	ldr	r3, [pc, #8]	; (80006cc <EXTI0_IRQHandler+0x24>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4798      	blx	r3
	}
}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000084 	.word	0x20000084
 80006d0:	40010400 	.word	0x40010400

080006d4 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler         ( void )
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
	if ( EXTI_ApfCallBack[LINE1] != NULL )
 80006d8:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <EXTI1_IRQHandler+0x24>)
 80006da:	685b      	ldr	r3, [r3, #4]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d008      	beq.n	80006f2 <EXTI1_IRQHandler+0x1e>
	{
		SET_BIT( EXTI->PR , LINE1 );
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <EXTI1_IRQHandler+0x28>)
 80006e2:	695b      	ldr	r3, [r3, #20]
 80006e4:	4a05      	ldr	r2, [pc, #20]	; (80006fc <EXTI1_IRQHandler+0x28>)
 80006e6:	f043 0302 	orr.w	r3, r3, #2
 80006ea:	6153      	str	r3, [r2, #20]
		EXTI_ApfCallBack[LINE1]();
 80006ec:	4b02      	ldr	r3, [pc, #8]	; (80006f8 <EXTI1_IRQHandler+0x24>)
 80006ee:	685b      	ldr	r3, [r3, #4]
 80006f0:	4798      	blx	r3
	}
}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000084 	.word	0x20000084
 80006fc:	40010400 	.word	0x40010400

08000700 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler         ( void )
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
	if ( EXTI_ApfCallBack[LINE2] != NULL )
 8000704:	4b07      	ldr	r3, [pc, #28]	; (8000724 <EXTI2_IRQHandler+0x24>)
 8000706:	689b      	ldr	r3, [r3, #8]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d008      	beq.n	800071e <EXTI2_IRQHandler+0x1e>
	{
		SET_BIT( EXTI->PR , LINE2 );
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <EXTI2_IRQHandler+0x28>)
 800070e:	695b      	ldr	r3, [r3, #20]
 8000710:	4a05      	ldr	r2, [pc, #20]	; (8000728 <EXTI2_IRQHandler+0x28>)
 8000712:	f043 0304 	orr.w	r3, r3, #4
 8000716:	6153      	str	r3, [r2, #20]
	    EXTI_ApfCallBack[LINE2]();
 8000718:	4b02      	ldr	r3, [pc, #8]	; (8000724 <EXTI2_IRQHandler+0x24>)
 800071a:	689b      	ldr	r3, [r3, #8]
 800071c:	4798      	blx	r3
	}
}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000084 	.word	0x20000084
 8000728:	40010400 	.word	0x40010400

0800072c <EXTI3_IRQHandler>:
void EXTI3_IRQHandler         ( void )
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
	if ( EXTI_ApfCallBack[LINE3] != NULL )
 8000730:	4b07      	ldr	r3, [pc, #28]	; (8000750 <EXTI3_IRQHandler+0x24>)
 8000732:	68db      	ldr	r3, [r3, #12]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d008      	beq.n	800074a <EXTI3_IRQHandler+0x1e>
	{
		SET_BIT( EXTI->PR , LINE3 );
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <EXTI3_IRQHandler+0x28>)
 800073a:	695b      	ldr	r3, [r3, #20]
 800073c:	4a05      	ldr	r2, [pc, #20]	; (8000754 <EXTI3_IRQHandler+0x28>)
 800073e:	f043 0308 	orr.w	r3, r3, #8
 8000742:	6153      	str	r3, [r2, #20]
		EXTI_ApfCallBack[LINE3]();
 8000744:	4b02      	ldr	r3, [pc, #8]	; (8000750 <EXTI3_IRQHandler+0x24>)
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	4798      	blx	r3
	}
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000084 	.word	0x20000084
 8000754:	40010400 	.word	0x40010400

08000758 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler         ( void )
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	if ( EXTI_ApfCallBack[LINE4] != NULL )
 800075c:	4b07      	ldr	r3, [pc, #28]	; (800077c <EXTI4_IRQHandler+0x24>)
 800075e:	691b      	ldr	r3, [r3, #16]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d008      	beq.n	8000776 <EXTI4_IRQHandler+0x1e>
	{
		SET_BIT( EXTI->PR , LINE4 );
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <EXTI4_IRQHandler+0x28>)
 8000766:	695b      	ldr	r3, [r3, #20]
 8000768:	4a05      	ldr	r2, [pc, #20]	; (8000780 <EXTI4_IRQHandler+0x28>)
 800076a:	f043 0310 	orr.w	r3, r3, #16
 800076e:	6153      	str	r3, [r2, #20]
		EXTI_ApfCallBack[LINE4]();
 8000770:	4b02      	ldr	r3, [pc, #8]	; (800077c <EXTI4_IRQHandler+0x24>)
 8000772:	691b      	ldr	r3, [r3, #16]
 8000774:	4798      	blx	r3
	}
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000084 	.word	0x20000084
 8000780:	40010400 	.word	0x40010400

08000784 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler         ( void )
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	if ( EXTI_ApfCallBack[LINE5] != NULL && EXTI_LINE5_FLAGE == EXTI_LINE_RISING )
 8000788:	4b32      	ldr	r3, [pc, #200]	; (8000854 <EXTI9_5_IRQHandler+0xd0>)
 800078a:	695b      	ldr	r3, [r3, #20]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d00f      	beq.n	80007b0 <EXTI9_5_IRQHandler+0x2c>
 8000790:	4b31      	ldr	r3, [pc, #196]	; (8000858 <EXTI9_5_IRQHandler+0xd4>)
 8000792:	695b      	ldr	r3, [r3, #20]
 8000794:	095b      	lsrs	r3, r3, #5
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	2b01      	cmp	r3, #1
 800079c:	d108      	bne.n	80007b0 <EXTI9_5_IRQHandler+0x2c>
	{
		SET_BIT( EXTI->PR , LINE5 );
 800079e:	4b2e      	ldr	r3, [pc, #184]	; (8000858 <EXTI9_5_IRQHandler+0xd4>)
 80007a0:	695b      	ldr	r3, [r3, #20]
 80007a2:	4a2d      	ldr	r2, [pc, #180]	; (8000858 <EXTI9_5_IRQHandler+0xd4>)
 80007a4:	f043 0320 	orr.w	r3, r3, #32
 80007a8:	6153      	str	r3, [r2, #20]
		EXTI_ApfCallBack[LINE5]();
 80007aa:	4b2a      	ldr	r3, [pc, #168]	; (8000854 <EXTI9_5_IRQHandler+0xd0>)
 80007ac:	695b      	ldr	r3, [r3, #20]
 80007ae:	4798      	blx	r3
	}
	if ( EXTI_ApfCallBack[LINE6] != NULL && EXTI_LINE6_FLAGE == EXTI_LINE_RISING )
 80007b0:	4b28      	ldr	r3, [pc, #160]	; (8000854 <EXTI9_5_IRQHandler+0xd0>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d00f      	beq.n	80007d8 <EXTI9_5_IRQHandler+0x54>
 80007b8:	4b27      	ldr	r3, [pc, #156]	; (8000858 <EXTI9_5_IRQHandler+0xd4>)
 80007ba:	695b      	ldr	r3, [r3, #20]
 80007bc:	099b      	lsrs	r3, r3, #6
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d108      	bne.n	80007d8 <EXTI9_5_IRQHandler+0x54>
	{
		SET_BIT( EXTI->PR , LINE6 );
 80007c6:	4b24      	ldr	r3, [pc, #144]	; (8000858 <EXTI9_5_IRQHandler+0xd4>)
 80007c8:	695b      	ldr	r3, [r3, #20]
 80007ca:	4a23      	ldr	r2, [pc, #140]	; (8000858 <EXTI9_5_IRQHandler+0xd4>)
 80007cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007d0:	6153      	str	r3, [r2, #20]
	    EXTI_ApfCallBack[LINE6]();
 80007d2:	4b20      	ldr	r3, [pc, #128]	; (8000854 <EXTI9_5_IRQHandler+0xd0>)
 80007d4:	699b      	ldr	r3, [r3, #24]
 80007d6:	4798      	blx	r3
	}
	if ( EXTI_ApfCallBack[LINE7] != NULL && EXTI_LINE7_FLAGE == EXTI_LINE_RISING )
 80007d8:	4b1e      	ldr	r3, [pc, #120]	; (8000854 <EXTI9_5_IRQHandler+0xd0>)
 80007da:	69db      	ldr	r3, [r3, #28]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d00f      	beq.n	8000800 <EXTI9_5_IRQHandler+0x7c>
 80007e0:	4b1d      	ldr	r3, [pc, #116]	; (8000858 <EXTI9_5_IRQHandler+0xd4>)
 80007e2:	695b      	ldr	r3, [r3, #20]
 80007e4:	09db      	lsrs	r3, r3, #7
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d108      	bne.n	8000800 <EXTI9_5_IRQHandler+0x7c>
	{
		SET_BIT( EXTI->PR , LINE7 );
 80007ee:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <EXTI9_5_IRQHandler+0xd4>)
 80007f0:	695b      	ldr	r3, [r3, #20]
 80007f2:	4a19      	ldr	r2, [pc, #100]	; (8000858 <EXTI9_5_IRQHandler+0xd4>)
 80007f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f8:	6153      	str	r3, [r2, #20]
		EXTI_ApfCallBack[LINE7]();
 80007fa:	4b16      	ldr	r3, [pc, #88]	; (8000854 <EXTI9_5_IRQHandler+0xd0>)
 80007fc:	69db      	ldr	r3, [r3, #28]
 80007fe:	4798      	blx	r3
	}
	if ( EXTI_ApfCallBack[LINE8] != NULL && EXTI_LINE8_FLAGE == EXTI_LINE_RISING )
 8000800:	4b14      	ldr	r3, [pc, #80]	; (8000854 <EXTI9_5_IRQHandler+0xd0>)
 8000802:	6a1b      	ldr	r3, [r3, #32]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d00f      	beq.n	8000828 <EXTI9_5_IRQHandler+0xa4>
 8000808:	4b13      	ldr	r3, [pc, #76]	; (8000858 <EXTI9_5_IRQHandler+0xd4>)
 800080a:	695b      	ldr	r3, [r3, #20]
 800080c:	0a1b      	lsrs	r3, r3, #8
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	2b01      	cmp	r3, #1
 8000814:	d108      	bne.n	8000828 <EXTI9_5_IRQHandler+0xa4>
	{
		SET_BIT( EXTI->PR , LINE8 );
 8000816:	4b10      	ldr	r3, [pc, #64]	; (8000858 <EXTI9_5_IRQHandler+0xd4>)
 8000818:	695b      	ldr	r3, [r3, #20]
 800081a:	4a0f      	ldr	r2, [pc, #60]	; (8000858 <EXTI9_5_IRQHandler+0xd4>)
 800081c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000820:	6153      	str	r3, [r2, #20]
		EXTI_ApfCallBack[LINE8]();
 8000822:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <EXTI9_5_IRQHandler+0xd0>)
 8000824:	6a1b      	ldr	r3, [r3, #32]
 8000826:	4798      	blx	r3
	}
	if ( EXTI_ApfCallBack[LINE9] != NULL && EXTI_LINE9_FLAGE == EXTI_LINE_RISING )
 8000828:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <EXTI9_5_IRQHandler+0xd0>)
 800082a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800082c:	2b00      	cmp	r3, #0
 800082e:	d00f      	beq.n	8000850 <EXTI9_5_IRQHandler+0xcc>
 8000830:	4b09      	ldr	r3, [pc, #36]	; (8000858 <EXTI9_5_IRQHandler+0xd4>)
 8000832:	695b      	ldr	r3, [r3, #20]
 8000834:	0a5b      	lsrs	r3, r3, #9
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	2b01      	cmp	r3, #1
 800083c:	d108      	bne.n	8000850 <EXTI9_5_IRQHandler+0xcc>
	{
		SET_BIT( EXTI->PR , LINE9 );
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <EXTI9_5_IRQHandler+0xd4>)
 8000840:	695b      	ldr	r3, [r3, #20]
 8000842:	4a05      	ldr	r2, [pc, #20]	; (8000858 <EXTI9_5_IRQHandler+0xd4>)
 8000844:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000848:	6153      	str	r3, [r2, #20]
		EXTI_ApfCallBack[LINE9]();
 800084a:	4b02      	ldr	r3, [pc, #8]	; (8000854 <EXTI9_5_IRQHandler+0xd0>)
 800084c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800084e:	4798      	blx	r3
	}
}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20000084 	.word	0x20000084
 8000858:	40010400 	.word	0x40010400

0800085c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler         ( void )
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
	if ( EXTI_ApfCallBack[LINE10] != NULL && EXTI_LINE10_FLAGE == EXTI_LINE_RISING )
 8000860:	4b3c      	ldr	r3, [pc, #240]	; (8000954 <EXTI15_10_IRQHandler+0xf8>)
 8000862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000864:	2b00      	cmp	r3, #0
 8000866:	d00f      	beq.n	8000888 <EXTI15_10_IRQHandler+0x2c>
 8000868:	4b3b      	ldr	r3, [pc, #236]	; (8000958 <EXTI15_10_IRQHandler+0xfc>)
 800086a:	695b      	ldr	r3, [r3, #20]
 800086c:	0a9b      	lsrs	r3, r3, #10
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	2b01      	cmp	r3, #1
 8000874:	d108      	bne.n	8000888 <EXTI15_10_IRQHandler+0x2c>
	{
		 SET_BIT( EXTI->PR , LINE10 );
 8000876:	4b38      	ldr	r3, [pc, #224]	; (8000958 <EXTI15_10_IRQHandler+0xfc>)
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	4a37      	ldr	r2, [pc, #220]	; (8000958 <EXTI15_10_IRQHandler+0xfc>)
 800087c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000880:	6153      	str	r3, [r2, #20]
		 EXTI_ApfCallBack[LINE10]();
 8000882:	4b34      	ldr	r3, [pc, #208]	; (8000954 <EXTI15_10_IRQHandler+0xf8>)
 8000884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000886:	4798      	blx	r3
	}
	if ( EXTI_ApfCallBack[LINE11] != NULL && EXTI_LINE11_FLAGE == EXTI_LINE_RISING )
 8000888:	4b32      	ldr	r3, [pc, #200]	; (8000954 <EXTI15_10_IRQHandler+0xf8>)
 800088a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800088c:	2b00      	cmp	r3, #0
 800088e:	d00f      	beq.n	80008b0 <EXTI15_10_IRQHandler+0x54>
 8000890:	4b31      	ldr	r3, [pc, #196]	; (8000958 <EXTI15_10_IRQHandler+0xfc>)
 8000892:	695b      	ldr	r3, [r3, #20]
 8000894:	0adb      	lsrs	r3, r3, #11
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	2b01      	cmp	r3, #1
 800089c:	d108      	bne.n	80008b0 <EXTI15_10_IRQHandler+0x54>
	{
		 SET_BIT( EXTI->PR , LINE11 );
 800089e:	4b2e      	ldr	r3, [pc, #184]	; (8000958 <EXTI15_10_IRQHandler+0xfc>)
 80008a0:	695b      	ldr	r3, [r3, #20]
 80008a2:	4a2d      	ldr	r2, [pc, #180]	; (8000958 <EXTI15_10_IRQHandler+0xfc>)
 80008a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008a8:	6153      	str	r3, [r2, #20]
		 EXTI_ApfCallBack[LINE11]();
 80008aa:	4b2a      	ldr	r3, [pc, #168]	; (8000954 <EXTI15_10_IRQHandler+0xf8>)
 80008ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ae:	4798      	blx	r3
	}
	if ( EXTI_ApfCallBack[LINE12] != NULL && EXTI_LINE12_FLAGE == EXTI_LINE_RISING )
 80008b0:	4b28      	ldr	r3, [pc, #160]	; (8000954 <EXTI15_10_IRQHandler+0xf8>)
 80008b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d00f      	beq.n	80008d8 <EXTI15_10_IRQHandler+0x7c>
 80008b8:	4b27      	ldr	r3, [pc, #156]	; (8000958 <EXTI15_10_IRQHandler+0xfc>)
 80008ba:	695b      	ldr	r3, [r3, #20]
 80008bc:	0b1b      	lsrs	r3, r3, #12
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d108      	bne.n	80008d8 <EXTI15_10_IRQHandler+0x7c>
	{
		 SET_BIT( EXTI->PR , LINE12 );
 80008c6:	4b24      	ldr	r3, [pc, #144]	; (8000958 <EXTI15_10_IRQHandler+0xfc>)
 80008c8:	695b      	ldr	r3, [r3, #20]
 80008ca:	4a23      	ldr	r2, [pc, #140]	; (8000958 <EXTI15_10_IRQHandler+0xfc>)
 80008cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008d0:	6153      	str	r3, [r2, #20]
		 EXTI_ApfCallBack[LINE12]();
 80008d2:	4b20      	ldr	r3, [pc, #128]	; (8000954 <EXTI15_10_IRQHandler+0xf8>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4798      	blx	r3
	}
	if ( EXTI_ApfCallBack[LINE13] != NULL && EXTI_LINE13_FLAGE == EXTI_LINE_RISING )
 80008d8:	4b1e      	ldr	r3, [pc, #120]	; (8000954 <EXTI15_10_IRQHandler+0xf8>)
 80008da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d00f      	beq.n	8000900 <EXTI15_10_IRQHandler+0xa4>
 80008e0:	4b1d      	ldr	r3, [pc, #116]	; (8000958 <EXTI15_10_IRQHandler+0xfc>)
 80008e2:	695b      	ldr	r3, [r3, #20]
 80008e4:	0b5b      	lsrs	r3, r3, #13
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d108      	bne.n	8000900 <EXTI15_10_IRQHandler+0xa4>
	{
		 SET_BIT( EXTI->PR , LINE13 );
 80008ee:	4b1a      	ldr	r3, [pc, #104]	; (8000958 <EXTI15_10_IRQHandler+0xfc>)
 80008f0:	695b      	ldr	r3, [r3, #20]
 80008f2:	4a19      	ldr	r2, [pc, #100]	; (8000958 <EXTI15_10_IRQHandler+0xfc>)
 80008f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008f8:	6153      	str	r3, [r2, #20]
		 EXTI_ApfCallBack[LINE13]();
 80008fa:	4b16      	ldr	r3, [pc, #88]	; (8000954 <EXTI15_10_IRQHandler+0xf8>)
 80008fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008fe:	4798      	blx	r3
	}
	if ( EXTI_ApfCallBack[LINE14] != NULL && EXTI_LINE14_FLAGE == EXTI_LINE_RISING )
 8000900:	4b14      	ldr	r3, [pc, #80]	; (8000954 <EXTI15_10_IRQHandler+0xf8>)
 8000902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000904:	2b00      	cmp	r3, #0
 8000906:	d00f      	beq.n	8000928 <EXTI15_10_IRQHandler+0xcc>
 8000908:	4b13      	ldr	r3, [pc, #76]	; (8000958 <EXTI15_10_IRQHandler+0xfc>)
 800090a:	695b      	ldr	r3, [r3, #20]
 800090c:	0b9b      	lsrs	r3, r3, #14
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	2b01      	cmp	r3, #1
 8000914:	d108      	bne.n	8000928 <EXTI15_10_IRQHandler+0xcc>
	{
		 SET_BIT( EXTI->PR , LINE14 );
 8000916:	4b10      	ldr	r3, [pc, #64]	; (8000958 <EXTI15_10_IRQHandler+0xfc>)
 8000918:	695b      	ldr	r3, [r3, #20]
 800091a:	4a0f      	ldr	r2, [pc, #60]	; (8000958 <EXTI15_10_IRQHandler+0xfc>)
 800091c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000920:	6153      	str	r3, [r2, #20]
		 EXTI_ApfCallBack[LINE14]();
 8000922:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <EXTI15_10_IRQHandler+0xf8>)
 8000924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000926:	4798      	blx	r3
	}
	if ( EXTI_ApfCallBack[LINE15] != NULL && EXTI_LINE15_FLAGE == EXTI_LINE_RISING )
 8000928:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <EXTI15_10_IRQHandler+0xf8>)
 800092a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800092c:	2b00      	cmp	r3, #0
 800092e:	d00f      	beq.n	8000950 <EXTI15_10_IRQHandler+0xf4>
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <EXTI15_10_IRQHandler+0xfc>)
 8000932:	695b      	ldr	r3, [r3, #20]
 8000934:	0bdb      	lsrs	r3, r3, #15
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	2b01      	cmp	r3, #1
 800093c:	d108      	bne.n	8000950 <EXTI15_10_IRQHandler+0xf4>
	{
		 SET_BIT( EXTI->PR , LINE15 );
 800093e:	4b06      	ldr	r3, [pc, #24]	; (8000958 <EXTI15_10_IRQHandler+0xfc>)
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	4a05      	ldr	r2, [pc, #20]	; (8000958 <EXTI15_10_IRQHandler+0xfc>)
 8000944:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000948:	6153      	str	r3, [r2, #20]
		 EXTI_ApfCallBack[LINE15]();
 800094a:	4b02      	ldr	r3, [pc, #8]	; (8000954 <EXTI15_10_IRQHandler+0xf8>)
 800094c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800094e:	4798      	blx	r3
	}
}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000084 	.word	0x20000084
 8000958:	40010400 	.word	0x40010400

0800095c <MGPIO_u8SetPinDirection>:
 *
 *
 ******************************************************************************
 */
uint8_t MGPIO_u8SetPinDirection ( Port_t Copy_PortID , Pin_t Copy_PinID , PinPortMode_t Copy_Mode    )
{
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	71fb      	strb	r3, [r7, #7]
 8000966:	460b      	mov	r3, r1
 8000968:	71bb      	strb	r3, [r7, #6]
 800096a:	4613      	mov	r3, r2
 800096c:	717b      	strb	r3, [r7, #5]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK;
 800096e:	2301      	movs	r3, #1
 8000970:	73fb      	strb	r3, [r7, #15]
	if ( Copy_PortID<=PORTG && Copy_PinID<=PIN15  )
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	2b06      	cmp	r3, #6
 8000976:	d835      	bhi.n	80009e4 <MGPIO_u8SetPinDirection+0x88>
 8000978:	79bb      	ldrb	r3, [r7, #6]
 800097a:	2b0f      	cmp	r3, #15
 800097c:	d832      	bhi.n	80009e4 <MGPIO_u8SetPinDirection+0x88>
	{
		uint8_t Local_u8Reg = (Copy_PinID)/CNF_PIN_ACCSESS ;
 800097e:	79bb      	ldrb	r3, [r7, #6]
 8000980:	08db      	lsrs	r3, r3, #3
 8000982:	73bb      	strb	r3, [r7, #14]
		GPIO_Ports[Copy_PortID]->CR[Local_u8Reg]  &=~ ( ( MODER_MASK) << ( ( Copy_PinID % CNF_PIN_ACCSESS ) * MODE_PIN_ACCSESS ) );
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	4a1b      	ldr	r2, [pc, #108]	; (80009f4 <MGPIO_u8SetPinDirection+0x98>)
 8000988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800098c:	7bba      	ldrb	r2, [r7, #14]
 800098e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000992:	79bb      	ldrb	r3, [r7, #6]
 8000994:	f003 0307 	and.w	r3, r3, #7
 8000998:	009b      	lsls	r3, r3, #2
 800099a:	220f      	movs	r2, #15
 800099c:	fa02 f303 	lsl.w	r3, r2, r3
 80009a0:	43db      	mvns	r3, r3
 80009a2:	4618      	mov	r0, r3
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	4a13      	ldr	r2, [pc, #76]	; (80009f4 <MGPIO_u8SetPinDirection+0x98>)
 80009a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ac:	7bba      	ldrb	r2, [r7, #14]
 80009ae:	4001      	ands	r1, r0
 80009b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		GPIO_Ports[Copy_PortID]->CR[Local_u8Reg]  |=  ( ( Copy_Mode ) << ( ( Copy_PinID % CNF_PIN_ACCSESS ) * MODE_PIN_ACCSESS ) );
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	4a0f      	ldr	r2, [pc, #60]	; (80009f4 <MGPIO_u8SetPinDirection+0x98>)
 80009b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009bc:	7bba      	ldrb	r2, [r7, #14]
 80009be:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80009c2:	797a      	ldrb	r2, [r7, #5]
 80009c4:	79bb      	ldrb	r3, [r7, #6]
 80009c6:	f003 0307 	and.w	r3, r3, #7
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	fa02 f303 	lsl.w	r3, r2, r3
 80009d0:	4618      	mov	r0, r3
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	4a07      	ldr	r2, [pc, #28]	; (80009f4 <MGPIO_u8SetPinDirection+0x98>)
 80009d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009da:	7bba      	ldrb	r2, [r7, #14]
 80009dc:	4301      	orrs	r1, r0
 80009de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	{
 80009e2:	e001      	b.n	80009e8 <MGPIO_u8SetPinDirection+0x8c>
	}
	else
	{
		    Local_u8ErrorState = ERROR_STATE_NOK;
 80009e4:	2300      	movs	r3, #0
 80009e6:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState;
 80009e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3714      	adds	r7, #20
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr
 80009f4:	20000000 	.word	0x20000000

080009f8 <MGPIO_u8SetPinValue>:
 *
 *
 ******************************************************************************
 */
uint8_t MGPIO_u8SetPinValue     ( Port_t Copy_PortID , Pin_t Copy_PinID , PinValue_t Copy_Value   )
{
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	71fb      	strb	r3, [r7, #7]
 8000a02:	460b      	mov	r3, r1
 8000a04:	71bb      	strb	r3, [r7, #6]
 8000a06:	4613      	mov	r3, r2
 8000a08:	717b      	strb	r3, [r7, #5]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	73fb      	strb	r3, [r7, #15]
	if ( Copy_PortID <= PORTG && Copy_PinID <= PIN15 )
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	2b06      	cmp	r3, #6
 8000a12:	d824      	bhi.n	8000a5e <MGPIO_u8SetPinValue+0x66>
 8000a14:	79bb      	ldrb	r3, [r7, #6]
 8000a16:	2b0f      	cmp	r3, #15
 8000a18:	d821      	bhi.n	8000a5e <MGPIO_u8SetPinValue+0x66>
	{
		GPIO_Ports[Copy_PortID]->ODR &=~ (PIN_MASK << (Copy_PinID)) ;
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	4a14      	ldr	r2, [pc, #80]	; (8000a70 <MGPIO_u8SetPinValue+0x78>)
 8000a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a22:	68da      	ldr	r2, [r3, #12]
 8000a24:	79bb      	ldrb	r3, [r7, #6]
 8000a26:	2101      	movs	r1, #1
 8000a28:	fa01 f303 	lsl.w	r3, r1, r3
 8000a2c:	43db      	mvns	r3, r3
 8000a2e:	4618      	mov	r0, r3
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	490f      	ldr	r1, [pc, #60]	; (8000a70 <MGPIO_u8SetPinValue+0x78>)
 8000a34:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a38:	4002      	ands	r2, r0
 8000a3a:	60da      	str	r2, [r3, #12]
		GPIO_Ports[Copy_PortID]->ODR |=  (Copy_Value<< (Copy_PinID)) ;
 8000a3c:	79fb      	ldrb	r3, [r7, #7]
 8000a3e:	4a0c      	ldr	r2, [pc, #48]	; (8000a70 <MGPIO_u8SetPinValue+0x78>)
 8000a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a44:	68da      	ldr	r2, [r3, #12]
 8000a46:	7979      	ldrb	r1, [r7, #5]
 8000a48:	79bb      	ldrb	r3, [r7, #6]
 8000a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a4e:	4618      	mov	r0, r3
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	4907      	ldr	r1, [pc, #28]	; (8000a70 <MGPIO_u8SetPinValue+0x78>)
 8000a54:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a58:	4302      	orrs	r2, r0
 8000a5a:	60da      	str	r2, [r3, #12]
 8000a5c:	e001      	b.n	8000a62 <MGPIO_u8SetPinValue+0x6a>
			Local_u8ErrorState = ERROR_STATE_NOK;
		}*/
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState;
 8000a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3714      	adds	r7, #20
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bc80      	pop	{r7}
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	20000000 	.word	0x20000000

08000a74 <MGPTIMER_u8ClearInterruptFlags>:
 *
 *
 ******************************************************************************
 */
static uint8_t  MGPTIMER_u8ClearInterruptFlags( GPTIMERindex_t Copy_GPTIMERindex )
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	73fb      	strb	r3, [r7, #15]
	if ( Copy_GPTIMERindex <= TMR_5 )
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	2b03      	cmp	r3, #3
 8000a86:	d80c      	bhi.n	8000aa2 <MGPTIMER_u8ClearInterruptFlags+0x2e>
	{
		GPTIMER_Index[Copy_GPTIMERindex] -> SR &=~ (GPTIMER_CCIF_MASK << GPTIMER_SR_CC1IF);
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	4a0a      	ldr	r2, [pc, #40]	; (8000ab4 <MGPTIMER_u8ClearInterruptFlags+0x40>)
 8000a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a90:	691a      	ldr	r2, [r3, #16]
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	4907      	ldr	r1, [pc, #28]	; (8000ab4 <MGPTIMER_u8ClearInterruptFlags+0x40>)
 8000a96:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a9a:	f022 021e 	bic.w	r2, r2, #30
 8000a9e:	611a      	str	r2, [r3, #16]
 8000aa0:	e001      	b.n	8000aa6 <MGPTIMER_u8ClearInterruptFlags+0x32>
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState ;
 8000aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3714      	adds	r7, #20
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bc80      	pop	{r7}
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	2000000c 	.word	0x2000000c

08000ab8 <TIM2_IRQHandler>:

/*************************************************************************************************************************************/
/********************************************************* Handlers implementations **************************************************/
/*************************************************************************************************************************************/
void TIM2_IRQHandler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
	if (  GPTIMER_ApfCallBack[TMR_2] != NULL )
 8000abc:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <TIM2_IRQHandler+0x1c>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d005      	beq.n	8000ad0 <TIM2_IRQHandler+0x18>
	{
		MGPTIMER_u8ClearInterruptFlags(TMR_2);
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	f7ff ffd5 	bl	8000a74 <MGPTIMER_u8ClearInterruptFlags>
		GPTIMER_ApfCallBack[TMR_2]();
 8000aca:	4b02      	ldr	r3, [pc, #8]	; (8000ad4 <TIM2_IRQHandler+0x1c>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4798      	blx	r3
	}
}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	200000c4 	.word	0x200000c4

08000ad8 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
	if (  GPTIMER_ApfCallBack[TMR_3] != NULL )
 8000adc:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <TIM3_IRQHandler+0x1c>)
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d005      	beq.n	8000af0 <TIM3_IRQHandler+0x18>
	{
		MGPTIMER_u8ClearInterruptFlags(TMR_3);
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	f7ff ffc5 	bl	8000a74 <MGPTIMER_u8ClearInterruptFlags>
		GPTIMER_ApfCallBack[TMR_3]();
 8000aea:	4b02      	ldr	r3, [pc, #8]	; (8000af4 <TIM3_IRQHandler+0x1c>)
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	4798      	blx	r3
	}
}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	200000c4 	.word	0x200000c4

08000af8 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
	if (  GPTIMER_ApfCallBack[TMR_4] != NULL )
 8000afc:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <TIM4_IRQHandler+0x1c>)
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d005      	beq.n	8000b10 <TIM4_IRQHandler+0x18>
	{
		MGPTIMER_u8ClearInterruptFlags(TMR_4);
 8000b04:	2002      	movs	r0, #2
 8000b06:	f7ff ffb5 	bl	8000a74 <MGPTIMER_u8ClearInterruptFlags>
		GPTIMER_ApfCallBack[TMR_4]();
 8000b0a:	4b02      	ldr	r3, [pc, #8]	; (8000b14 <TIM4_IRQHandler+0x1c>)
 8000b0c:	689b      	ldr	r3, [r3, #8]
 8000b0e:	4798      	blx	r3
	}
}void TIM5_IRQHandler(void)
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	200000c4 	.word	0x200000c4

08000b18 <TIM5_IRQHandler>:
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
	if (  GPTIMER_ApfCallBack[TMR_5] != NULL )
 8000b1c:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <TIM5_IRQHandler+0x1c>)
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d005      	beq.n	8000b30 <TIM5_IRQHandler+0x18>
	{
		MGPTIMER_u8ClearInterruptFlags(TMR_5);
 8000b24:	2003      	movs	r0, #3
 8000b26:	f7ff ffa5 	bl	8000a74 <MGPTIMER_u8ClearInterruptFlags>
		GPTIMER_ApfCallBack[TMR_5]();
 8000b2a:	4b02      	ldr	r3, [pc, #8]	; (8000b34 <TIM5_IRQHandler+0x1c>)
 8000b2c:	68db      	ldr	r3, [r3, #12]
 8000b2e:	4798      	blx	r3
	}
}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	200000c4 	.word	0x200000c4

08000b38 <HLCD_voidInit>:

/*************************************************************************************************************************************/
/********************************************************* Functions implementations *************************************************/
/*************************************************************************************************************************************/
void HLCD_voidInit(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  MSTK_u8ClockConfig(STK_AHB_DIV_8);
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	f000 fb69 	bl	8001214 <MSTK_u8ClockConfig>
	 HLCD_voidSendCmnd(LCD_DISPLAY_ON_OF_CONTROL);
	 MSTK_u8BusyWait(LCD_u8_WAIT_DISPLAY);
	 HLCD_voidSendCmnd(LCD_DISPLAY_CLEAR);
	 MSTK_u8BusyWait(LCD_u8_WAIT_ENTRY);
  #elif   LCD_u8_MODE == LCD_u8_MODE_4_BIT
	 MGPIO_u8SetPinDirection(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN0,OUTPUT_SPEED_2MHZ_PP);
 8000b42:	2202      	movs	r2, #2
 8000b44:	210f      	movs	r1, #15
 8000b46:	2001      	movs	r0, #1
 8000b48:	f7ff ff08 	bl	800095c <MGPIO_u8SetPinDirection>
	 MGPIO_u8SetPinDirection(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN1,OUTPUT_SPEED_2MHZ_PP);
 8000b4c:	2202      	movs	r2, #2
 8000b4e:	210e      	movs	r1, #14
 8000b50:	2001      	movs	r0, #1
 8000b52:	f7ff ff03 	bl	800095c <MGPIO_u8SetPinDirection>
	 MGPIO_u8SetPinDirection(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN2,OUTPUT_SPEED_2MHZ_PP);
 8000b56:	2202      	movs	r2, #2
 8000b58:	210d      	movs	r1, #13
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	f7ff fefe 	bl	800095c <MGPIO_u8SetPinDirection>
	 MGPIO_u8SetPinDirection(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN3,OUTPUT_SPEED_2MHZ_PP);
 8000b60:	2202      	movs	r2, #2
 8000b62:	210c      	movs	r1, #12
 8000b64:	2001      	movs	r0, #1
 8000b66:	f7ff fef9 	bl	800095c <MGPIO_u8SetPinDirection>

	 MGPIO_u8SetPinDirection(LCD_u8_CONTRAL_PORT,LCD_u8_RS_PIN,OUTPUT_SPEED_2MHZ_PP);
 8000b6a:	2202      	movs	r2, #2
 8000b6c:	210b      	movs	r1, #11
 8000b6e:	2000      	movs	r0, #0
 8000b70:	f7ff fef4 	bl	800095c <MGPIO_u8SetPinDirection>
	 //MGPIO_u8SetPinDirection(LCD_u8_CONTRAL_PORT,LCD_u8_RW_PIN,OUTPUT_SPEED_2MHZ_PP);
	 MGPIO_u8SetPinDirection(LCD_u8_CONTRAL_PORT,LCD_u8_E_PIN, OUTPUT_SPEED_2MHZ_PP);
 8000b74:	2202      	movs	r2, #2
 8000b76:	2108      	movs	r1, #8
 8000b78:	2000      	movs	r0, #0
 8000b7a:	f7ff feef 	bl	800095c <MGPIO_u8SetPinDirection>
	 /**********************************************************/
	 MSTK_u8BusyWait(LCD_u8_WAIT_VOLT);
 8000b7e:	f648 00b8 	movw	r0, #35000	; 0x88b8
 8000b82:	f000 fb7f 	bl	8001284 <MSTK_u8BusyWait>
	 HLCD_voidSendCmnd(LCD_FUN_SIT_1);
 8000b86:	2002      	movs	r0, #2
 8000b88:	f000 f829 	bl	8000bde <HLCD_voidSendCmnd>
	 HLCD_voidSendCmnd(LCD_FUN_SIT_2);
 8000b8c:	2028      	movs	r0, #40	; 0x28
 8000b8e:	f000 f826 	bl	8000bde <HLCD_voidSendCmnd>
	 MSTK_u8BusyWait(LCD_u8_WAIT_DISPLAY);
 8000b92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b96:	f000 fb75 	bl	8001284 <MSTK_u8BusyWait>
	 HLCD_voidSendCmnd(LCD_DISPLAY_ON);
 8000b9a:	200c      	movs	r0, #12
 8000b9c:	f000 f81f 	bl	8000bde <HLCD_voidSendCmnd>
	 MSTK_u8BusyWait(LCD_u8_WAIT_DISPLAY);
 8000ba0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ba4:	f000 fb6e 	bl	8001284 <MSTK_u8BusyWait>
	 HLCD_voidSendCmnd(LCD_DISPLAY_CLEAR);
 8000ba8:	2001      	movs	r0, #1
 8000baa:	f000 f818 	bl	8000bde <HLCD_voidSendCmnd>
	 MSTK_u8BusyWait(LCD_u8_WAIT_ENTRY);
 8000bae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000bb2:	f000 fb67 	bl	8001284 <MSTK_u8BusyWait>
	 HLCD_voidSendCmnd(LCD_ENTRY_MODE);
 8000bb6:	2006      	movs	r0, #6
 8000bb8:	f000 f811 	bl	8000bde <HLCD_voidSendCmnd>
	 MSTK_u8BusyWait(LCD_u8_WAIT_ENTRY);
 8000bbc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000bc0:	f000 fb60 	bl	8001284 <MSTK_u8BusyWait>
  #endif
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <HLCD_voidClearLCD>:
void HLCD_voidClearLCD(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	HLCD_voidSendCmnd(LCD_DISPLAY_CLEAR);
 8000bcc:	2001      	movs	r0, #1
 8000bce:	f000 f806 	bl	8000bde <HLCD_voidSendCmnd>
	MSTK_u8BusyWait(3000);
 8000bd2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000bd6:	f000 fb55 	bl	8001284 <MSTK_u8BusyWait>
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <HLCD_voidSendCmnd>:
{
	HLCD_voidSendCmnd(LCD_HIDDEN_CURSOR);
	MSTK_u8BusyWait(2000);
}
static void HLCD_voidSendCmnd(uint8_t Copy_u8Comnd)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	4603      	mov	r3, r0
 8000be6:	71fb      	strb	r3, [r7, #7]
	MGPIO_u8SetPortValue(LCD_u8_DATA_PORT,LCD_u8_DATA_Position,Copy_u8Comnd);
	MGPIO_u8SetPinValue(LCD_u8_CONTRAL_PORT,LCD_u8_E_PIN,HIGH);
	MSTK_u8BusyWait(1);;
	MGPIO_u8SetPinValue(LCD_u8_CONTRAL_PORT,LCD_u8_E_PIN,LOW);
  #elif   LCD_u8_MODE  ==  LCD_u8_MODE_4_BIT
	MGPIO_u8SetPinValue(LCD_u8_CONTRAL_PORT,LCD_u8_RS_PIN,LOW);
 8000be8:	2200      	movs	r2, #0
 8000bea:	210b      	movs	r1, #11
 8000bec:	2000      	movs	r0, #0
 8000bee:	f7ff ff03 	bl	80009f8 <MGPIO_u8SetPinValue>
	//MGPIO_u8SetPinValue(LCD_u8_CONTRAL_PORT,LCD_u8_RW_PIN,LOW);
	/*******************************************************************/
	MGPIO_u8SetPinValue(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN0,GET_BIT(Copy_u8Comnd,4));
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	091b      	lsrs	r3, r3, #4
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	f003 0301 	and.w	r3, r3, #1
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	461a      	mov	r2, r3
 8000c00:	210f      	movs	r1, #15
 8000c02:	2001      	movs	r0, #1
 8000c04:	f7ff fef8 	bl	80009f8 <MGPIO_u8SetPinValue>
	MGPIO_u8SetPinValue(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN1,GET_BIT(Copy_u8Comnd,5));
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	095b      	lsrs	r3, r3, #5
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	461a      	mov	r2, r3
 8000c16:	210e      	movs	r1, #14
 8000c18:	2001      	movs	r0, #1
 8000c1a:	f7ff feed 	bl	80009f8 <MGPIO_u8SetPinValue>
	MGPIO_u8SetPinValue(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN2,GET_BIT(Copy_u8Comnd,6));
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	099b      	lsrs	r3, r3, #6
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	f003 0301 	and.w	r3, r3, #1
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	210d      	movs	r1, #13
 8000c2e:	2001      	movs	r0, #1
 8000c30:	f7ff fee2 	bl	80009f8 <MGPIO_u8SetPinValue>
	MGPIO_u8SetPinValue(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN3,GET_BIT(Copy_u8Comnd,7));
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	09db      	lsrs	r3, r3, #7
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	210c      	movs	r1, #12
 8000c3e:	2001      	movs	r0, #1
 8000c40:	f7ff feda 	bl	80009f8 <MGPIO_u8SetPinValue>
	/********************************************************************/
	MGPIO_u8SetPinValue(LCD_u8_CONTRAL_PORT,LCD_u8_E_PIN,HIGH);
 8000c44:	2201      	movs	r2, #1
 8000c46:	2108      	movs	r1, #8
 8000c48:	2000      	movs	r0, #0
 8000c4a:	f7ff fed5 	bl	80009f8 <MGPIO_u8SetPinValue>
	MSTK_u8BusyWait(LCD_u8_WAIT_ENABLE_PULSE);
 8000c4e:	2002      	movs	r0, #2
 8000c50:	f000 fb18 	bl	8001284 <MSTK_u8BusyWait>
	MGPIO_u8SetPinValue(LCD_u8_CONTRAL_PORT,LCD_u8_E_PIN,LOW);
 8000c54:	2200      	movs	r2, #0
 8000c56:	2108      	movs	r1, #8
 8000c58:	2000      	movs	r0, #0
 8000c5a:	f7ff fecd 	bl	80009f8 <MGPIO_u8SetPinValue>
	/************************/
	MSTK_u8BusyWait(LCD_u8_WAIT_SHIFT);
 8000c5e:	2002      	movs	r0, #2
 8000c60:	f000 fb10 	bl	8001284 <MSTK_u8BusyWait>
	/*******************************************************************/
	MGPIO_u8SetPinValue(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN0,GET_BIT(Copy_u8Comnd,0));
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	210f      	movs	r1, #15
 8000c70:	2001      	movs	r0, #1
 8000c72:	f7ff fec1 	bl	80009f8 <MGPIO_u8SetPinValue>
	MGPIO_u8SetPinValue(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN1,GET_BIT(Copy_u8Comnd,1));
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	085b      	lsrs	r3, r3, #1
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	f003 0301 	and.w	r3, r3, #1
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	461a      	mov	r2, r3
 8000c84:	210e      	movs	r1, #14
 8000c86:	2001      	movs	r0, #1
 8000c88:	f7ff feb6 	bl	80009f8 <MGPIO_u8SetPinValue>
	MGPIO_u8SetPinValue(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN2,GET_BIT(Copy_u8Comnd,2));
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	089b      	lsrs	r3, r3, #2
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	461a      	mov	r2, r3
 8000c9a:	210d      	movs	r1, #13
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	f7ff feab 	bl	80009f8 <MGPIO_u8SetPinValue>
	MGPIO_u8SetPinValue(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN3,GET_BIT(Copy_u8Comnd,3));
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	08db      	lsrs	r3, r3, #3
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	f003 0301 	and.w	r3, r3, #1
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	461a      	mov	r2, r3
 8000cb0:	210c      	movs	r1, #12
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	f7ff fea0 	bl	80009f8 <MGPIO_u8SetPinValue>
	/*******************************************************************/
	MGPIO_u8SetPinValue(LCD_u8_CONTRAL_PORT,LCD_u8_E_PIN,HIGH);
 8000cb8:	2201      	movs	r2, #1
 8000cba:	2108      	movs	r1, #8
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f7ff fe9b 	bl	80009f8 <MGPIO_u8SetPinValue>
	MSTK_u8BusyWait(LCD_u8_WAIT_ENABLE_PULSE);
 8000cc2:	2002      	movs	r0, #2
 8000cc4:	f000 fade 	bl	8001284 <MSTK_u8BusyWait>
	MGPIO_u8SetPinValue(LCD_u8_CONTRAL_PORT,LCD_u8_E_PIN,LOW);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2108      	movs	r1, #8
 8000ccc:	2000      	movs	r0, #0
 8000cce:	f7ff fe93 	bl	80009f8 <MGPIO_u8SetPinValue>
	MSTK_u8BusyWait(LCD_u8_WAIT_SHIFT);
 8000cd2:	2002      	movs	r0, #2
 8000cd4:	f000 fad6 	bl	8001284 <MSTK_u8BusyWait>
  #endif
}
 8000cd8:	bf00      	nop
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <HLCD_voidSendChar>:
void HLCD_voidSendChar(uint8_t Copy_u8Char)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	71fb      	strb	r3, [r7, #7]
	MGPIO_u8SetPortValue(LCD_u8_DATA_PORT,LCD_u8_DATA_Position,Copy_u8Char);
	MGPIO_u8SetPinValue(LCD_u8_CONTRAL_PORT,LCD_u8_E_PIN,HIGH);
	MSTK_u8BusyWait(1);
	MGPIO_u8SetPinValue(LCD_u8_CONTRAL_PORT,LCD_u8_E_PIN,LOW);
  #elif   LCD_u8_MODE  ==  LCD_u8_MODE_4_BIT
	MGPIO_u8SetPinValue(LCD_u8_CONTRAL_PORT,LCD_u8_RS_PIN,HIGH);
 8000cea:	2201      	movs	r2, #1
 8000cec:	210b      	movs	r1, #11
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f7ff fe82 	bl	80009f8 <MGPIO_u8SetPinValue>
	//MGPIO_u8SetPinValue(LCD_u8_CONTRAL_PORT,LCD_u8_RW_PIN,LOW);
	/*******************************************************************/
	MGPIO_u8SetPinValue(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN0,GET_BIT(Copy_u8Char,4));
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	091b      	lsrs	r3, r3, #4
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	461a      	mov	r2, r3
 8000d02:	210f      	movs	r1, #15
 8000d04:	2001      	movs	r0, #1
 8000d06:	f7ff fe77 	bl	80009f8 <MGPIO_u8SetPinValue>
	MGPIO_u8SetPinValue(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN1,GET_BIT(Copy_u8Char,5));
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	095b      	lsrs	r3, r3, #5
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	f003 0301 	and.w	r3, r3, #1
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	461a      	mov	r2, r3
 8000d18:	210e      	movs	r1, #14
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	f7ff fe6c 	bl	80009f8 <MGPIO_u8SetPinValue>
	MGPIO_u8SetPinValue(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN2,GET_BIT(Copy_u8Char,6));
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	099b      	lsrs	r3, r3, #6
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	210d      	movs	r1, #13
 8000d30:	2001      	movs	r0, #1
 8000d32:	f7ff fe61 	bl	80009f8 <MGPIO_u8SetPinValue>
	MGPIO_u8SetPinValue(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN3,GET_BIT(Copy_u8Char,7));
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	09db      	lsrs	r3, r3, #7
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	210c      	movs	r1, #12
 8000d40:	2001      	movs	r0, #1
 8000d42:	f7ff fe59 	bl	80009f8 <MGPIO_u8SetPinValue>
	/*******************************************************************/
	MGPIO_u8SetPinValue(LCD_u8_CONTRAL_PORT,LCD_u8_E_PIN,HIGH);
 8000d46:	2201      	movs	r2, #1
 8000d48:	2108      	movs	r1, #8
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	f7ff fe54 	bl	80009f8 <MGPIO_u8SetPinValue>
	MSTK_u8BusyWait(LCD_u8_WAIT_ENABLE_PULSE);
 8000d50:	2002      	movs	r0, #2
 8000d52:	f000 fa97 	bl	8001284 <MSTK_u8BusyWait>
	MGPIO_u8SetPinValue(LCD_u8_CONTRAL_PORT,LCD_u8_E_PIN,LOW);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2108      	movs	r1, #8
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	f7ff fe4c 	bl	80009f8 <MGPIO_u8SetPinValue>
    /************************/
	MSTK_u8BusyWait(LCD_u8_WAIT_SHIFT);
 8000d60:	2002      	movs	r0, #2
 8000d62:	f000 fa8f 	bl	8001284 <MSTK_u8BusyWait>
	/*******************************************************************/
	MGPIO_u8SetPinValue(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN0,GET_BIT(Copy_u8Char,0));
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	f003 0301 	and.w	r3, r3, #1
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	461a      	mov	r2, r3
 8000d70:	210f      	movs	r1, #15
 8000d72:	2001      	movs	r0, #1
 8000d74:	f7ff fe40 	bl	80009f8 <MGPIO_u8SetPinValue>
	MGPIO_u8SetPinValue(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN1,GET_BIT(Copy_u8Char,1));
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	085b      	lsrs	r3, r3, #1
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	461a      	mov	r2, r3
 8000d86:	210e      	movs	r1, #14
 8000d88:	2001      	movs	r0, #1
 8000d8a:	f7ff fe35 	bl	80009f8 <MGPIO_u8SetPinValue>
	MGPIO_u8SetPinValue(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN2,GET_BIT(Copy_u8Char,2));
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	089b      	lsrs	r3, r3, #2
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	f003 0301 	and.w	r3, r3, #1
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	210d      	movs	r1, #13
 8000d9e:	2001      	movs	r0, #1
 8000da0:	f7ff fe2a 	bl	80009f8 <MGPIO_u8SetPinValue>
	MGPIO_u8SetPinValue(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN3,GET_BIT(Copy_u8Char,3));
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	08db      	lsrs	r3, r3, #3
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	461a      	mov	r2, r3
 8000db2:	210c      	movs	r1, #12
 8000db4:	2001      	movs	r0, #1
 8000db6:	f7ff fe1f 	bl	80009f8 <MGPIO_u8SetPinValue>
	/*******************************************************************/
	MGPIO_u8SetPinValue(LCD_u8_CONTRAL_PORT,LCD_u8_E_PIN,HIGH);
 8000dba:	2201      	movs	r2, #1
 8000dbc:	2108      	movs	r1, #8
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f7ff fe1a 	bl	80009f8 <MGPIO_u8SetPinValue>
	MSTK_u8BusyWait(LCD_u8_WAIT_ENABLE_PULSE);
 8000dc4:	2002      	movs	r0, #2
 8000dc6:	f000 fa5d 	bl	8001284 <MSTK_u8BusyWait>
	MGPIO_u8SetPinValue(LCD_u8_CONTRAL_PORT,LCD_u8_E_PIN,LOW);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2108      	movs	r1, #8
 8000dce:	2000      	movs	r0, #0
 8000dd0:	f7ff fe12 	bl	80009f8 <MGPIO_u8SetPinValue>
	MSTK_u8BusyWait(LCD_u8_WAIT_SHIFT);
 8000dd4:	2002      	movs	r0, #2
 8000dd6:	f000 fa55 	bl	8001284 <MSTK_u8BusyWait>
  #endif
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HLCD_voidSendString>:
void HLCD_voidSendString(uint8_t *Copy_pu8String)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b084      	sub	sp, #16
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
	for(uint8_t Local_u8Counter=0; Copy_pu8String[Local_u8Counter] != '\0' ; Local_u8Counter++)
 8000dea:	2300      	movs	r3, #0
 8000dec:	73fb      	strb	r3, [r7, #15]
 8000dee:	e009      	b.n	8000e04 <HLCD_voidSendString+0x22>
	{
		  HLCD_voidSendChar(Copy_pu8String[Local_u8Counter]);
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	4413      	add	r3, r2
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff ff71 	bl	8000ce0 <HLCD_voidSendChar>
	for(uint8_t Local_u8Counter=0; Copy_pu8String[Local_u8Counter] != '\0' ; Local_u8Counter++)
 8000dfe:	7bfb      	ldrb	r3, [r7, #15]
 8000e00:	3301      	adds	r3, #1
 8000e02:	73fb      	strb	r3, [r7, #15]
 8000e04:	7bfb      	ldrb	r3, [r7, #15]
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d1ef      	bne.n	8000df0 <HLCD_voidSendString+0xe>
	}
}
 8000e10:	bf00      	nop
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
	...

08000e1c <HLCD_voidSendNumber>:

void HLCD_voidSendNumber(uint32_t Copy_u8Number)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b088      	sub	sp, #32
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
	uint32_t Local_remainder=LCD_u8_Zero,Local_reverse=LCD_u8_Zero,Local_TMP=LCD_u8_Zero,Local_Counter,Local_TMPNum=Copy_u8Number;
 8000e24:	2300      	movs	r3, #0
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61fb      	str	r3, [r7, #28]
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61bb      	str	r3, [r7, #24]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	613b      	str	r3, [r7, #16]
	if (Copy_u8Number==LCD_u8_Zero)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d103      	bne.n	8000e42 <HLCD_voidSendNumber+0x26>
	{
		HLCD_voidSendChar('0');
 8000e3a:	2030      	movs	r0, #48	; 0x30
 8000e3c:	f7ff ff50 	bl	8000ce0 <HLCD_voidSendChar>
			HLCD_voidSendChar('0');
			Local_Counter--;
		}
	}

}
 8000e40:	e060      	b.n	8000f04 <HLCD_voidSendNumber+0xe8>
		for(Local_Counter=-1;LCD_u8_Zero==Local_TMP;Local_Counter++)
 8000e42:	f04f 33ff 	mov.w	r3, #4294967295
 8000e46:	617b      	str	r3, [r7, #20]
 8000e48:	e013      	b.n	8000e72 <HLCD_voidSendNumber+0x56>
			Local_TMP=Local_TMPNum %LCD_u8_GET_ANOTHER_DIGIT;
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4b2f      	ldr	r3, [pc, #188]	; (8000f0c <HLCD_voidSendNumber+0xf0>)
 8000e4e:	fba3 1302 	umull	r1, r3, r3, r2
 8000e52:	08d9      	lsrs	r1, r3, #3
 8000e54:	460b      	mov	r3, r1
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	440b      	add	r3, r1
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	61bb      	str	r3, [r7, #24]
			Local_TMPNum=Local_TMPNum / LCD_u8_GET_ANOTHER_DIGIT;
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	4a2a      	ldr	r2, [pc, #168]	; (8000f0c <HLCD_voidSendNumber+0xf0>)
 8000e64:	fba2 2303 	umull	r2, r3, r2, r3
 8000e68:	08db      	lsrs	r3, r3, #3
 8000e6a:	613b      	str	r3, [r7, #16]
		for(Local_Counter=-1;LCD_u8_Zero==Local_TMP;Local_Counter++)
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	617b      	str	r3, [r7, #20]
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d0e8      	beq.n	8000e4a <HLCD_voidSendNumber+0x2e>
		while(Copy_u8Number!=LCD_u8_Zero)
 8000e78:	e019      	b.n	8000eae <HLCD_voidSendNumber+0x92>
			Local_remainder=Copy_u8Number %LCD_u8_GET_ANOTHER_DIGIT;
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	4b23      	ldr	r3, [pc, #140]	; (8000f0c <HLCD_voidSendNumber+0xf0>)
 8000e7e:	fba3 1302 	umull	r1, r3, r3, r2
 8000e82:	08d9      	lsrs	r1, r3, #3
 8000e84:	460b      	mov	r3, r1
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	440b      	add	r3, r1
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	60fb      	str	r3, [r7, #12]
			Local_reverse=Local_reverse*LCD_u8_GET_ANOTHER_DIGIT+Local_remainder;
 8000e90:	69fa      	ldr	r2, [r7, #28]
 8000e92:	4613      	mov	r3, r2
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	4413      	add	r3, r2
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	61fb      	str	r3, [r7, #28]
			Copy_u8Number=Copy_u8Number / LCD_u8_GET_ANOTHER_DIGIT;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a19      	ldr	r2, [pc, #100]	; (8000f0c <HLCD_voidSendNumber+0xf0>)
 8000ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eaa:	08db      	lsrs	r3, r3, #3
 8000eac:	607b      	str	r3, [r7, #4]
		while(Copy_u8Number!=LCD_u8_Zero)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d1e2      	bne.n	8000e7a <HLCD_voidSendNumber+0x5e>
		Local_TMP=0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61bb      	str	r3, [r7, #24]
		while (Local_reverse!=LCD_u8_Zero)
 8000eb8:	e017      	b.n	8000eea <HLCD_voidSendNumber+0xce>
			Local_TMP=Local_reverse%LCD_u8_GET_ANOTHER_DIGIT;
 8000eba:	69fa      	ldr	r2, [r7, #28]
 8000ebc:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <HLCD_voidSendNumber+0xf0>)
 8000ebe:	fba3 1302 	umull	r1, r3, r3, r2
 8000ec2:	08d9      	lsrs	r1, r3, #3
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	440b      	add	r3, r1
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	61bb      	str	r3, [r7, #24]
			HLCD_voidSendChar(Local_TMP+'0');
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	3330      	adds	r3, #48	; 0x30
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff ff01 	bl	8000ce0 <HLCD_voidSendChar>
			Local_reverse=Local_reverse / LCD_u8_GET_ANOTHER_DIGIT;
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <HLCD_voidSendNumber+0xf0>)
 8000ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee6:	08db      	lsrs	r3, r3, #3
 8000ee8:	61fb      	str	r3, [r7, #28]
		while (Local_reverse!=LCD_u8_Zero)
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d1e4      	bne.n	8000eba <HLCD_voidSendNumber+0x9e>
		while(0 != Local_Counter)
 8000ef0:	e005      	b.n	8000efe <HLCD_voidSendNumber+0xe2>
			HLCD_voidSendChar('0');
 8000ef2:	2030      	movs	r0, #48	; 0x30
 8000ef4:	f7ff fef4 	bl	8000ce0 <HLCD_voidSendChar>
			Local_Counter--;
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	3b01      	subs	r3, #1
 8000efc:	617b      	str	r3, [r7, #20]
		while(0 != Local_Counter)
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d1f6      	bne.n	8000ef2 <HLCD_voidSendNumber+0xd6>
}
 8000f04:	bf00      	nop
 8000f06:	3720      	adds	r7, #32
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	cccccccd 	.word	0xcccccccd

08000f10 <HLCD_voidSetCursor>:

void HLCD_voidSetCursor           ( LCDlocation Copy_Location      , LCDLineNum  Copy_LineNum  )
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	460a      	mov	r2, r1
 8000f1a:	71fb      	strb	r3, [r7, #7]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	71bb      	strb	r3, [r7, #6]
    switch (Copy_LineNum)
 8000f20:	79bb      	ldrb	r3, [r7, #6]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d002      	beq.n	8000f2c <HLCD_voidSetCursor+0x1c>
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d007      	beq.n	8000f3a <HLCD_voidSetCursor+0x2a>
    {
          case LCD_LINE0 : HLCD_voidSendCmnd((0x80+Copy_Location)); break;
          case LCD_LINE1 : HLCD_voidSendCmnd((0xC0+Copy_Location)); break;
    }
}
 8000f2a:	e00d      	b.n	8000f48 <HLCD_voidSetCursor+0x38>
          case LCD_LINE0 : HLCD_voidSendCmnd((0x80+Copy_Location)); break;
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	3b80      	subs	r3, #128	; 0x80
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff fe53 	bl	8000bde <HLCD_voidSendCmnd>
 8000f38:	e006      	b.n	8000f48 <HLCD_voidSetCursor+0x38>
          case LCD_LINE1 : HLCD_voidSendCmnd((0xC0+Copy_Location)); break;
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	3b40      	subs	r3, #64	; 0x40
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff fe4c 	bl	8000bde <HLCD_voidSendCmnd>
 8000f46:	bf00      	nop
}
 8000f48:	bf00      	nop
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <MRCC_u8SetClockState>:
 *
 *
 ******************************************************************************
 */
uint8_t   MRCC_u8SetClockState		(  ClockType_t       Copy_ClockType , ClockState_t Copy_ClockState )
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	460a      	mov	r2, r1
 8000f5a:	71fb      	strb	r3, [r7, #7]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	71bb      	strb	r3, [r7, #6]
          uint8_t Local_u8ErrorState = ERROR_STATE_OK;
 8000f60:	2301      	movs	r3, #1
 8000f62:	73fb      	strb	r3, [r7, #15]
          if ( Copy_ClockType <= PLL  &&  Copy_ClockState <= ENABLE )
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d87b      	bhi.n	8001062 <MRCC_u8SetClockState+0x112>
 8000f6a:	79bb      	ldrb	r3, [r7, #6]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d878      	bhi.n	8001062 <MRCC_u8SetClockState+0x112>
          {
    		  uint32_t Local_u32TimeOut = 0 ;
 8000f70:	2300      	movs	r3, #0
 8000f72:	60bb      	str	r3, [r7, #8]
              switch ( Copy_ClockType )
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d048      	beq.n	800100c <MRCC_u8SetClockState+0xbc>
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	dc68      	bgt.n	8001050 <MRCC_u8SetClockState+0x100>
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d002      	beq.n	8000f88 <MRCC_u8SetClockState+0x38>
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d020      	beq.n	8000fc8 <MRCC_u8SetClockState+0x78>
 8000f86:	e063      	b.n	8001050 <MRCC_u8SetClockState+0x100>
              {
              	  	  case HSI :  RCC->CR &=~( RCC_CLOCK_STATE_MASK<<(RCC_CR_HSION));
 8000f88:	4b3a      	ldr	r3, [pc, #232]	; (8001074 <MRCC_u8SetClockState+0x124>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a39      	ldr	r2, [pc, #228]	; (8001074 <MRCC_u8SetClockState+0x124>)
 8000f8e:	f023 0301 	bic.w	r3, r3, #1
 8000f92:	6013      	str	r3, [r2, #0]
  	  	  	  	  	  	  	  	  RCC->CR |= (Copy_ClockState<<(RCC_CR_HSION));
 8000f94:	4b37      	ldr	r3, [pc, #220]	; (8001074 <MRCC_u8SetClockState+0x124>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	79bb      	ldrb	r3, [r7, #6]
 8000f9a:	4936      	ldr	r1, [pc, #216]	; (8001074 <MRCC_u8SetClockState+0x124>)
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	600b      	str	r3, [r1, #0]
  	  	  	  	  	  	  	  	  while( (  RCC_CLK_NOT_RDY == (RCC->CR >> RCC_CR_HSIRDY) & 0x1 ) && ( Local_u32TimeOut < RCC_TIME_OUT ) )
 8000fa0:	e002      	b.n	8000fa8 <MRCC_u8SetClockState+0x58>
  	  	  	  	  	  	  	  	  {
  	  	  	  	  	  	  	  		  Local_u32TimeOut++;
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	60bb      	str	r3, [r7, #8]
  	  	  	  	  	  	  	  	  while( (  RCC_CLK_NOT_RDY == (RCC->CR >> RCC_CR_HSIRDY) & 0x1 ) && ( Local_u32TimeOut < RCC_TIME_OUT ) )
 8000fa8:	4b32      	ldr	r3, [pc, #200]	; (8001074 <MRCC_u8SetClockState+0x124>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	085b      	lsrs	r3, r3, #1
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d103      	bne.n	8000fba <MRCC_u8SetClockState+0x6a>
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	4a30      	ldr	r2, [pc, #192]	; (8001078 <MRCC_u8SetClockState+0x128>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d9f3      	bls.n	8000fa2 <MRCC_u8SetClockState+0x52>
  	  	  	  	  	  	  	  	  }
  	  	  	  	  	  	  	  	  if( Local_u32TimeOut >= RCC_TIME_OUT )
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	4a2e      	ldr	r2, [pc, #184]	; (8001078 <MRCC_u8SetClockState+0x128>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d949      	bls.n	8001056 <MRCC_u8SetClockState+0x106>
  	  	  	  	  	  	  	  	  {
  	  	  	  	  	  	  	  		  Local_u8ErrorState = ERROR_STATE_NOK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	73fb      	strb	r3, [r7, #15]
  	  	  	  	  	  	  	  	  }
  	  	  	  	  	  	  	  	  break;
 8000fc6:	e046      	b.n	8001056 <MRCC_u8SetClockState+0x106>

              	  	  case HSE :  RCC->CR &=~( RCC_CLOCK_STATE_MASK<<(RCC_CR_HSEON));
 8000fc8:	4b2a      	ldr	r3, [pc, #168]	; (8001074 <MRCC_u8SetClockState+0x124>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a29      	ldr	r2, [pc, #164]	; (8001074 <MRCC_u8SetClockState+0x124>)
 8000fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fd2:	6013      	str	r3, [r2, #0]
              	  	  	  	  	  RCC->CR |= (Copy_ClockState<<(RCC_CR_HSEON));
 8000fd4:	4b27      	ldr	r3, [pc, #156]	; (8001074 <MRCC_u8SetClockState+0x124>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	79ba      	ldrb	r2, [r7, #6]
 8000fda:	0412      	lsls	r2, r2, #16
 8000fdc:	4611      	mov	r1, r2
 8000fde:	4a25      	ldr	r2, [pc, #148]	; (8001074 <MRCC_u8SetClockState+0x124>)
 8000fe0:	430b      	orrs	r3, r1
 8000fe2:	6013      	str	r3, [r2, #0]
              	  	  	  	  	  while( (  RCC_CLK_NOT_RDY == (RCC->CR >> RCC_CR_HSERD) & 0x1 ) && ( Local_u32TimeOut < RCC_TIME_OUT ) )
 8000fe4:	e002      	b.n	8000fec <MRCC_u8SetClockState+0x9c>
              	  	  	  	  	  {
              	  	  	  	  		  	 Local_u32TimeOut++;
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	60bb      	str	r3, [r7, #8]
              	  	  	  	  	  while( (  RCC_CLK_NOT_RDY == (RCC->CR >> RCC_CR_HSERD) & 0x1 ) && ( Local_u32TimeOut < RCC_TIME_OUT ) )
 8000fec:	4b21      	ldr	r3, [pc, #132]	; (8001074 <MRCC_u8SetClockState+0x124>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	0c5b      	lsrs	r3, r3, #17
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d103      	bne.n	8000ffe <MRCC_u8SetClockState+0xae>
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	4a1f      	ldr	r2, [pc, #124]	; (8001078 <MRCC_u8SetClockState+0x128>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d9f3      	bls.n	8000fe6 <MRCC_u8SetClockState+0x96>
              	  	  	  	  	  }
              	  	  	  	  	  if( Local_u32TimeOut >= RCC_TIME_OUT )
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	4a1d      	ldr	r2, [pc, #116]	; (8001078 <MRCC_u8SetClockState+0x128>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d929      	bls.n	800105a <MRCC_u8SetClockState+0x10a>
              	  	  	  	  	  {
              	  	  	  	  		  	 Local_u8ErrorState = ERROR_STATE_NOK;
 8001006:	2300      	movs	r3, #0
 8001008:	73fb      	strb	r3, [r7, #15]
              	  	  	  	  	  }
              	  	  	  	  	  break;
 800100a:	e026      	b.n	800105a <MRCC_u8SetClockState+0x10a>

              	  	  case PLL :  RCC->CR &=~( RCC_CLOCK_STATE_MASK<<(RCC_CR_PLLON));
 800100c:	4b19      	ldr	r3, [pc, #100]	; (8001074 <MRCC_u8SetClockState+0x124>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a18      	ldr	r2, [pc, #96]	; (8001074 <MRCC_u8SetClockState+0x124>)
 8001012:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001016:	6013      	str	r3, [r2, #0]
              	  	  	  	  	  RCC->CR |= (Copy_ClockState<<(RCC_CR_PLLON));
 8001018:	4b16      	ldr	r3, [pc, #88]	; (8001074 <MRCC_u8SetClockState+0x124>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	79ba      	ldrb	r2, [r7, #6]
 800101e:	0612      	lsls	r2, r2, #24
 8001020:	4611      	mov	r1, r2
 8001022:	4a14      	ldr	r2, [pc, #80]	; (8001074 <MRCC_u8SetClockState+0x124>)
 8001024:	430b      	orrs	r3, r1
 8001026:	6013      	str	r3, [r2, #0]
              	  	  	  	  	  while( (  RCC_CLK_NOT_RDY == (RCC->CR >> RCC_CR_PLLRDY) & 0x1 ) && ( Local_u32TimeOut < RCC_TIME_OUT ) )
 8001028:	e002      	b.n	8001030 <MRCC_u8SetClockState+0xe0>
              	  	  	  	  	  {
              	  	  	  	  		  Local_u32TimeOut++;
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	3301      	adds	r3, #1
 800102e:	60bb      	str	r3, [r7, #8]
              	  	  	  	  	  while( (  RCC_CLK_NOT_RDY == (RCC->CR >> RCC_CR_PLLRDY) & 0x1 ) && ( Local_u32TimeOut < RCC_TIME_OUT ) )
 8001030:	4b10      	ldr	r3, [pc, #64]	; (8001074 <MRCC_u8SetClockState+0x124>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	0e5b      	lsrs	r3, r3, #25
 8001036:	2b00      	cmp	r3, #0
 8001038:	d103      	bne.n	8001042 <MRCC_u8SetClockState+0xf2>
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	4a0e      	ldr	r2, [pc, #56]	; (8001078 <MRCC_u8SetClockState+0x128>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d9f3      	bls.n	800102a <MRCC_u8SetClockState+0xda>
              	  	  	  	  	  }
              	  	  	  	  	  if( Local_u32TimeOut >= RCC_TIME_OUT )
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	4a0c      	ldr	r2, [pc, #48]	; (8001078 <MRCC_u8SetClockState+0x128>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d909      	bls.n	800105e <MRCC_u8SetClockState+0x10e>
              	  	  	  	  	  {
              	  	  	  	  		  Local_u8ErrorState = ERROR_STATE_NOK;
 800104a:	2300      	movs	r3, #0
 800104c:	73fb      	strb	r3, [r7, #15]
              	  	  	  	  	  }
              	  	  	  	  	  break;
 800104e:	e006      	b.n	800105e <MRCC_u8SetClockState+0x10e>
              	  	  default  :  Local_u8ErrorState = ERROR_STATE_NOK;
 8001050:	2300      	movs	r3, #0
 8001052:	73fb      	strb	r3, [r7, #15]
              	  	  	  	  	  break;
 8001054:	e004      	b.n	8001060 <MRCC_u8SetClockState+0x110>
  	  	  	  	  	  	  	  	  break;
 8001056:	bf00      	nop
 8001058:	e005      	b.n	8001066 <MRCC_u8SetClockState+0x116>
              	  	  	  	  	  break;
 800105a:	bf00      	nop
 800105c:	e003      	b.n	8001066 <MRCC_u8SetClockState+0x116>
              	  	  	  	  	  break;
 800105e:	bf00      	nop
          {
 8001060:	e001      	b.n	8001066 <MRCC_u8SetClockState+0x116>
              }
          }
          else
          {
          	Local_u8ErrorState = ERROR_STATE_NOK;
 8001062:	2300      	movs	r3, #0
 8001064:	73fb      	strb	r3, [r7, #15]
          }
          return Local_u8ErrorState;
 8001066:	7bfb      	ldrb	r3, [r7, #15]
}
 8001068:	4618      	mov	r0, r3
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	bc80      	pop	{r7}
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	40021000 	.word	0x40021000
 8001078:	0001869f 	.word	0x0001869f

0800107c <MRCC_u8SetSystemClock>:
 *
 *
 ******************************************************************************
 */
uint8_t   MRCC_u8SetSystemClock		(  ClockType_t       Copy_ClockType  )
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
          uint8_t Local_u8ErrorState = ERROR_STATE_OK;
 8001086:	2301      	movs	r3, #1
 8001088:	73fb      	strb	r3, [r7, #15]
          if ( Copy_ClockType <= PLL  )
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	2b02      	cmp	r3, #2
 800108e:	d80c      	bhi.n	80010aa <MRCC_u8SetSystemClock+0x2e>
          {
        	  	  RCC->CFGR &=~( RCC_SYS_CLOCK_MASK<<(RCC_CFGR_SW));
 8001090:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <MRCC_u8SetSystemClock+0x40>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	4a09      	ldr	r2, [pc, #36]	; (80010bc <MRCC_u8SetSystemClock+0x40>)
 8001096:	f023 0303 	bic.w	r3, r3, #3
 800109a:	6053      	str	r3, [r2, #4]
	  	  	  	  RCC->CFGR |= ( Copy_ClockType<<(RCC_CFGR_SW));
 800109c:	4b07      	ldr	r3, [pc, #28]	; (80010bc <MRCC_u8SetSystemClock+0x40>)
 800109e:	685a      	ldr	r2, [r3, #4]
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	4906      	ldr	r1, [pc, #24]	; (80010bc <MRCC_u8SetSystemClock+0x40>)
 80010a4:	4313      	orrs	r3, r2
 80010a6:	604b      	str	r3, [r1, #4]
 80010a8:	e001      	b.n	80010ae <MRCC_u8SetSystemClock+0x32>
          }
          else
          {
          	Local_u8ErrorState = ERROR_STATE_NOK;
 80010aa:	2300      	movs	r3, #0
 80010ac:	73fb      	strb	r3, [r7, #15]
          }
          return Local_u8ErrorState;
 80010ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	40021000 	.word	0x40021000

080010c0 <MRCC_u8PeripheralsClockState>:
 *
 *
 ******************************************************************************
 */
uint8_t   MRCC_u8PeripheralsClockState     (  BUSS_t Copy_Bus , uint8_t  Copy_PerID , ClockState_t Copy_ClockState )
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
 80010ca:	460b      	mov	r3, r1
 80010cc:	71bb      	strb	r3, [r7, #6]
 80010ce:	4613      	mov	r3, r2
 80010d0:	717b      	strb	r3, [r7, #5]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK;
 80010d2:	2301      	movs	r3, #1
 80010d4:	73fb      	strb	r3, [r7, #15]
	if ( Copy_Bus<=APB2  && Copy_PerID <= PER_DAC &&  Copy_ClockState <= ENABLE )
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d855      	bhi.n	8001188 <MRCC_u8PeripheralsClockState+0xc8>
 80010dc:	79bb      	ldrb	r3, [r7, #6]
 80010de:	2b1d      	cmp	r3, #29
 80010e0:	d852      	bhi.n	8001188 <MRCC_u8PeripheralsClockState+0xc8>
 80010e2:	797b      	ldrb	r3, [r7, #5]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d84f      	bhi.n	8001188 <MRCC_u8PeripheralsClockState+0xc8>
	{
		switch ( Copy_Bus )
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d032      	beq.n	8001154 <MRCC_u8PeripheralsClockState+0x94>
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	dc46      	bgt.n	8001180 <MRCC_u8PeripheralsClockState+0xc0>
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d002      	beq.n	80010fc <MRCC_u8PeripheralsClockState+0x3c>
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d016      	beq.n	8001128 <MRCC_u8PeripheralsClockState+0x68>
 80010fa:	e041      	b.n	8001180 <MRCC_u8PeripheralsClockState+0xc0>
		{
			case AHB :  RCC->AHBENR &=~( RCC_CLOCK_STATE_MASK<<(Copy_PerID));
 80010fc:	4b26      	ldr	r3, [pc, #152]	; (8001198 <MRCC_u8PeripheralsClockState+0xd8>)
 80010fe:	695b      	ldr	r3, [r3, #20]
 8001100:	79ba      	ldrb	r2, [r7, #6]
 8001102:	2101      	movs	r1, #1
 8001104:	fa01 f202 	lsl.w	r2, r1, r2
 8001108:	43d2      	mvns	r2, r2
 800110a:	4611      	mov	r1, r2
 800110c:	4a22      	ldr	r2, [pc, #136]	; (8001198 <MRCC_u8PeripheralsClockState+0xd8>)
 800110e:	400b      	ands	r3, r1
 8001110:	6153      	str	r3, [r2, #20]
					    RCC->AHBENR |= (Copy_ClockState)<<(Copy_PerID);
 8001112:	4b21      	ldr	r3, [pc, #132]	; (8001198 <MRCC_u8PeripheralsClockState+0xd8>)
 8001114:	695b      	ldr	r3, [r3, #20]
 8001116:	7979      	ldrb	r1, [r7, #5]
 8001118:	79ba      	ldrb	r2, [r7, #6]
 800111a:	fa01 f202 	lsl.w	r2, r1, r2
 800111e:	4611      	mov	r1, r2
 8001120:	4a1d      	ldr	r2, [pc, #116]	; (8001198 <MRCC_u8PeripheralsClockState+0xd8>)
 8001122:	430b      	orrs	r3, r1
 8001124:	6153      	str	r3, [r2, #20]
					    break;
 8001126:	e02e      	b.n	8001186 <MRCC_u8PeripheralsClockState+0xc6>
			case APB1 : RCC->APB1ENR &=~( RCC_CLOCK_STATE_MASK<<(Copy_PerID));
 8001128:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <MRCC_u8PeripheralsClockState+0xd8>)
 800112a:	69db      	ldr	r3, [r3, #28]
 800112c:	79ba      	ldrb	r2, [r7, #6]
 800112e:	2101      	movs	r1, #1
 8001130:	fa01 f202 	lsl.w	r2, r1, r2
 8001134:	43d2      	mvns	r2, r2
 8001136:	4611      	mov	r1, r2
 8001138:	4a17      	ldr	r2, [pc, #92]	; (8001198 <MRCC_u8PeripheralsClockState+0xd8>)
 800113a:	400b      	ands	r3, r1
 800113c:	61d3      	str	r3, [r2, #28]
					    RCC->APB1ENR |= (Copy_ClockState)<<(Copy_PerID);
 800113e:	4b16      	ldr	r3, [pc, #88]	; (8001198 <MRCC_u8PeripheralsClockState+0xd8>)
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	7979      	ldrb	r1, [r7, #5]
 8001144:	79ba      	ldrb	r2, [r7, #6]
 8001146:	fa01 f202 	lsl.w	r2, r1, r2
 800114a:	4611      	mov	r1, r2
 800114c:	4a12      	ldr	r2, [pc, #72]	; (8001198 <MRCC_u8PeripheralsClockState+0xd8>)
 800114e:	430b      	orrs	r3, r1
 8001150:	61d3      	str	r3, [r2, #28]
					    break;
 8001152:	e018      	b.n	8001186 <MRCC_u8PeripheralsClockState+0xc6>
			case APB2 : RCC->APB2ENR &=~( RCC_CLOCK_STATE_MASK<<(Copy_PerID));
 8001154:	4b10      	ldr	r3, [pc, #64]	; (8001198 <MRCC_u8PeripheralsClockState+0xd8>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	79ba      	ldrb	r2, [r7, #6]
 800115a:	2101      	movs	r1, #1
 800115c:	fa01 f202 	lsl.w	r2, r1, r2
 8001160:	43d2      	mvns	r2, r2
 8001162:	4611      	mov	r1, r2
 8001164:	4a0c      	ldr	r2, [pc, #48]	; (8001198 <MRCC_u8PeripheralsClockState+0xd8>)
 8001166:	400b      	ands	r3, r1
 8001168:	6193      	str	r3, [r2, #24]
					    RCC->APB2ENR |= (Copy_ClockState)<<(Copy_PerID);
 800116a:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <MRCC_u8PeripheralsClockState+0xd8>)
 800116c:	699b      	ldr	r3, [r3, #24]
 800116e:	7979      	ldrb	r1, [r7, #5]
 8001170:	79ba      	ldrb	r2, [r7, #6]
 8001172:	fa01 f202 	lsl.w	r2, r1, r2
 8001176:	4611      	mov	r1, r2
 8001178:	4a07      	ldr	r2, [pc, #28]	; (8001198 <MRCC_u8PeripheralsClockState+0xd8>)
 800117a:	430b      	orrs	r3, r1
 800117c:	6193      	str	r3, [r2, #24]
					    break;
 800117e:	e002      	b.n	8001186 <MRCC_u8PeripheralsClockState+0xc6>
			default  :  Local_u8ErrorState = ERROR_STATE_NOK;
 8001180:	2300      	movs	r3, #0
 8001182:	73fb      	strb	r3, [r7, #15]
		switch ( Copy_Bus )
 8001184:	e002      	b.n	800118c <MRCC_u8PeripheralsClockState+0xcc>
 8001186:	e001      	b.n	800118c <MRCC_u8PeripheralsClockState+0xcc>


	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK;
 8001188:	2300      	movs	r3, #0
 800118a:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState;
 800118c:	7bfb      	ldrb	r3, [r7, #15]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3714      	adds	r7, #20
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr
 8001198:	40021000 	.word	0x40021000

0800119c <SPI1_IRQHandler>:
}
/*************************************************************************************************************************************/
/********************************************************* Handlers implementations **************************************************/
/*************************************************************************************************************************************/
void SPI1_IRQHandler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
    if ( SPI_ApFunCallBack[SPI_1] != NULL )
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <SPI1_IRQHandler+0x20>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d007      	beq.n	80011b8 <SPI1_IRQHandler+0x1c>
	{
    	SPI_ApFunCallBack[SPI_1]( SPI_Index[SPI_1] -> DR );
 80011a8:	4b04      	ldr	r3, [pc, #16]	; (80011bc <SPI1_IRQHandler+0x20>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <SPI1_IRQHandler+0x24>)
 80011ae:	6812      	ldr	r2, [r2, #0]
 80011b0:	68d2      	ldr	r2, [r2, #12]
 80011b2:	b2d2      	uxtb	r2, r2
 80011b4:	4610      	mov	r0, r2
 80011b6:	4798      	blx	r3
	}
}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	200000d4 	.word	0x200000d4
 80011c0:	2000001c 	.word	0x2000001c

080011c4 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
    if ( SPI_ApFunCallBack[SPI_2] != NULL )
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <SPI2_IRQHandler+0x20>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d007      	beq.n	80011e0 <SPI2_IRQHandler+0x1c>
	{
    	SPI_ApFunCallBack[SPI_2]( SPI_Index[SPI_2] -> DR );
 80011d0:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <SPI2_IRQHandler+0x20>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <SPI2_IRQHandler+0x24>)
 80011d6:	6852      	ldr	r2, [r2, #4]
 80011d8:	68d2      	ldr	r2, [r2, #12]
 80011da:	b2d2      	uxtb	r2, r2
 80011dc:	4610      	mov	r0, r2
 80011de:	4798      	blx	r3
	}
}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	200000d4 	.word	0x200000d4
 80011e8:	2000001c 	.word	0x2000001c

080011ec <SPI3_IRQHandler>:
void SPI3_IRQHandler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
    if ( SPI_ApFunCallBack[SPI_3] != NULL )
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <SPI3_IRQHandler+0x20>)
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d007      	beq.n	8001208 <SPI3_IRQHandler+0x1c>
	{
    	SPI_ApFunCallBack[SPI_3]( SPI_Index[SPI_3] -> DR );
 80011f8:	4b04      	ldr	r3, [pc, #16]	; (800120c <SPI3_IRQHandler+0x20>)
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	4a04      	ldr	r2, [pc, #16]	; (8001210 <SPI3_IRQHandler+0x24>)
 80011fe:	6892      	ldr	r2, [r2, #8]
 8001200:	68d2      	ldr	r2, [r2, #12]
 8001202:	b2d2      	uxtb	r2, r2
 8001204:	4610      	mov	r0, r2
 8001206:	4798      	blx	r3
	}
}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}
 800120c:	200000d4 	.word	0x200000d4
 8001210:	2000001c 	.word	0x2000001c

08001214 <MSTK_u8ClockConfig>:
 *
 *
 ******************************************************************************
 */
uint8_t MSTK_u8ClockConfig              ( STKclock_t Copy_ClockType )
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8ErrorState=ERROR_STATE_OK;
 800121e:	2301      	movs	r3, #1
 8001220:	73fb      	strb	r3, [r7, #15]
	if ( Copy_ClockType <= STK_AHB )
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d80e      	bhi.n	8001246 <MSTK_u8ClockConfig+0x32>
	{
		STK->CTRL &=~(STK_CLKSOURCE_MASK << STK_CTRL_CLKSOURCE );
 8001228:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <MSTK_u8ClockConfig+0x44>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <MSTK_u8ClockConfig+0x44>)
 800122e:	f023 0304 	bic.w	r3, r3, #4
 8001232:	6013      	str	r3, [r2, #0]
		STK->CTRL |= (Copy_ClockType << STK_CTRL_CLKSOURCE );
 8001234:	4b08      	ldr	r3, [pc, #32]	; (8001258 <MSTK_u8ClockConfig+0x44>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	79fa      	ldrb	r2, [r7, #7]
 800123a:	0092      	lsls	r2, r2, #2
 800123c:	4611      	mov	r1, r2
 800123e:	4a06      	ldr	r2, [pc, #24]	; (8001258 <MSTK_u8ClockConfig+0x44>)
 8001240:	430b      	orrs	r3, r1
 8001242:	6013      	str	r3, [r2, #0]
 8001244:	e001      	b.n	800124a <MSTK_u8ClockConfig+0x36>
	}
	else
	{
		Local_u8ErrorState=ERROR_STATE_NOK;
 8001246:	2300      	movs	r3, #0
 8001248:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState ;
 800124a:	7bfb      	ldrb	r3, [r7, #15]

}
 800124c:	4618      	mov	r0, r3
 800124e:	3714      	adds	r7, #20
 8001250:	46bd      	mov	sp, r7
 8001252:	bc80      	pop	{r7}
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	e000e010 	.word	0xe000e010

0800125c <MSTK_voidStopTimer>:
 *
 *
 ******************************************************************************
 */
void   MSTK_voidStopTimer         ( void )
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
	    STK->CTRL &=~(STK_STOP_TIMER_MASK << STK_CTRL_ENABLE );
 8001260:	4b07      	ldr	r3, [pc, #28]	; (8001280 <MSTK_voidStopTimer+0x24>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a06      	ldr	r2, [pc, #24]	; (8001280 <MSTK_voidStopTimer+0x24>)
 8001266:	f023 0303 	bic.w	r3, r3, #3
 800126a:	6013      	str	r3, [r2, #0]
		STK->LOAD = STK_RESET_COUNTER;
 800126c:	4b04      	ldr	r3, [pc, #16]	; (8001280 <MSTK_voidStopTimer+0x24>)
 800126e:	2200      	movs	r2, #0
 8001270:	605a      	str	r2, [r3, #4]
		STK->VAL  = STK_RESET_COUNTER;
 8001272:	4b03      	ldr	r3, [pc, #12]	; (8001280 <MSTK_voidStopTimer+0x24>)
 8001274:	2200      	movs	r2, #0
 8001276:	609a      	str	r2, [r3, #8]
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr
 8001280:	e000e010 	.word	0xe000e010

08001284 <MSTK_u8BusyWait>:
 *
 *
 ******************************************************************************
 */
uint8_t   MSTK_u8BusyWait            ( uint32_t Copy_u32Ticks )
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	 uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 800128c:	2301      	movs	r3, #1
 800128e:	73fb      	strb	r3, [r7, #15]
	 if ( Copy_u32Ticks <= STK_MAX_TICKS)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001296:	d813      	bhi.n	80012c0 <MSTK_u8BusyWait+0x3c>
	 {
	     STK->LOAD = Copy_u32Ticks ;
 8001298:	4a0d      	ldr	r2, [pc, #52]	; (80012d0 <MSTK_u8BusyWait+0x4c>)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6053      	str	r3, [r2, #4]
	     STK->CTRL |= (STK_ENABLE_MASK << STK_CTRL_ENABLE );
 800129e:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <MSTK_u8BusyWait+0x4c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a0b      	ldr	r2, [pc, #44]	; (80012d0 <MSTK_u8BusyWait+0x4c>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	6013      	str	r3, [r2, #0]
	     while ( STK_LOW_FLAG == GET_BIT( STK->CTRL , STK_CTRL_COUNTFLAG ));
 80012aa:	bf00      	nop
 80012ac:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <MSTK_u8BusyWait+0x4c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	0c1b      	lsrs	r3, r3, #16
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d0f8      	beq.n	80012ac <MSTK_u8BusyWait+0x28>
	     MSTK_voidStopTimer();
 80012ba:	f7ff ffcf 	bl	800125c <MSTK_voidStopTimer>
 80012be:	e001      	b.n	80012c4 <MSTK_u8BusyWait+0x40>
	 }
	 else
	 {
		 Local_u8ErrorState = ERROR_STATE_NOK ;
 80012c0:	2300      	movs	r3, #0
 80012c2:	73fb      	strb	r3, [r7, #15]
	 }
	 return Local_u8ErrorState ;
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	e000e010 	.word	0xe000e010

080012d4 <SysTick_Handler>:
 *
 *
 ******************************************************************************
 */
void SysTick_Handler (void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
    if ( SysTick_CallBack != NULL)
 80012d8:	4b0c      	ldr	r3, [pc, #48]	; (800130c <SysTick_Handler+0x38>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d012      	beq.n	8001306 <SysTick_Handler+0x32>
    {
         if ( SINGLE == STK_u8IntervalType )
 80012e0:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <SysTick_Handler+0x3c>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d105      	bne.n	80012f4 <SysTick_Handler+0x20>
         {
        	 SysTick_CallBack();
 80012e8:	4b08      	ldr	r3, [pc, #32]	; (800130c <SysTick_Handler+0x38>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4798      	blx	r3
        	 MSTK_voidStopTimer();
 80012ee:	f7ff ffb5 	bl	800125c <MSTK_voidStopTimer>
 80012f2:	e006      	b.n	8001302 <SysTick_Handler+0x2e>
         }
         else if ( PERIODIC == STK_u8IntervalType )
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <SysTick_Handler+0x3c>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d102      	bne.n	8001302 <SysTick_Handler+0x2e>
         {
        	 SysTick_CallBack();
 80012fc:	4b03      	ldr	r3, [pc, #12]	; (800130c <SysTick_Handler+0x38>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4798      	blx	r3
         }
         GET_BIT( STK->CTRL , STK_CTRL_COUNTFLAG ) ;
 8001302:	4b04      	ldr	r3, [pc, #16]	; (8001314 <SysTick_Handler+0x40>)
 8001304:	681b      	ldr	r3, [r3, #0]

    }

}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	200000e0 	.word	0x200000e0
 8001310:	20000028 	.word	0x20000028
 8001314:	e000e010 	.word	0xe000e010

08001318 <STIMERS_voidDelayMS>:
 *   This Function not Depend on Any timer , This Dumb Function
 *
 ******************************************************************************
 */
void STIMERS_voidDelayMS(uint32_t Copy_u32Milliseconds)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	for(uint32_t Local_u8Counter = 0; Local_u8Counter < ( Copy_u32Milliseconds * 550) ; Local_u8Counter ++)
 8001320:	2300      	movs	r3, #0
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	e003      	b.n	800132e <STIMERS_voidDelayMS+0x16>
	{
		asm("NOP");
 8001326:	bf00      	nop
	for(uint32_t Local_u8Counter = 0; Local_u8Counter < ( Copy_u32Milliseconds * 550) ; Local_u8Counter ++)
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	3301      	adds	r3, #1
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f240 2226 	movw	r2, #550	; 0x226
 8001334:	fb02 f303 	mul.w	r3, r2, r3
 8001338:	68fa      	ldr	r2, [r7, #12]
 800133a:	429a      	cmp	r2, r3
 800133c:	d3f3      	bcc.n	8001326 <STIMERS_voidDelayMS+0xe>
	}
}
 800133e:	bf00      	nop
 8001340:	bf00      	nop
 8001342:	3714      	adds	r7, #20
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr
	...

0800134c <MUSART_u8SetConfiguration>:
 *
 *
 ******************************************************************************
 */
uint8_t MUSART_u8SetConfiguration ( const USARTconfig_t* USARTconfig )
{
 800134c:	b5b0      	push	{r4, r5, r7, lr}
 800134e:	b088      	sub	sp, #32
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK;
 8001354:	2301      	movs	r3, #1
 8001356:	77fb      	strb	r3, [r7, #31]
	if (  USARTconfig !=NULL )
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	f000 81e1 	beq.w	8001722 <MUSART_u8SetConfiguration+0x3d6>
	{
		/*************************************************************************************************************************************/
		/********************************************** Clear Flags ********************************************************************/
		MUSART_voidClearFlags(USARTconfig->USARTindex) ;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	4618      	mov	r0, r3
 8001366:	f000 fadf 	bl	8001928 <MUSART_voidClearFlags>
		/********************************************** Configuration ******************************************************************/
		USART_Index[USARTconfig->USARTindex] -> CR1 &=~ (USART_RE_MASK << (USART_CR1_RE));
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	461a      	mov	r2, r3
 8001370:	4ba7      	ldr	r3, [pc, #668]	; (8001610 <MUSART_u8SetConfiguration+0x2c4>)
 8001372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001376:	68da      	ldr	r2, [r3, #12]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	4619      	mov	r1, r3
 800137e:	4ba4      	ldr	r3, [pc, #656]	; (8001610 <MUSART_u8SetConfiguration+0x2c4>)
 8001380:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001384:	f022 0204 	bic.w	r2, r2, #4
 8001388:	60da      	str	r2, [r3, #12]
		USART_Index[USARTconfig->USARTindex] -> CR1 |=  (USARTconfig->Receiver << (USART_CR1_RE));
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	461a      	mov	r2, r3
 8001390:	4b9f      	ldr	r3, [pc, #636]	; (8001610 <MUSART_u8SetConfiguration+0x2c4>)
 8001392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001396:	68da      	ldr	r2, [r3, #12]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	785b      	ldrb	r3, [r3, #1]
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	4619      	mov	r1, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	4618      	mov	r0, r3
 80013a6:	4b9a      	ldr	r3, [pc, #616]	; (8001610 <MUSART_u8SetConfiguration+0x2c4>)
 80013a8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80013ac:	430a      	orrs	r2, r1
 80013ae:	60da      	str	r2, [r3, #12]

		USART_Index[USARTconfig->USARTindex] -> CR1 &=~ (USART_TE_MASK << (USART_CR1_TE));
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	461a      	mov	r2, r3
 80013b6:	4b96      	ldr	r3, [pc, #600]	; (8001610 <MUSART_u8SetConfiguration+0x2c4>)
 80013b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013bc:	68da      	ldr	r2, [r3, #12]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	4619      	mov	r1, r3
 80013c4:	4b92      	ldr	r3, [pc, #584]	; (8001610 <MUSART_u8SetConfiguration+0x2c4>)
 80013c6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80013ca:	f022 0208 	bic.w	r2, r2, #8
 80013ce:	60da      	str	r2, [r3, #12]
		USART_Index[USARTconfig->USARTindex] -> CR1 |=  (USARTconfig->Transmitter << (USART_CR1_TE));
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	461a      	mov	r2, r3
 80013d6:	4b8e      	ldr	r3, [pc, #568]	; (8001610 <MUSART_u8SetConfiguration+0x2c4>)
 80013d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013dc:	68da      	ldr	r2, [r3, #12]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	789b      	ldrb	r3, [r3, #2]
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	4619      	mov	r1, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	4b88      	ldr	r3, [pc, #544]	; (8001610 <MUSART_u8SetConfiguration+0x2c4>)
 80013ee:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80013f2:	430a      	orrs	r2, r1
 80013f4:	60da      	str	r2, [r3, #12]

		USART_Index[USARTconfig->USARTindex] -> CR1 &=~ (USART_RXNEIE_MASK << (USART_CR1_RXNEIE));
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	461a      	mov	r2, r3
 80013fc:	4b84      	ldr	r3, [pc, #528]	; (8001610 <MUSART_u8SetConfiguration+0x2c4>)
 80013fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001402:	68da      	ldr	r2, [r3, #12]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	4619      	mov	r1, r3
 800140a:	4b81      	ldr	r3, [pc, #516]	; (8001610 <MUSART_u8SetConfiguration+0x2c4>)
 800140c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001410:	f022 0220 	bic.w	r2, r2, #32
 8001414:	60da      	str	r2, [r3, #12]
		USART_Index[USARTconfig->USARTindex] -> CR1 |=  (USARTconfig->RXNEinterrupt << (USART_CR1_RXNEIE));
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	461a      	mov	r2, r3
 800141c:	4b7c      	ldr	r3, [pc, #496]	; (8001610 <MUSART_u8SetConfiguration+0x2c4>)
 800141e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001422:	68da      	ldr	r2, [r3, #12]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	78db      	ldrb	r3, [r3, #3]
 8001428:	015b      	lsls	r3, r3, #5
 800142a:	4619      	mov	r1, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	4618      	mov	r0, r3
 8001432:	4b77      	ldr	r3, [pc, #476]	; (8001610 <MUSART_u8SetConfiguration+0x2c4>)
 8001434:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001438:	430a      	orrs	r2, r1
 800143a:	60da      	str	r2, [r3, #12]

		USART_Index[USARTconfig->USARTindex] -> CR1 &=~ (USART_TCIE_MASK << (USART_CR1_TCIE));
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	461a      	mov	r2, r3
 8001442:	4b73      	ldr	r3, [pc, #460]	; (8001610 <MUSART_u8SetConfiguration+0x2c4>)
 8001444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001448:	68da      	ldr	r2, [r3, #12]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	4619      	mov	r1, r3
 8001450:	4b6f      	ldr	r3, [pc, #444]	; (8001610 <MUSART_u8SetConfiguration+0x2c4>)
 8001452:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001456:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800145a:	60da      	str	r2, [r3, #12]
		USART_Index[USARTconfig->USARTindex] -> CR1 |=  (USARTconfig->TransmetCompleteInterrupt << (USART_CR1_TCIE));
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	461a      	mov	r2, r3
 8001462:	4b6b      	ldr	r3, [pc, #428]	; (8001610 <MUSART_u8SetConfiguration+0x2c4>)
 8001464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001468:	68da      	ldr	r2, [r3, #12]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	791b      	ldrb	r3, [r3, #4]
 800146e:	019b      	lsls	r3, r3, #6
 8001470:	4619      	mov	r1, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	4618      	mov	r0, r3
 8001478:	4b65      	ldr	r3, [pc, #404]	; (8001610 <MUSART_u8SetConfiguration+0x2c4>)
 800147a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800147e:	430a      	orrs	r2, r1
 8001480:	60da      	str	r2, [r3, #12]

		USART_Index[USARTconfig->USARTindex] -> CR1 &=~ (USART_TXEIE_MASK << (USART_CR1_TXEIE));
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	461a      	mov	r2, r3
 8001488:	4b61      	ldr	r3, [pc, #388]	; (8001610 <MUSART_u8SetConfiguration+0x2c4>)
 800148a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800148e:	68da      	ldr	r2, [r3, #12]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	4619      	mov	r1, r3
 8001496:	4b5e      	ldr	r3, [pc, #376]	; (8001610 <MUSART_u8SetConfiguration+0x2c4>)
 8001498:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800149c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014a0:	60da      	str	r2, [r3, #12]
		USART_Index[USARTconfig->USARTindex] -> CR1 |=  (USARTconfig->TXEinterrupt << (USART_CR1_TXEIE));
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	461a      	mov	r2, r3
 80014a8:	4b59      	ldr	r3, [pc, #356]	; (8001610 <MUSART_u8SetConfiguration+0x2c4>)
 80014aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014ae:	68da      	ldr	r2, [r3, #12]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	795b      	ldrb	r3, [r3, #5]
 80014b4:	01db      	lsls	r3, r3, #7
 80014b6:	4619      	mov	r1, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	4b54      	ldr	r3, [pc, #336]	; (8001610 <MUSART_u8SetConfiguration+0x2c4>)
 80014c0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80014c4:	430a      	orrs	r2, r1
 80014c6:	60da      	str	r2, [r3, #12]

		USART_Index[USARTconfig->USARTindex] -> CR1 &=~ (USART_PS_MASK << (USART_CR1_PS));
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	461a      	mov	r2, r3
 80014ce:	4b50      	ldr	r3, [pc, #320]	; (8001610 <MUSART_u8SetConfiguration+0x2c4>)
 80014d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014d4:	68da      	ldr	r2, [r3, #12]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	4619      	mov	r1, r3
 80014dc:	4b4c      	ldr	r3, [pc, #304]	; (8001610 <MUSART_u8SetConfiguration+0x2c4>)
 80014de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80014e2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80014e6:	60da      	str	r2, [r3, #12]
		USART_Index[USARTconfig->USARTindex] -> CR1 |=  (USARTconfig->ParitySelection << (USART_CR1_PS));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	461a      	mov	r2, r3
 80014ee:	4b48      	ldr	r3, [pc, #288]	; (8001610 <MUSART_u8SetConfiguration+0x2c4>)
 80014f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014f4:	68da      	ldr	r2, [r3, #12]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	799b      	ldrb	r3, [r3, #6]
 80014fa:	025b      	lsls	r3, r3, #9
 80014fc:	4619      	mov	r1, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	4b42      	ldr	r3, [pc, #264]	; (8001610 <MUSART_u8SetConfiguration+0x2c4>)
 8001506:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800150a:	430a      	orrs	r2, r1
 800150c:	60da      	str	r2, [r3, #12]

		USART_Index[USARTconfig->USARTindex] -> CR1 &=~ (USART_PCE_MASK << (USART_CR1_PCE));
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	461a      	mov	r2, r3
 8001514:	4b3e      	ldr	r3, [pc, #248]	; (8001610 <MUSART_u8SetConfiguration+0x2c4>)
 8001516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800151a:	68da      	ldr	r2, [r3, #12]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	4619      	mov	r1, r3
 8001522:	4b3b      	ldr	r3, [pc, #236]	; (8001610 <MUSART_u8SetConfiguration+0x2c4>)
 8001524:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001528:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800152c:	60da      	str	r2, [r3, #12]
		USART_Index[USARTconfig->USARTindex] -> CR1 |=  (USARTconfig->ParityControl << (USART_CR1_PCE));
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	461a      	mov	r2, r3
 8001534:	4b36      	ldr	r3, [pc, #216]	; (8001610 <MUSART_u8SetConfiguration+0x2c4>)
 8001536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800153a:	68da      	ldr	r2, [r3, #12]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	79db      	ldrb	r3, [r3, #7]
 8001540:	029b      	lsls	r3, r3, #10
 8001542:	4619      	mov	r1, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	4618      	mov	r0, r3
 800154a:	4b31      	ldr	r3, [pc, #196]	; (8001610 <MUSART_u8SetConfiguration+0x2c4>)
 800154c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001550:	430a      	orrs	r2, r1
 8001552:	60da      	str	r2, [r3, #12]


		USART_Index[USARTconfig->USARTindex] -> CR1 &=~ (USART_M_MASK << (USART_CR1_M));
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	461a      	mov	r2, r3
 800155a:	4b2d      	ldr	r3, [pc, #180]	; (8001610 <MUSART_u8SetConfiguration+0x2c4>)
 800155c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001560:	68da      	ldr	r2, [r3, #12]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	4619      	mov	r1, r3
 8001568:	4b29      	ldr	r3, [pc, #164]	; (8001610 <MUSART_u8SetConfiguration+0x2c4>)
 800156a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800156e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001572:	60da      	str	r2, [r3, #12]
		USART_Index[USARTconfig->USARTindex] -> CR1 |=  (USARTconfig->WordLength << (USART_CR1_M));
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	461a      	mov	r2, r3
 800157a:	4b25      	ldr	r3, [pc, #148]	; (8001610 <MUSART_u8SetConfiguration+0x2c4>)
 800157c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001580:	68da      	ldr	r2, [r3, #12]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	7a1b      	ldrb	r3, [r3, #8]
 8001586:	031b      	lsls	r3, r3, #12
 8001588:	4619      	mov	r1, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	4b1f      	ldr	r3, [pc, #124]	; (8001610 <MUSART_u8SetConfiguration+0x2c4>)
 8001592:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001596:	430a      	orrs	r2, r1
 8001598:	60da      	str	r2, [r3, #12]

		USART_Index[USARTconfig->USARTindex] -> CR2 &=~ (USART_STOP_MASK << (USART_CR2_STOP));
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	461a      	mov	r2, r3
 80015a0:	4b1b      	ldr	r3, [pc, #108]	; (8001610 <MUSART_u8SetConfiguration+0x2c4>)
 80015a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015a6:	691a      	ldr	r2, [r3, #16]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	4619      	mov	r1, r3
 80015ae:	4b18      	ldr	r3, [pc, #96]	; (8001610 <MUSART_u8SetConfiguration+0x2c4>)
 80015b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80015b4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80015b8:	611a      	str	r2, [r3, #16]
		USART_Index[USARTconfig->USARTindex] -> CR2 |=  (USARTconfig->StopBit_t << (USART_CR2_STOP));
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	461a      	mov	r2, r3
 80015c0:	4b13      	ldr	r3, [pc, #76]	; (8001610 <MUSART_u8SetConfiguration+0x2c4>)
 80015c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015c6:	691a      	ldr	r2, [r3, #16]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	7a5b      	ldrb	r3, [r3, #9]
 80015cc:	031b      	lsls	r3, r3, #12
 80015ce:	4619      	mov	r1, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	4618      	mov	r0, r3
 80015d6:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <MUSART_u8SetConfiguration+0x2c4>)
 80015d8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80015dc:	430a      	orrs	r2, r1
 80015de:	611a      	str	r2, [r3, #16]

		USART_Index[USARTconfig->USARTindex] -> CR3 &=~ (USART_EIE_MASK << (USART_CR3_EIE));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	461a      	mov	r2, r3
 80015e6:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <MUSART_u8SetConfiguration+0x2c4>)
 80015e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015ec:	695a      	ldr	r2, [r3, #20]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	4619      	mov	r1, r3
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <MUSART_u8SetConfiguration+0x2c4>)
 80015f6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80015fa:	f022 0201 	bic.w	r2, r2, #1
 80015fe:	615a      	str	r2, [r3, #20]
		USART_Index[USARTconfig->USARTindex] -> CR3 |=  (USARTconfig->ErrorTnterrupt << (USART_CR3_EIE));
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	461a      	mov	r2, r3
 8001606:	4b02      	ldr	r3, [pc, #8]	; (8001610 <MUSART_u8SetConfiguration+0x2c4>)
 8001608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800160c:	695a      	ldr	r2, [r3, #20]
 800160e:	e001      	b.n	8001614 <MUSART_u8SetConfiguration+0x2c8>
 8001610:	2000002c 	.word	0x2000002c
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	7a9b      	ldrb	r3, [r3, #10]
 8001618:	4619      	mov	r1, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	4b43      	ldr	r3, [pc, #268]	; (8001730 <MUSART_u8SetConfiguration+0x3e4>)
 8001622:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001626:	430a      	orrs	r2, r1
 8001628:	615a      	str	r2, [r3, #20]

		USART_Index[USARTconfig->USARTindex] -> CR3 &=~ (USART_DMAR_MASK << (USART_CR3_DMAR));
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	461a      	mov	r2, r3
 8001630:	4b3f      	ldr	r3, [pc, #252]	; (8001730 <MUSART_u8SetConfiguration+0x3e4>)
 8001632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001636:	695a      	ldr	r2, [r3, #20]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	4619      	mov	r1, r3
 800163e:	4b3c      	ldr	r3, [pc, #240]	; (8001730 <MUSART_u8SetConfiguration+0x3e4>)
 8001640:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001644:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001648:	615a      	str	r2, [r3, #20]
		USART_Index[USARTconfig->USARTindex] -> CR3 |=  (USARTconfig->DMAresevier << (USART_CR3_DMAR));
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	461a      	mov	r2, r3
 8001650:	4b37      	ldr	r3, [pc, #220]	; (8001730 <MUSART_u8SetConfiguration+0x3e4>)
 8001652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001656:	695a      	ldr	r2, [r3, #20]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	7adb      	ldrb	r3, [r3, #11]
 800165c:	019b      	lsls	r3, r3, #6
 800165e:	4619      	mov	r1, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	4b32      	ldr	r3, [pc, #200]	; (8001730 <MUSART_u8SetConfiguration+0x3e4>)
 8001668:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800166c:	430a      	orrs	r2, r1
 800166e:	615a      	str	r2, [r3, #20]

		USART_Index[USARTconfig->USARTindex] -> CR3 &=~ (USART_DMAT_MASK << (USART_CR3_DMAT));
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	461a      	mov	r2, r3
 8001676:	4b2e      	ldr	r3, [pc, #184]	; (8001730 <MUSART_u8SetConfiguration+0x3e4>)
 8001678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800167c:	695a      	ldr	r2, [r3, #20]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	4619      	mov	r1, r3
 8001684:	4b2a      	ldr	r3, [pc, #168]	; (8001730 <MUSART_u8SetConfiguration+0x3e4>)
 8001686:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800168a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800168e:	615a      	str	r2, [r3, #20]
		USART_Index[USARTconfig->USARTindex] -> CR3 |=  (USARTconfig->DMAtransmitter << (USART_CR3_DMAT));
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	461a      	mov	r2, r3
 8001696:	4b26      	ldr	r3, [pc, #152]	; (8001730 <MUSART_u8SetConfiguration+0x3e4>)
 8001698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800169c:	695a      	ldr	r2, [r3, #20]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	7b1b      	ldrb	r3, [r3, #12]
 80016a2:	01db      	lsls	r3, r3, #7
 80016a4:	4619      	mov	r1, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	4b20      	ldr	r3, [pc, #128]	; (8001730 <MUSART_u8SetConfiguration+0x3e4>)
 80016ae:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80016b2:	430a      	orrs	r2, r1
 80016b4:	615a      	str	r2, [r3, #20]
		/********************************************** Baud Rate ************************************************************************/
		uint64_t Local_u64Mantissa = ( F_COLCK ) / ( USART_OVER_SAMPLING * USART1_BAUD_RATE ) ;
 80016b6:	f04f 0234 	mov.w	r2, #52	; 0x34
 80016ba:	f04f 0300 	mov.w	r3, #0
 80016be:	e9c7 2304 	strd	r2, r3, [r7, #16]
		uint64_t Local_u64Fraction = ( ( ( F_COLCK * 100 ) / ( USART_OVER_SAMPLING * USART1_BAUD_RATE )  ) % 100 ) * USART_OVER_SAMPLING ;
 80016c2:	f04f 0280 	mov.w	r2, #128	; 0x80
 80016c6:	f04f 0300 	mov.w	r3, #0
 80016ca:	e9c7 2302 	strd	r2, r3, [r7, #8]

		if( Local_u64Fraction > USART_MAX_FRAC )
 80016ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016d2:	f240 51dd 	movw	r1, #1501	; 0x5dd
 80016d6:	428a      	cmp	r2, r1
 80016d8:	f173 0300 	sbcs.w	r3, r3, #0
 80016dc:	d30c      	bcc.n	80016f8 <MUSART_u8SetConfiguration+0x3ac>
		{
			Local_u64Mantissa += USART_MANTISSA ;
 80016de:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80016e2:	1c54      	adds	r4, r2, #1
 80016e4:	f143 0500 	adc.w	r5, r3, #0
 80016e8:	e9c7 4504 	strd	r4, r5, [r7, #16]
			Local_u64Fraction  = USART_FRACTION ;
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	f04f 0300 	mov.w	r3, #0
 80016f4:	e9c7 2302 	strd	r2, r3, [r7, #8]
		}
		USART_Index[USARTconfig->USARTindex] -> BRR = ( Local_u64Mantissa << USART_BAUD_RATE_ACCESS  ) | ( Local_u64Fraction / 100 ) ;
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	011c      	lsls	r4, r3, #4
 80016fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001700:	f04f 0264 	mov.w	r2, #100	; 0x64
 8001704:	f04f 0300 	mov.w	r3, #0
 8001708:	f7fe fd32 	bl	8000170 <__aeabi_uldivmod>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	4619      	mov	r1, r3
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <MUSART_u8SetConfiguration+0x3e4>)
 8001718:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800171c:	4322      	orrs	r2, r4
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	e001      	b.n	8001726 <MUSART_u8SetConfiguration+0x3da>
		/********************************************** Enable ***************************************************************************/
		/*************************************************************************************************************************************/
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK;
 8001722:	2300      	movs	r3, #0
 8001724:	77fb      	strb	r3, [r7, #31]
	}
	return Local_u8ErrorState;
 8001726:	7ffb      	ldrb	r3, [r7, #31]
}
 8001728:	4618      	mov	r0, r3
 800172a:	3720      	adds	r7, #32
 800172c:	46bd      	mov	sp, r7
 800172e:	bdb0      	pop	{r4, r5, r7, pc}
 8001730:	2000002c 	.word	0x2000002c

08001734 <MUSART_u8UsartStatus>:
 *
 *
 ******************************************************************************
 */
uint8_t MUSART_u8UsartStatus ( USARTindex_t Copy_USARTindex , UsartStatus_t Copy_UsartStatus )
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	460a      	mov	r2, r1
 800173e:	71fb      	strb	r3, [r7, #7]
 8001740:	4613      	mov	r3, r2
 8001742:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 8001744:	2301      	movs	r3, #1
 8001746:	73fb      	strb	r3, [r7, #15]
	if (  1  )
	{
		USART_Index[Copy_USARTindex] -> CR1 &=~ (USART_USART_MASK   << (USART_CR1_UE));
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	4a0f      	ldr	r2, [pc, #60]	; (8001788 <MUSART_u8UsartStatus+0x54>)
 800174c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001750:	68da      	ldr	r2, [r3, #12]
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	490c      	ldr	r1, [pc, #48]	; (8001788 <MUSART_u8UsartStatus+0x54>)
 8001756:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800175a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800175e:	60da      	str	r2, [r3, #12]
		USART_Index[Copy_USARTindex] -> CR1 |=  (Copy_UsartStatus   << (USART_CR1_UE));
 8001760:	79fb      	ldrb	r3, [r7, #7]
 8001762:	4a09      	ldr	r2, [pc, #36]	; (8001788 <MUSART_u8UsartStatus+0x54>)
 8001764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001768:	68da      	ldr	r2, [r3, #12]
 800176a:	79bb      	ldrb	r3, [r7, #6]
 800176c:	035b      	lsls	r3, r3, #13
 800176e:	4618      	mov	r0, r3
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	4905      	ldr	r1, [pc, #20]	; (8001788 <MUSART_u8UsartStatus+0x54>)
 8001774:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001778:	4302      	orrs	r2, r0
 800177a:	60da      	str	r2, [r3, #12]
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
	}
	return Local_u8ErrorState ;
 800177c:	7bfb      	ldrb	r3, [r7, #15]
}
 800177e:	4618      	mov	r0, r3
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr
 8001788:	2000002c 	.word	0x2000002c

0800178c <MUSART_u8ReceiveCharSynch>:
 *
 *
 ******************************************************************************
 */
uint8_t  MUSART_u8ReceiveCharSynch     ( USARTindex_t Copy_USARTindex , uint8_t * Copy_pu8DataChar  )
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	6039      	str	r1, [r7, #0]
 8001796:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 8001798:	2301      	movs	r3, #1
 800179a:	73fb      	strb	r3, [r7, #15]
	if ( Copy_pu8DataChar != NULL )
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d02b      	beq.n	80017fa <MUSART_u8ReceiveCharSynch+0x6e>
	{
		CLR_BIT( USART_Index[Copy_USARTindex] -> SR , USART_SR_RXNE );
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	4a19      	ldr	r2, [pc, #100]	; (800180c <MUSART_u8ReceiveCharSynch+0x80>)
 80017a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	4917      	ldr	r1, [pc, #92]	; (800180c <MUSART_u8ReceiveCharSynch+0x80>)
 80017b0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80017b4:	f022 0220 	bic.w	r2, r2, #32
 80017b8:	601a      	str	r2, [r3, #0]
	    while ( USART_SR_RXNE_DOWN_MASK == GET_BIT ( USART_Index[Copy_USARTindex] -> SR , USART_SR_RXNE ) )  ;
 80017ba:	bf00      	nop
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	4a13      	ldr	r2, [pc, #76]	; (800180c <MUSART_u8ReceiveCharSynch+0x80>)
 80017c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	095b      	lsrs	r3, r3, #5
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d0f5      	beq.n	80017bc <MUSART_u8ReceiveCharSynch+0x30>
	    *Copy_pu8DataChar = ( USART_Index[Copy_USARTindex] -> DR )  ;
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	4a0e      	ldr	r2, [pc, #56]	; (800180c <MUSART_u8ReceiveCharSynch+0x80>)
 80017d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	701a      	strb	r2, [r3, #0]
		CLR_BIT( USART_Index[Copy_USARTindex] -> SR , USART_SR_RXNE );
 80017e0:	79fb      	ldrb	r3, [r7, #7]
 80017e2:	4a0a      	ldr	r2, [pc, #40]	; (800180c <MUSART_u8ReceiveCharSynch+0x80>)
 80017e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	4907      	ldr	r1, [pc, #28]	; (800180c <MUSART_u8ReceiveCharSynch+0x80>)
 80017ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80017f2:	f022 0220 	bic.w	r2, r2, #32
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	e001      	b.n	80017fe <MUSART_u8ReceiveCharSynch+0x72>

	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
 80017fa:	2300      	movs	r3, #0
 80017fc:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState ;
 80017fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	2000002c 	.word	0x2000002c

08001810 <MUSART_u8ReceiveArraySynch>:
 *
 *
 ******************************************************************************
 */
uint8_t  MUSART_u8ReceiveArraySynch  (  USARTindex_t Copy_USARTindex , uint8_t * Copy_pu8DataArray  , uint8_t Copy_u8Size  )
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	6039      	str	r1, [r7, #0]
 800181a:	71fb      	strb	r3, [r7, #7]
 800181c:	4613      	mov	r3, r2
 800181e:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 8001820:	2301      	movs	r3, #1
 8001822:	73fb      	strb	r3, [r7, #15]
	if ( Copy_pu8DataArray != NULL )
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d012      	beq.n	8001850 <MUSART_u8ReceiveArraySynch+0x40>
	{
	   for (uint8_t Local_u8Counter = 0 ; Local_u8Counter < Copy_u8Size ; Local_u8Counter++ )
 800182a:	2300      	movs	r3, #0
 800182c:	73bb      	strb	r3, [r7, #14]
 800182e:	e00a      	b.n	8001846 <MUSART_u8ReceiveArraySynch+0x36>
	   {
    	   MUSART_u8ReceiveCharSynch( Copy_USARTindex , & (Copy_pu8DataArray[Local_u8Counter]) );
 8001830:	7bbb      	ldrb	r3, [r7, #14]
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	441a      	add	r2, r3
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	4611      	mov	r1, r2
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff ffa6 	bl	800178c <MUSART_u8ReceiveCharSynch>
	   for (uint8_t Local_u8Counter = 0 ; Local_u8Counter < Copy_u8Size ; Local_u8Counter++ )
 8001840:	7bbb      	ldrb	r3, [r7, #14]
 8001842:	3301      	adds	r3, #1
 8001844:	73bb      	strb	r3, [r7, #14]
 8001846:	7bba      	ldrb	r2, [r7, #14]
 8001848:	79bb      	ldrb	r3, [r7, #6]
 800184a:	429a      	cmp	r2, r3
 800184c:	d3f0      	bcc.n	8001830 <MUSART_u8ReceiveArraySynch+0x20>
 800184e:	e001      	b.n	8001854 <MUSART_u8ReceiveArraySynch+0x44>
	   }
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
 8001850:	2300      	movs	r3, #0
 8001852:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState ;
 8001854:	7bfb      	ldrb	r3, [r7, #15]
}
 8001856:	4618      	mov	r0, r3
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
	...

08001860 <MUSART_u8TransmitCharSynch>:
 *
 *
 ******************************************************************************
 */
uint8_t  MUSART_u8TransmitCharSynch     ( USARTindex_t Copy_USARTindex , uint8_t  Copy_u8DataChar  )
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	460a      	mov	r2, r1
 800186a:	71fb      	strb	r3, [r7, #7]
 800186c:	4613      	mov	r3, r2
 800186e:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 8001870:	2301      	movs	r3, #1
 8001872:	73fb      	strb	r3, [r7, #15]
	if ( 1 )
	{
		CLR_BIT( USART_Index[Copy_USARTindex] -> SR , USART_SR_TC );
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	4a17      	ldr	r2, [pc, #92]	; (80018d4 <MUSART_u8TransmitCharSynch+0x74>)
 8001878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	4914      	ldr	r1, [pc, #80]	; (80018d4 <MUSART_u8TransmitCharSynch+0x74>)
 8001882:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001886:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800188a:	601a      	str	r2, [r3, #0]
		USART_Index[Copy_USARTindex] -> DR = Copy_u8DataChar ;
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	4a11      	ldr	r2, [pc, #68]	; (80018d4 <MUSART_u8TransmitCharSynch+0x74>)
 8001890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001894:	79ba      	ldrb	r2, [r7, #6]
 8001896:	605a      	str	r2, [r3, #4]
		while ( USART_SR_TC_MASK == GET_BIT( USART_Index[Copy_USARTindex] -> SR , USART_SR_TC ) )  ;
 8001898:	bf00      	nop
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	4a0d      	ldr	r2, [pc, #52]	; (80018d4 <MUSART_u8TransmitCharSynch+0x74>)
 800189e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	099b      	lsrs	r3, r3, #6
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d0f5      	beq.n	800189a <MUSART_u8TransmitCharSynch+0x3a>
		CLR_BIT( USART_Index[Copy_USARTindex] -> SR , USART_SR_TC );
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	4a08      	ldr	r2, [pc, #32]	; (80018d4 <MUSART_u8TransmitCharSynch+0x74>)
 80018b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	79fb      	ldrb	r3, [r7, #7]
 80018ba:	4906      	ldr	r1, [pc, #24]	; (80018d4 <MUSART_u8TransmitCharSynch+0x74>)
 80018bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80018c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
	}
	return Local_u8ErrorState ;
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bc80      	pop	{r7}
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	2000002c 	.word	0x2000002c

080018d8 <MUSART_u8TransmitArraySynch>:
 *
 *
 ******************************************************************************
 */
uint8_t   MUSART_u8TransmitArraySynch  ( USARTindex_t Copy_USARTindex , uint8_t * Copy_pu8DataArray , uint8_t Copy_u8Size )
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	6039      	str	r1, [r7, #0]
 80018e2:	71fb      	strb	r3, [r7, #7]
 80018e4:	4613      	mov	r3, r2
 80018e6:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 80018e8:	2301      	movs	r3, #1
 80018ea:	73fb      	strb	r3, [r7, #15]
	if ( Copy_pu8DataArray != NULL )
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d013      	beq.n	800191a <MUSART_u8TransmitArraySynch+0x42>
	{
       for (uint8_t Local_u8Counter = 0 ; Local_u8Counter < Copy_u8Size ; Local_u8Counter++ )
 80018f2:	2300      	movs	r3, #0
 80018f4:	73bb      	strb	r3, [r7, #14]
 80018f6:	e00b      	b.n	8001910 <MUSART_u8TransmitArraySynch+0x38>
	   {
    	   MUSART_u8TransmitCharSynch( Copy_USARTindex , Copy_pu8DataArray[Local_u8Counter]  );
 80018f8:	7bbb      	ldrb	r3, [r7, #14]
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	4413      	add	r3, r2
 80018fe:	781a      	ldrb	r2, [r3, #0]
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	4611      	mov	r1, r2
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff ffab 	bl	8001860 <MUSART_u8TransmitCharSynch>
       for (uint8_t Local_u8Counter = 0 ; Local_u8Counter < Copy_u8Size ; Local_u8Counter++ )
 800190a:	7bbb      	ldrb	r3, [r7, #14]
 800190c:	3301      	adds	r3, #1
 800190e:	73bb      	strb	r3, [r7, #14]
 8001910:	7bba      	ldrb	r2, [r7, #14]
 8001912:	79bb      	ldrb	r3, [r7, #6]
 8001914:	429a      	cmp	r2, r3
 8001916:	d3ef      	bcc.n	80018f8 <MUSART_u8TransmitArraySynch+0x20>
 8001918:	e001      	b.n	800191e <MUSART_u8TransmitArraySynch+0x46>
	   }
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
 800191a:	2300      	movs	r3, #0
 800191c:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState ;
 800191e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <MUSART_voidClearFlags>:
 *
 *
 ******************************************************************************
 */
void   MUSART_voidClearFlags( USARTindex_t Copy_USARTindex )
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
	USART_Index[Copy_USARTindex] -> SR = USART_SR_MASK ;
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	4a04      	ldr	r2, [pc, #16]	; (8001948 <MUSART_voidClearFlags+0x20>)
 8001936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr
 8001948:	2000002c 	.word	0x2000002c

0800194c <USART1_IRQHandler>:
}
/*************************************************************************************************************************************/
/********************************************************* Handlers implementations **************************************************/
/*************************************************************************************************************************************/
void USART1_IRQHandler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
	if (  USART_ApfCallBack[USART_1] != NULL )
 8001950:	4b08      	ldr	r3, [pc, #32]	; (8001974 <USART1_IRQHandler+0x28>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d00a      	beq.n	800196e <USART1_IRQHandler+0x22>
	{
		MUSART_voidClearFlags(USART_1);
 8001958:	2000      	movs	r0, #0
 800195a:	f7ff ffe5 	bl	8001928 <MUSART_voidClearFlags>
		USART_ApfCallBack[USART_1](USART_Index[USART_1] -> DR);
 800195e:	4b05      	ldr	r3, [pc, #20]	; (8001974 <USART1_IRQHandler+0x28>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a05      	ldr	r2, [pc, #20]	; (8001978 <USART1_IRQHandler+0x2c>)
 8001964:	6812      	ldr	r2, [r2, #0]
 8001966:	6852      	ldr	r2, [r2, #4]
 8001968:	b2d2      	uxtb	r2, r2
 800196a:	4610      	mov	r0, r2
 800196c:	4798      	blx	r3
	}

}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	200000e4 	.word	0x200000e4
 8001978:	2000002c 	.word	0x2000002c

0800197c <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
	if (  USART_ApfCallBack[USART_2] != NULL )
 8001980:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <USART2_IRQHandler+0x28>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d00a      	beq.n	800199e <USART2_IRQHandler+0x22>
	{
		MUSART_voidClearFlags(USART_2);
 8001988:	2001      	movs	r0, #1
 800198a:	f7ff ffcd 	bl	8001928 <MUSART_voidClearFlags>
		USART_ApfCallBack[USART_2](USART_Index[USART_2] -> DR);
 800198e:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <USART2_IRQHandler+0x28>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	4a05      	ldr	r2, [pc, #20]	; (80019a8 <USART2_IRQHandler+0x2c>)
 8001994:	6852      	ldr	r2, [r2, #4]
 8001996:	6852      	ldr	r2, [r2, #4]
 8001998:	b2d2      	uxtb	r2, r2
 800199a:	4610      	mov	r0, r2
 800199c:	4798      	blx	r3
	}

}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	200000e4 	.word	0x200000e4
 80019a8:	2000002c 	.word	0x2000002c

080019ac <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
	if (  USART_ApfCallBack[USART_3] != NULL )
 80019b0:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <USART3_IRQHandler+0x28>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d00a      	beq.n	80019ce <USART3_IRQHandler+0x22>
	{
		MUSART_voidClearFlags(USART_3);
 80019b8:	2002      	movs	r0, #2
 80019ba:	f7ff ffb5 	bl	8001928 <MUSART_voidClearFlags>
		USART_ApfCallBack[USART_3](USART_Index[USART_3] -> DR);
 80019be:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <USART3_IRQHandler+0x28>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	4a05      	ldr	r2, [pc, #20]	; (80019d8 <USART3_IRQHandler+0x2c>)
 80019c4:	6892      	ldr	r2, [r2, #8]
 80019c6:	6852      	ldr	r2, [r2, #4]
 80019c8:	b2d2      	uxtb	r2, r2
 80019ca:	4610      	mov	r0, r2
 80019cc:	4798      	blx	r3
	}

}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	200000e4 	.word	0x200000e4
 80019d8:	2000002c 	.word	0x2000002c

080019dc <voidSendAck>:
		}
	}
	return Local_u8SuccessFlag ;
}
static void voidSendAck (uint8_t Copy_u8ReplyLength )
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8AckBuffer [2] = { SE_ACK , Copy_u8ReplyLength };
 80019e6:	23a5      	movs	r3, #165	; 0xa5
 80019e8:	733b      	strb	r3, [r7, #12]
 80019ea:	79fb      	ldrb	r3, [r7, #7]
 80019ec:	737b      	strb	r3, [r7, #13]
	MUSART_u8TransmitArraySynch( USART_1 , Local_u8AckBuffer , 2 );
 80019ee:	f107 030c 	add.w	r3, r7, #12
 80019f2:	2202      	movs	r2, #2
 80019f4:	4619      	mov	r1, r3
 80019f6:	2000      	movs	r0, #0
 80019f8:	f7ff ff6e 	bl	80018d8 <MUSART_u8TransmitArraySynch>
}
 80019fc:	bf00      	nop
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <SE_voidPlugCable>:
/*************************************************************************************************************************************/
/*************************************************************************************************************************************/
/*************************************************************************************************************************************/

void SE_voidPlugCable (uint8_t * Copy_pu8CmdPacket )
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8V2GVersion   = 0x1 ;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	73fb      	strb	r3, [r7, #15]
	MGPIO_u8SetPinValue ( PORTA , PIN1 , HIGH );
 8001a10:	2201      	movs	r2, #1
 8001a12:	2101      	movs	r1, #1
 8001a14:	2000      	movs	r0, #0
 8001a16:	f7fe ffef 	bl	80009f8 <MGPIO_u8SetPinValue>
	/*----------------------------------------------------*/
	HLCD_voidClearLCD();
 8001a1a:	f7ff f8d5 	bl	8000bc8 <HLCD_voidClearLCD>
	HLCD_voidSetCursor(Location0, LCD_LINE0);
 8001a1e:	2100      	movs	r1, #0
 8001a20:	2000      	movs	r0, #0
 8001a22:	f7ff fa75 	bl	8000f10 <HLCD_voidSetCursor>
	HLCD_voidSendString((uint8_t *)"---Plug Cable---");
 8001a26:	480c      	ldr	r0, [pc, #48]	; (8001a58 <SE_voidPlugCable+0x54>)
 8001a28:	f7ff f9db 	bl	8000de2 <HLCD_voidSendString>
	HLCD_voidSetCursor(Location0, LCD_LINE1);
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	2000      	movs	r0, #0
 8001a30:	f7ff fa6e 	bl	8000f10 <HLCD_voidSetCursor>
	HLCD_voidSendString((uint8_t *)"-----Success----");
 8001a34:	4809      	ldr	r0, [pc, #36]	; (8001a5c <SE_voidPlugCable+0x58>)
 8001a36:	f7ff f9d4 	bl	8000de2 <HLCD_voidSendString>
	/*----------------------------------------------------*/
	voidSendAck(1u);
 8001a3a:	2001      	movs	r0, #1
 8001a3c:	f7ff ffce 	bl	80019dc <voidSendAck>
	MUSART_u8TransmitArraySynch ( USART_1 , &Local_u8V2GVersion , 1 );
 8001a40:	f107 030f 	add.w	r3, r7, #15
 8001a44:	2201      	movs	r2, #1
 8001a46:	4619      	mov	r1, r3
 8001a48:	2000      	movs	r0, #0
 8001a4a:	f7ff ff45 	bl	80018d8 <MUSART_u8TransmitArraySynch>
}
 8001a4e:	bf00      	nop
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	08002064 	.word	0x08002064
 8001a5c:	08002078 	.word	0x08002078

08001a60 <SE_voidIdentification>:
void SE_voidIdentification (uint8_t * Copy_pu8CmdPacket )
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
	uint8_t   Local_u8VerifyFlag = 0 ;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	73bb      	strb	r3, [r7, #14]
	uint8_t   Local_u8VerifyIdentificationStatus = SE_VERIFY_IDENTIFICATION_FAIL ;
 8001a6c:	23b4      	movs	r3, #180	; 0xb4
 8001a6e:	737b      	strb	r3, [r7, #13]
	for ( uint8_t Local_u8Counter = 0 ; Local_u8Counter<18 ; Local_u8Counter++ )
 8001a70:	2300      	movs	r3, #0
 8001a72:	73fb      	strb	r3, [r7, #15]
 8001a74:	e00a      	b.n	8001a8c <SE_voidIdentification+0x2c>
	{
		Global_pu8VIN[Local_u8Counter] = Copy_pu8CmdPacket[Local_u8Counter+2];
 8001a76:	7bfb      	ldrb	r3, [r7, #15]
 8001a78:	3302      	adds	r3, #2
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	441a      	add	r2, r3
 8001a7e:	7bfb      	ldrb	r3, [r7, #15]
 8001a80:	7811      	ldrb	r1, [r2, #0]
 8001a82:	4a1c      	ldr	r2, [pc, #112]	; (8001af4 <SE_voidIdentification+0x94>)
 8001a84:	54d1      	strb	r1, [r2, r3]
	for ( uint8_t Local_u8Counter = 0 ; Local_u8Counter<18 ; Local_u8Counter++ )
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	73fb      	strb	r3, [r7, #15]
 8001a8c:	7bfb      	ldrb	r3, [r7, #15]
 8001a8e:	2b11      	cmp	r3, #17
 8001a90:	d9f1      	bls.n	8001a76 <SE_voidIdentification+0x16>
	}
	/*----------------------------------------------------*/
	HLCD_voidClearLCD();
 8001a92:	f7ff f899 	bl	8000bc8 <HLCD_voidClearLCD>
	HLCD_voidSetCursor(Location0, LCD_LINE0);
 8001a96:	2100      	movs	r1, #0
 8001a98:	2000      	movs	r0, #0
 8001a9a:	f7ff fa39 	bl	8000f10 <HLCD_voidSetCursor>
	HLCD_voidSendString((uint8_t *)"-Identification-");
 8001a9e:	4816      	ldr	r0, [pc, #88]	; (8001af8 <SE_voidIdentification+0x98>)
 8001aa0:	f7ff f99f 	bl	8000de2 <HLCD_voidSendString>
	/*----------------------------------------------------*/
	//Local_u8VerifyFlag = u8Identification();
	Local_u8VerifyFlag = 1 ;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	73bb      	strb	r3, [r7, #14]
	if ( Local_u8VerifyFlag == 1 )
 8001aa8:	7bbb      	ldrb	r3, [r7, #14]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d109      	bne.n	8001ac2 <SE_voidIdentification+0x62>
	{
		/*----------------------------------------------------*/
		HLCD_voidSetCursor(Location0, LCD_LINE1);
 8001aae:	2101      	movs	r1, #1
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	f7ff fa2d 	bl	8000f10 <HLCD_voidSetCursor>
		HLCD_voidSendString((uint8_t *)"-----Success----");
 8001ab6:	4811      	ldr	r0, [pc, #68]	; (8001afc <SE_voidIdentification+0x9c>)
 8001ab8:	f7ff f993 	bl	8000de2 <HLCD_voidSendString>
		/*----------------------------------------------------*/
		Local_u8VerifyIdentificationStatus = SE_VERIFY_IDENTIFICATION_SCCESS ;
 8001abc:	23b3      	movs	r3, #179	; 0xb3
 8001abe:	737b      	strb	r3, [r7, #13]
 8001ac0:	e009      	b.n	8001ad6 <SE_voidIdentification+0x76>
	}
	else
	{
		/*----------------------------------------------------*/
		HLCD_voidSetCursor(Location0, LCD_LINE1);
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	f7ff fa23 	bl	8000f10 <HLCD_voidSetCursor>
		HLCD_voidSendString((uint8_t *)"-----Fail!------");
 8001aca:	480d      	ldr	r0, [pc, #52]	; (8001b00 <SE_voidIdentification+0xa0>)
 8001acc:	f7ff f989 	bl	8000de2 <HLCD_voidSendString>
		/*----------------------------------------------------*/
		Global_u8StartEndFlag = 0 ;
 8001ad0:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <SE_voidIdentification+0xa4>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	701a      	strb	r2, [r3, #0]
	}
	voidSendAck(1u);
 8001ad6:	2001      	movs	r0, #1
 8001ad8:	f7ff ff80 	bl	80019dc <voidSendAck>
	MUSART_u8TransmitArraySynch( USART_1 , (uint8_t *)&Local_u8VerifyIdentificationStatus , 1 );
 8001adc:	f107 030d 	add.w	r3, r7, #13
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	2000      	movs	r0, #0
 8001ae6:	f7ff fef7 	bl	80018d8 <MUSART_u8TransmitArraySynch>
}
 8001aea:	bf00      	nop
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	200000f8 	.word	0x200000f8
 8001af8:	0800208c 	.word	0x0800208c
 8001afc:	08002078 	.word	0x08002078
 8001b00:	080020a0 	.word	0x080020a0
 8001b04:	2000010d 	.word	0x2000010d

08001b08 <SE_voidChargeParameter>:
void SE_voidChargeParameter (uint8_t * Copy_pu8CmdPacket )
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8ChargStatus  = SE_REJECT_CHARGING ;
 8001b10:	23b6      	movs	r3, #182	; 0xb6
 8001b12:	73fb      	strb	r3, [r7, #15]
	Global_u8StartVolt  = *((uint8_t *) &Copy_pu8CmdPacket[2] );
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	789a      	ldrb	r2, [r3, #2]
 8001b18:	4b18      	ldr	r3, [pc, #96]	; (8001b7c <SE_voidChargeParameter+0x74>)
 8001b1a:	701a      	strb	r2, [r3, #0]
	/*----------------------------------------------------*/
	HLCD_voidClearLCD();
 8001b1c:	f7ff f854 	bl	8000bc8 <HLCD_voidClearLCD>
	HLCD_voidSetCursor(Location0, LCD_LINE0);
 8001b20:	2100      	movs	r1, #0
 8001b22:	2000      	movs	r0, #0
 8001b24:	f7ff f9f4 	bl	8000f10 <HLCD_voidSetCursor>
	HLCD_voidSendString((uint8_t *)"Charge Parameter");
 8001b28:	4815      	ldr	r0, [pc, #84]	; (8001b80 <SE_voidChargeParameter+0x78>)
 8001b2a:	f7ff f95a 	bl	8000de2 <HLCD_voidSendString>

	if ( Global_u8StartVolt <= 70 )
 8001b2e:	4b13      	ldr	r3, [pc, #76]	; (8001b7c <SE_voidChargeParameter+0x74>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2b46      	cmp	r3, #70	; 0x46
 8001b34:	d809      	bhi.n	8001b4a <SE_voidChargeParameter+0x42>
	{
		Local_u8ChargStatus = SE_ACCEPT_CHARGING ;
 8001b36:	23b5      	movs	r3, #181	; 0xb5
 8001b38:	73fb      	strb	r3, [r7, #15]
		/*----------------------------------------------------*/
		HLCD_voidSetCursor(Location0, LCD_LINE1);
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	2000      	movs	r0, #0
 8001b3e:	f7ff f9e7 	bl	8000f10 <HLCD_voidSetCursor>
		HLCD_voidSendString((uint8_t *)"-----Success----");
 8001b42:	4810      	ldr	r0, [pc, #64]	; (8001b84 <SE_voidChargeParameter+0x7c>)
 8001b44:	f7ff f94d 	bl	8000de2 <HLCD_voidSendString>
 8001b48:	e009      	b.n	8001b5e <SE_voidChargeParameter+0x56>
		/*----------------------------------------------------*/
	}
	else
	{
		/*----------------------------------------------------*/
		HLCD_voidSetCursor(Location0, LCD_LINE1);
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	f7ff f9df 	bl	8000f10 <HLCD_voidSetCursor>
		HLCD_voidSendString((uint8_t *)"Must->(Volt<70%)");
 8001b52:	480d      	ldr	r0, [pc, #52]	; (8001b88 <SE_voidChargeParameter+0x80>)
 8001b54:	f7ff f945 	bl	8000de2 <HLCD_voidSendString>
		/*----------------------------------------------------*/
		Global_u8StartEndFlag = 0 ;
 8001b58:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <SE_voidChargeParameter+0x84>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	701a      	strb	r2, [r3, #0]
	}
	voidSendAck(1u);
 8001b5e:	2001      	movs	r0, #1
 8001b60:	f7ff ff3c 	bl	80019dc <voidSendAck>
	MUSART_u8TransmitArraySynch( USART_1 , (uint8_t *)&Local_u8ChargStatus , 1 );
 8001b64:	f107 030f 	add.w	r3, r7, #15
 8001b68:	2201      	movs	r2, #1
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	2000      	movs	r0, #0
 8001b6e:	f7ff feb3 	bl	80018d8 <MUSART_u8TransmitArraySynch>
}
 8001b72:	bf00      	nop
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	2000010b 	.word	0x2000010b
 8001b80:	080020b4 	.word	0x080020b4
 8001b84:	08002078 	.word	0x08002078
 8001b88:	080020c8 	.word	0x080020c8
 8001b8c:	2000010d 	.word	0x2000010d

08001b90 <SE_voidStartCharging>:
void SE_voidStartCharging (uint8_t * Copy_pu8CmdPacket )
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8StartCharging = SE_ACCEPT_START_CHARGING ;
 8001b98:	23b8      	movs	r3, #184	; 0xb8
 8001b9a:	73fb      	strb	r3, [r7, #15]
	MGPIO_u8SetPinValue(PORTB, PIN5  , HIGH);
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	2105      	movs	r1, #5
 8001ba0:	2001      	movs	r0, #1
 8001ba2:	f7fe ff29 	bl	80009f8 <MGPIO_u8SetPinValue>
	MGPIO_u8SetPinValue(PORTC, PIN15 , HIGH);
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	210f      	movs	r1, #15
 8001baa:	2002      	movs	r0, #2
 8001bac:	f7fe ff24 	bl	80009f8 <MGPIO_u8SetPinValue>
	/*----------------------------------------------------*/
	HLCD_voidClearLCD();
 8001bb0:	f7ff f80a 	bl	8000bc8 <HLCD_voidClearLCD>
	HLCD_voidSetCursor(Location0, LCD_LINE0);
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	2000      	movs	r0, #0
 8001bb8:	f7ff f9aa 	bl	8000f10 <HLCD_voidSetCursor>
	HLCD_voidSendString((uint8_t *)"-Start Charging--");
 8001bbc:	480b      	ldr	r0, [pc, #44]	; (8001bec <SE_voidStartCharging+0x5c>)
 8001bbe:	f7ff f910 	bl	8000de2 <HLCD_voidSendString>
	HLCD_voidSetCursor(Location0, LCD_LINE1);
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	2000      	movs	r0, #0
 8001bc6:	f7ff f9a3 	bl	8000f10 <HLCD_voidSetCursor>
	HLCD_voidSendString((uint8_t *)"-----Success----");
 8001bca:	4809      	ldr	r0, [pc, #36]	; (8001bf0 <SE_voidStartCharging+0x60>)
 8001bcc:	f7ff f909 	bl	8000de2 <HLCD_voidSendString>
	/*----------------------------------------------------*/
	voidSendAck(1u);
 8001bd0:	2001      	movs	r0, #1
 8001bd2:	f7ff ff03 	bl	80019dc <voidSendAck>
	MUSART_u8TransmitArraySynch( USART_1 , (uint8_t *)&Local_u8StartCharging , 1 );
 8001bd6:	f107 030f 	add.w	r3, r7, #15
 8001bda:	2201      	movs	r2, #1
 8001bdc:	4619      	mov	r1, r3
 8001bde:	2000      	movs	r0, #0
 8001be0:	f7ff fe7a 	bl	80018d8 <MUSART_u8TransmitArraySynch>
}
 8001be4:	bf00      	nop
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	080020dc 	.word	0x080020dc
 8001bf0:	08002078 	.word	0x08002078

08001bf4 <SE_voidSendEnergyAmount>:
void SE_voidSendEnergyAmount (uint8_t * Copy_pu8CmdPacket )
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8ChargStatus  = SE_ACCEPT_UPDATE_ENARGY  ;
 8001bfc:	23b5      	movs	r3, #181	; 0xb5
 8001bfe:	73fb      	strb	r3, [r7, #15]
	Global_u8EndtVolt  = *((uint8_t *) &Copy_pu8CmdPacket[2] );
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	789a      	ldrb	r2, [r3, #2]
 8001c04:	4b17      	ldr	r3, [pc, #92]	; (8001c64 <SE_voidSendEnergyAmount+0x70>)
 8001c06:	701a      	strb	r2, [r3, #0]
	/*----------------------------------------------------*/
	HLCD_voidClearLCD();
 8001c08:	f7fe ffde 	bl	8000bc8 <HLCD_voidClearLCD>
	HLCD_voidSetCursor(Location0, LCD_LINE0);
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	2000      	movs	r0, #0
 8001c10:	f7ff f97e 	bl	8000f10 <HLCD_voidSetCursor>
	HLCD_voidSendString((uint8_t *)"--EnergyAmount--");
 8001c14:	4814      	ldr	r0, [pc, #80]	; (8001c68 <SE_voidSendEnergyAmount+0x74>)
 8001c16:	f7ff f8e4 	bl	8000de2 <HLCD_voidSendString>
	HLCD_voidSetCursor(Location0, LCD_LINE1);
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	2000      	movs	r0, #0
 8001c1e:	f7ff f977 	bl	8000f10 <HLCD_voidSetCursor>
	HLCD_voidSendString((uint8_t *)"-----Volt=");
 8001c22:	4812      	ldr	r0, [pc, #72]	; (8001c6c <SE_voidSendEnergyAmount+0x78>)
 8001c24:	f7ff f8dd 	bl	8000de2 <HLCD_voidSendString>
	HLCD_voidSetCursor(Location10, LCD_LINE1);
 8001c28:	2101      	movs	r1, #1
 8001c2a:	200a      	movs	r0, #10
 8001c2c:	f7ff f970 	bl	8000f10 <HLCD_voidSetCursor>
	HLCD_voidSendNumber(Global_u8EndtVolt);
 8001c30:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <SE_voidSendEnergyAmount+0x70>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff f8f1 	bl	8000e1c <HLCD_voidSendNumber>
	HLCD_voidSetCursor(Location12, LCD_LINE1);
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	200c      	movs	r0, #12
 8001c3e:	f7ff f967 	bl	8000f10 <HLCD_voidSetCursor>
	HLCD_voidSendString((uint8_t *)"%---");
 8001c42:	480b      	ldr	r0, [pc, #44]	; (8001c70 <SE_voidSendEnergyAmount+0x7c>)
 8001c44:	f7ff f8cd 	bl	8000de2 <HLCD_voidSendString>
	/*----------------------------------------------------*/
	voidSendAck(1u);
 8001c48:	2001      	movs	r0, #1
 8001c4a:	f7ff fec7 	bl	80019dc <voidSendAck>
	MUSART_u8TransmitArraySynch( USART_1 , (uint8_t *)&Local_u8ChargStatus , 1 );
 8001c4e:	f107 030f 	add.w	r3, r7, #15
 8001c52:	2201      	movs	r2, #1
 8001c54:	4619      	mov	r1, r3
 8001c56:	2000      	movs	r0, #0
 8001c58:	f7ff fe3e 	bl	80018d8 <MUSART_u8TransmitArraySynch>
}
 8001c5c:	bf00      	nop
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	2000010c 	.word	0x2000010c
 8001c68:	080020f0 	.word	0x080020f0
 8001c6c:	08002104 	.word	0x08002104
 8001c70:	08002110 	.word	0x08002110

08001c74 <SE_voidChargingCost>:
void SE_voidChargingCost (uint8_t * Copy_pu8CmdPacket )
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
	uint8_t  Local_u8CostFlag = 0 ;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	73fb      	strb	r3, [r7, #15]
	uint8_t Local_u8ChargCostStatus =  SE_ADD_COST_FAIL ;
 8001c80:	23b1      	movs	r3, #177	; 0xb1
 8001c82:	73bb      	strb	r3, [r7, #14]
	Global_u8ChargingVolt =  Global_u8EndtVolt - Global_u8StartVolt  ;
 8001c84:	4b23      	ldr	r3, [pc, #140]	; (8001d14 <SE_voidChargingCost+0xa0>)
 8001c86:	781a      	ldrb	r2, [r3, #0]
 8001c88:	4b23      	ldr	r3, [pc, #140]	; (8001d18 <SE_voidChargingCost+0xa4>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	b2da      	uxtb	r2, r3
 8001c90:	4b22      	ldr	r3, [pc, #136]	; (8001d1c <SE_voidChargingCost+0xa8>)
 8001c92:	701a      	strb	r2, [r3, #0]
	/*----------------------------------------------------*/
	HLCD_voidClearLCD();
 8001c94:	f7fe ff98 	bl	8000bc8 <HLCD_voidClearLCD>
	HLCD_voidSetCursor(Location0, LCD_LINE0);
 8001c98:	2100      	movs	r1, #0
 8001c9a:	2000      	movs	r0, #0
 8001c9c:	f7ff f938 	bl	8000f10 <HLCD_voidSetCursor>
	HLCD_voidSendString((uint8_t *)"--Charging Cost-");
 8001ca0:	481f      	ldr	r0, [pc, #124]	; (8001d20 <SE_voidChargingCost+0xac>)
 8001ca2:	f7ff f89e 	bl	8000de2 <HLCD_voidSendString>
	/*----------------------------------------------------*/
	//Local_u8CostFlag = u8ChargingCost();
	Local_u8CostFlag = 1 ;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	73fb      	strb	r3, [r7, #15]
	if ( Local_u8CostFlag == 1 )
 8001caa:	7bfb      	ldrb	r3, [r7, #15]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d119      	bne.n	8001ce4 <SE_voidChargingCost+0x70>
	{
		Local_u8ChargCostStatus = SE_ADD_COST_SCCESS ;
 8001cb0:	23b0      	movs	r3, #176	; 0xb0
 8001cb2:	73bb      	strb	r3, [r7, #14]
		/*----------------------------------------------------*/
		HLCD_voidSetCursor(Location0, LCD_LINE1);
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	f7ff f92a 	bl	8000f10 <HLCD_voidSetCursor>
		HLCD_voidSendString((uint8_t *)"----Cost");
 8001cbc:	4819      	ldr	r0, [pc, #100]	; (8001d24 <SE_voidChargingCost+0xb0>)
 8001cbe:	f7ff f890 	bl	8000de2 <HLCD_voidSendString>
		HLCD_voidSetCursor(Location9, LCD_LINE1);
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	2009      	movs	r0, #9
 8001cc6:	f7ff f923 	bl	8000f10 <HLCD_voidSetCursor>
		HLCD_voidSendNumber( Global_u8ChargingVolt * 1 );
 8001cca:	4b14      	ldr	r3, [pc, #80]	; (8001d1c <SE_voidChargingCost+0xa8>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff f8a4 	bl	8000e1c <HLCD_voidSendNumber>
		HLCD_voidSetCursor(Location11, LCD_LINE1);
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	200b      	movs	r0, #11
 8001cd8:	f7ff f91a 	bl	8000f10 <HLCD_voidSetCursor>
		HLCD_voidSendString((uint8_t *)"$----");
 8001cdc:	4812      	ldr	r0, [pc, #72]	; (8001d28 <SE_voidChargingCost+0xb4>)
 8001cde:	f7ff f880 	bl	8000de2 <HLCD_voidSendString>
 8001ce2:	e009      	b.n	8001cf8 <SE_voidChargingCost+0x84>
		/*----------------------------------------------------*/
	}
	else
	{
		/*----------------------------------------------------*/
		HLCD_voidSetCursor(Location0, LCD_LINE1);
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	f7ff f912 	bl	8000f10 <HLCD_voidSetCursor>
		HLCD_voidSendString((uint8_t *)"-----Fail!------");
 8001cec:	480f      	ldr	r0, [pc, #60]	; (8001d2c <SE_voidChargingCost+0xb8>)
 8001cee:	f7ff f878 	bl	8000de2 <HLCD_voidSendString>
		/*----------------------------------------------------*/
		Global_u8StartEndFlag = 0 ;
 8001cf2:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <SE_voidChargingCost+0xbc>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	701a      	strb	r2, [r3, #0]
	}
	voidSendAck(1u);
 8001cf8:	2001      	movs	r0, #1
 8001cfa:	f7ff fe6f 	bl	80019dc <voidSendAck>
	MUSART_u8TransmitArraySynch( USART_1 , (uint8_t *)&Local_u8ChargCostStatus , 1 );
 8001cfe:	f107 030e 	add.w	r3, r7, #14
 8001d02:	2201      	movs	r2, #1
 8001d04:	4619      	mov	r1, r3
 8001d06:	2000      	movs	r0, #0
 8001d08:	f7ff fde6 	bl	80018d8 <MUSART_u8TransmitArraySynch>
}
 8001d0c:	bf00      	nop
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	2000010c 	.word	0x2000010c
 8001d18:	2000010b 	.word	0x2000010b
 8001d1c:	2000010a 	.word	0x2000010a
 8001d20:	08002118 	.word	0x08002118
 8001d24:	0800212c 	.word	0x0800212c
 8001d28:	08002138 	.word	0x08002138
 8001d2c:	080020a0 	.word	0x080020a0
 8001d30:	2000010d 	.word	0x2000010d

08001d34 <SE_voidEndCharging>:
void SE_voidEndCharging (uint8_t * Copy_pu8CmdPacket )
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8EndCharging = SE_ACCEPT_END_CHARGING ;
 8001d3c:	23b9      	movs	r3, #185	; 0xb9
 8001d3e:	73fb      	strb	r3, [r7, #15]
	MGPIO_u8SetPinValue(PORTB, PIN5  , LOW);
 8001d40:	2200      	movs	r2, #0
 8001d42:	2105      	movs	r1, #5
 8001d44:	2001      	movs	r0, #1
 8001d46:	f7fe fe57 	bl	80009f8 <MGPIO_u8SetPinValue>
	MGPIO_u8SetPinValue(PORTC, PIN15 , LOW);
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	210f      	movs	r1, #15
 8001d4e:	2002      	movs	r0, #2
 8001d50:	f7fe fe52 	bl	80009f8 <MGPIO_u8SetPinValue>
	MGPIO_u8SetPinValue(PORTA, PIN1  , LOW);
 8001d54:	2200      	movs	r2, #0
 8001d56:	2101      	movs	r1, #1
 8001d58:	2000      	movs	r0, #0
 8001d5a:	f7fe fe4d 	bl	80009f8 <MGPIO_u8SetPinValue>
	/*----------------------------------------------------*/
	HLCD_voidClearLCD();
 8001d5e:	f7fe ff33 	bl	8000bc8 <HLCD_voidClearLCD>
	HLCD_voidSetCursor(Location0, LCD_LINE0);
 8001d62:	2100      	movs	r1, #0
 8001d64:	2000      	movs	r0, #0
 8001d66:	f7ff f8d3 	bl	8000f10 <HLCD_voidSetCursor>
	HLCD_voidSendString((uint8_t *)"--End Charging--");
 8001d6a:	4812      	ldr	r0, [pc, #72]	; (8001db4 <SE_voidEndCharging+0x80>)
 8001d6c:	f7ff f839 	bl	8000de2 <HLCD_voidSendString>
	HLCD_voidSetCursor(Location0, LCD_LINE1);
 8001d70:	2101      	movs	r1, #1
 8001d72:	2000      	movs	r0, #0
 8001d74:	f7ff f8cc 	bl	8000f10 <HLCD_voidSetCursor>
	HLCD_voidSendString((uint8_t *)"-----Success----");
 8001d78:	480f      	ldr	r0, [pc, #60]	; (8001db8 <SE_voidEndCharging+0x84>)
 8001d7a:	f7ff f832 	bl	8000de2 <HLCD_voidSendString>
	/*----------------------------------------------------*/
	Global_u8ChargingVolt = 0 ;
 8001d7e:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <SE_voidEndCharging+0x88>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	701a      	strb	r2, [r3, #0]
	Global_u8StartVolt    = 0 ;
 8001d84:	4b0e      	ldr	r3, [pc, #56]	; (8001dc0 <SE_voidEndCharging+0x8c>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	701a      	strb	r2, [r3, #0]
	Global_u8EndtVolt     = 0 ;
 8001d8a:	4b0e      	ldr	r3, [pc, #56]	; (8001dc4 <SE_voidEndCharging+0x90>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	701a      	strb	r2, [r3, #0]
	Global_u8StartEndFlag = 0 ;
 8001d90:	4b0d      	ldr	r3, [pc, #52]	; (8001dc8 <SE_voidEndCharging+0x94>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	701a      	strb	r2, [r3, #0]
	/*----------------------------------------------------*/
	voidSendAck(1u);
 8001d96:	2001      	movs	r0, #1
 8001d98:	f7ff fe20 	bl	80019dc <voidSendAck>
	MUSART_u8TransmitArraySynch( USART_1 , (uint8_t *)&Local_u8EndCharging , 1 );
 8001d9c:	f107 030f 	add.w	r3, r7, #15
 8001da0:	2201      	movs	r2, #1
 8001da2:	4619      	mov	r1, r3
 8001da4:	2000      	movs	r0, #0
 8001da6:	f7ff fd97 	bl	80018d8 <MUSART_u8TransmitArraySynch>
}
 8001daa:	bf00      	nop
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	08002140 	.word	0x08002140
 8001db8:	08002078 	.word	0x08002078
 8001dbc:	2000010a 	.word	0x2000010a
 8001dc0:	2000010b 	.word	0x2000010b
 8001dc4:	2000010c 	.word	0x2000010c
 8001dc8:	2000010d 	.word	0x2000010d

08001dcc <main>:

/********************************************************************************************************************************************/
/**************************************************** Main Function  ************************************************************************/
/********************************************************************************************************************************************/
int main(void)
{
 8001dcc:	b590      	push	{r4, r7, lr}
 8001dce:	b0c9      	sub	sp, #292	; 0x124
 8001dd0:	af00      	add	r7, sp, #0
	/********************************************************************************************************************************************/

	/********************************************************************************************************************************************/
	/**************************************************** CORE Configurations *******************************************************************/
	/********************************************************************************************************************************************/
	MSTK_u8ClockConfig     (STK_AHB_DIV_8 );
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	f7ff fa1e 	bl	8001214 <MSTK_u8ClockConfig>
	/********************************************************************************************************************************************/
	/**************************************************** RCC Configurations ********************************************************************/
	/********************************************************************************************************************************************/
	MRCC_u8SetClockState(HSE,ENABLE);
 8001dd8:	2101      	movs	r1, #1
 8001dda:	2001      	movs	r0, #1
 8001ddc:	f7ff f8b8 	bl	8000f50 <MRCC_u8SetClockState>
	MRCC_u8SetSystemClock(HSE);
 8001de0:	2001      	movs	r0, #1
 8001de2:	f7ff f94b 	bl	800107c <MRCC_u8SetSystemClock>
	MRCC_u8PeripheralsClockState(APB2,PER_IOPA,ENABLE);
 8001de6:	2201      	movs	r2, #1
 8001de8:	2102      	movs	r1, #2
 8001dea:	2002      	movs	r0, #2
 8001dec:	f7ff f968 	bl	80010c0 <MRCC_u8PeripheralsClockState>
	MRCC_u8PeripheralsClockState(APB2,PER_IOPB,ENABLE);
 8001df0:	2201      	movs	r2, #1
 8001df2:	2103      	movs	r1, #3
 8001df4:	2002      	movs	r0, #2
 8001df6:	f7ff f963 	bl	80010c0 <MRCC_u8PeripheralsClockState>
	MRCC_u8PeripheralsClockState(APB2,PER_IOPC,ENABLE);
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	2104      	movs	r1, #4
 8001dfe:	2002      	movs	r0, #2
 8001e00:	f7ff f95e 	bl	80010c0 <MRCC_u8PeripheralsClockState>
	MRCC_u8PeripheralsClockState(APB2,PER_USART1,ENABLE);
 8001e04:	2201      	movs	r2, #1
 8001e06:	210e      	movs	r1, #14
 8001e08:	2002      	movs	r0, #2
 8001e0a:	f7ff f959 	bl	80010c0 <MRCC_u8PeripheralsClockState>
	MRCC_u8PeripheralsClockState(APB1,PER_USART2,ENABLE);
 8001e0e:	2201      	movs	r2, #1
 8001e10:	2111      	movs	r1, #17
 8001e12:	2001      	movs	r0, #1
 8001e14:	f7ff f954 	bl	80010c0 <MRCC_u8PeripheralsClockState>

	/********************************************************************************************************************************************/
	/**************************************************** MCAL Configurations *******************************************************************/
	/********************************************************************************************************************************************/
	MGPIO_u8SetPinDirection(PORTA, PIN1 , OUTPUT_SPEED_2MHZ_PP);
 8001e18:	2202      	movs	r2, #2
 8001e1a:	2101      	movs	r1, #1
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	f7fe fd9d 	bl	800095c <MGPIO_u8SetPinDirection>
	MGPIO_u8SetPinDirection(PORTB, PIN5 , OUTPUT_SPEED_2MHZ_PP);
 8001e22:	2202      	movs	r2, #2
 8001e24:	2105      	movs	r1, #5
 8001e26:	2001      	movs	r0, #1
 8001e28:	f7fe fd98 	bl	800095c <MGPIO_u8SetPinDirection>
	MGPIO_u8SetPinDirection(PORTC, PIN15, OUTPUT_SPEED_2MHZ_PP);
 8001e2c:	2202      	movs	r2, #2
 8001e2e:	210f      	movs	r1, #15
 8001e30:	2002      	movs	r0, #2
 8001e32:	f7fe fd93 	bl	800095c <MGPIO_u8SetPinDirection>

	MGPIO_u8SetPinDirection(PORTA, PIN9 , OUTPUT_SPEED_2MHZ_AFPP);
 8001e36:	220a      	movs	r2, #10
 8001e38:	2109      	movs	r1, #9
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	f7fe fd8e 	bl	800095c <MGPIO_u8SetPinDirection>
	MGPIO_u8SetPinDirection(PORTA, PIN10, INPUT_FLOATING);
 8001e40:	2204      	movs	r2, #4
 8001e42:	210a      	movs	r1, #10
 8001e44:	2000      	movs	r0, #0
 8001e46:	f7fe fd89 	bl	800095c <MGPIO_u8SetPinDirection>

	USARTconfig_t UART = {USART_1,RECEIVER_ENABLE,TRANSMITTER_ENABLE,RXNE_INTERRUPT_DISABLE
 8001e4a:	4b50      	ldr	r3, [pc, #320]	; (8001f8c <main+0x1c0>)
 8001e4c:	f507 7488 	add.w	r4, r7, #272	; 0x110
 8001e50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e52:	c407      	stmia	r4!, {r0, r1, r2}
 8001e54:	7023      	strb	r3, [r4, #0]
						,TRANSMITTER_COMPLETE_INTERRUPT_DISABLE,TXE_INTERRUPT_DISABLE
						,PARITY_SELECTION_EVEN,PARITY_CONTROL_DISABLE,DATA_8_BITS,ONE_BIT
						,INHIBITED,DMAR_DISABLE,DMAT_DISABLE};
	MUSART_u8SetConfiguration(&UART);
 8001e56:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff fa76 	bl	800134c <MUSART_u8SetConfiguration>
	MUSART_u8UsartStatus(USART_1, USART_ENABLE);
 8001e60:	2101      	movs	r1, #1
 8001e62:	2000      	movs	r0, #0
 8001e64:	f7ff fc66 	bl	8001734 <MUSART_u8UsartStatus>
	/*************************************************************************************************************/
	MGPIO_u8SetPinDirection(PORTA, PIN2 , OUTPUT_SPEED_2MHZ_AFPP);
 8001e68:	220a      	movs	r2, #10
 8001e6a:	2102      	movs	r1, #2
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	f7fe fd75 	bl	800095c <MGPIO_u8SetPinDirection>
	MGPIO_u8SetPinDirection(PORTA, PIN3 , INPUT_FLOATING);
 8001e72:	2204      	movs	r2, #4
 8001e74:	2103      	movs	r1, #3
 8001e76:	2000      	movs	r0, #0
 8001e78:	f7fe fd70 	bl	800095c <MGPIO_u8SetPinDirection>

	USARTconfig_t UART2 = {USART_2,RECEIVER_ENABLE,TRANSMITTER_ENABLE,RXNE_INTERRUPT_DISABLE
 8001e7c:	4b44      	ldr	r3, [pc, #272]	; (8001f90 <main+0x1c4>)
 8001e7e:	f507 7480 	add.w	r4, r7, #256	; 0x100
 8001e82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e84:	c407      	stmia	r4!, {r0, r1, r2}
 8001e86:	7023      	strb	r3, [r4, #0]
						,TRANSMITTER_COMPLETE_INTERRUPT_DISABLE,TXE_INTERRUPT_DISABLE
						,PARITY_SELECTION_EVEN,PARITY_CONTROL_DISABLE,DATA_8_BITS,ONE_BIT
						,INHIBITED,DMAR_DISABLE,DMAT_DISABLE};
	MUSART_u8SetConfiguration(&UART2);
 8001e88:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff fa5d 	bl	800134c <MUSART_u8SetConfiguration>
	MUSART_u8UsartStatus(USART_2, USART_ENABLE);
 8001e92:	2101      	movs	r1, #1
 8001e94:	2001      	movs	r0, #1
 8001e96:	f7ff fc4d 	bl	8001734 <MUSART_u8UsartStatus>
	/********************************************************************************************************************************************/
	/**************************************************** HAL Configurations ********************************************************************/
	/********************************************************************************************************************************************/
	HLCD_voidInit();
 8001e9a:	f7fe fe4d 	bl	8000b38 <HLCD_voidInit>
	/********************************************************************************************************************************************/

	/********************************************************************************************************************************************/
	/**************************************************** Loop **********************************************************************************/
	/********************************************************************************************************************************************/
	uint8_t Local_u8CmdPacket[255]={0};
 8001e9e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001ea2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	3304      	adds	r3, #4
 8001eac:	22fb      	movs	r2, #251	; 0xfb
 8001eae:	2100      	movs	r1, #0
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f000 f8c1 	bl	8002038 <memset>

	while(1)
	{
		if ( Global_u8StartEndFlag == 0 )
 8001eb6:	4b37      	ldr	r3, [pc, #220]	; (8001f94 <main+0x1c8>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10f      	bne.n	8001ede <main+0x112>
		{
			STIMERS_voidDelayMS(2000);
 8001ebe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001ec2:	f7ff fa29 	bl	8001318 <STIMERS_voidDelayMS>
			HLCD_voidClearLCD();
 8001ec6:	f7fe fe7f 	bl	8000bc8 <HLCD_voidClearLCD>
			HLCD_voidSetCursor(Location0, LCD_LINE0);
 8001eca:	2100      	movs	r1, #0
 8001ecc:	2000      	movs	r0, #0
 8001ece:	f7ff f81f 	bl	8000f10 <HLCD_voidSetCursor>
			HLCD_voidSendString((uint8_t *)"-Welcome To V2G-");
 8001ed2:	4831      	ldr	r0, [pc, #196]	; (8001f98 <main+0x1cc>)
 8001ed4:	f7fe ff85 	bl	8000de2 <HLCD_voidSendString>
			Global_u8StartEndFlag = 1 ;
 8001ed8:	4b2e      	ldr	r3, [pc, #184]	; (8001f94 <main+0x1c8>)
 8001eda:	2201      	movs	r2, #1
 8001edc:	701a      	strb	r2, [r3, #0]
		}
		memset(Local_u8CmdPacket,0,255);
 8001ede:	463b      	mov	r3, r7
 8001ee0:	22ff      	movs	r2, #255	; 0xff
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f000 f8a7 	bl	8002038 <memset>
		MUSART_u8ReceiveArraySynch(USART_1 , &Local_u8CmdPacket[0], 1);
 8001eea:	463b      	mov	r3, r7
 8001eec:	2201      	movs	r2, #1
 8001eee:	4619      	mov	r1, r3
 8001ef0:	2000      	movs	r0, #0
 8001ef2:	f7ff fc8d 	bl	8001810 <MUSART_u8ReceiveArraySynch>
		MUSART_u8ReceiveArraySynch(USART_1 , &Local_u8CmdPacket[1], Local_u8CmdPacket[0] );
 8001ef6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001efa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001efe:	781a      	ldrb	r2, [r3, #0]
 8001f00:	463b      	mov	r3, r7
 8001f02:	3301      	adds	r3, #1
 8001f04:	4619      	mov	r1, r3
 8001f06:	2000      	movs	r0, #0
 8001f08:	f7ff fc82 	bl	8001810 <MUSART_u8ReceiveArraySynch>
		switch (Local_u8CmdPacket[1])
 8001f0c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001f10:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001f14:	785b      	ldrb	r3, [r3, #1]
 8001f16:	3b51      	subs	r3, #81	; 0x51
 8001f18:	2b06      	cmp	r3, #6
 8001f1a:	d834      	bhi.n	8001f86 <main+0x1ba>
 8001f1c:	a201      	add	r2, pc, #4	; (adr r2, 8001f24 <main+0x158>)
 8001f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f22:	bf00      	nop
 8001f24:	08001f41 	.word	0x08001f41
 8001f28:	08001f4b 	.word	0x08001f4b
 8001f2c:	08001f55 	.word	0x08001f55
 8001f30:	08001f5f 	.word	0x08001f5f
 8001f34:	08001f69 	.word	0x08001f69
 8001f38:	08001f73 	.word	0x08001f73
 8001f3c:	08001f7d 	.word	0x08001f7d
		{
		case SE_PLUG_CABLE      		:      SE_voidPlugCable         (Local_u8CmdPacket)    ; break ;
 8001f40:	463b      	mov	r3, r7
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff fd5e 	bl	8001a04 <SE_voidPlugCable>
 8001f48:	e01e      	b.n	8001f88 <main+0x1bc>
		case SE_IDENTIFICATION     	    :      SE_voidIdentification    (Local_u8CmdPacket)    ; break ;
 8001f4a:	463b      	mov	r3, r7
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff fd87 	bl	8001a60 <SE_voidIdentification>
 8001f52:	e019      	b.n	8001f88 <main+0x1bc>
		case SE_CHARGE_PARAMETAR        :      SE_voidChargeParameter   (Local_u8CmdPacket)    ; break ;
 8001f54:	463b      	mov	r3, r7
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff fdd6 	bl	8001b08 <SE_voidChargeParameter>
 8001f5c:	e014      	b.n	8001f88 <main+0x1bc>
		case SE_CHARGING_COST           :      SE_voidChargingCost      (Local_u8CmdPacket)    ; break ;
 8001f5e:	463b      	mov	r3, r7
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff fe87 	bl	8001c74 <SE_voidChargingCost>
 8001f66:	e00f      	b.n	8001f88 <main+0x1bc>
		case SE_START_CHARGING          :      SE_voidStartCharging     (Local_u8CmdPacket)    ; break ;
 8001f68:	463b      	mov	r3, r7
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff fe10 	bl	8001b90 <SE_voidStartCharging>
 8001f70:	e00a      	b.n	8001f88 <main+0x1bc>
		case SE_END_CHARGING            :      SE_voidEndCharging       (Local_u8CmdPacket)    ; break ;
 8001f72:	463b      	mov	r3, r7
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff fedd 	bl	8001d34 <SE_voidEndCharging>
 8001f7a:	e005      	b.n	8001f88 <main+0x1bc>
		case SE_SEND_ENERGY_AMOUNT      :      SE_voidSendEnergyAmount  (Local_u8CmdPacket)    ; break ;
 8001f7c:	463b      	mov	r3, r7
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff fe38 	bl	8001bf4 <SE_voidSendEnergyAmount>
 8001f84:	e000      	b.n	8001f88 <main+0x1bc>
		default                         :                                                      ; break ;
 8001f86:	bf00      	nop
		if ( Global_u8StartEndFlag == 0 )
 8001f88:	e795      	b.n	8001eb6 <main+0xea>
 8001f8a:	bf00      	nop
 8001f8c:	08002168 	.word	0x08002168
 8001f90:	08002178 	.word	0x08002178
 8001f94:	2000010d 	.word	0x2000010d
 8001f98:	08002154 	.word	0x08002154

08001f9c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f9c:	480d      	ldr	r0, [pc, #52]	; (8001fd4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f9e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001fa0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fa4:	480c      	ldr	r0, [pc, #48]	; (8001fd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fa6:	490d      	ldr	r1, [pc, #52]	; (8001fdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fa8:	4a0d      	ldr	r2, [pc, #52]	; (8001fe0 <LoopForever+0xe>)
  movs r3, #0
 8001faa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fac:	e002      	b.n	8001fb4 <LoopCopyDataInit>

08001fae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fb2:	3304      	adds	r3, #4

08001fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fb8:	d3f9      	bcc.n	8001fae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fba:	4a0a      	ldr	r2, [pc, #40]	; (8001fe4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fbc:	4c0a      	ldr	r4, [pc, #40]	; (8001fe8 <LoopForever+0x16>)
  movs r3, #0
 8001fbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fc0:	e001      	b.n	8001fc6 <LoopFillZerobss>

08001fc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fc4:	3204      	adds	r2, #4

08001fc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fc8:	d3fb      	bcc.n	8001fc2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001fca:	f000 f811 	bl	8001ff0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fce:	f7ff fefd 	bl	8001dcc <main>

08001fd2 <LoopForever>:

LoopForever:
  b LoopForever
 8001fd2:	e7fe      	b.n	8001fd2 <LoopForever>
  ldr   r0, =_estack
 8001fd4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001fd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fdc:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8001fe0:	08002198 	.word	0x08002198
  ldr r2, =_sbss
 8001fe4:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8001fe8:	20000110 	.word	0x20000110

08001fec <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fec:	e7fe      	b.n	8001fec <BusFault_Handler>
	...

08001ff0 <__libc_init_array>:
 8001ff0:	b570      	push	{r4, r5, r6, lr}
 8001ff2:	2600      	movs	r6, #0
 8001ff4:	4d0c      	ldr	r5, [pc, #48]	; (8002028 <__libc_init_array+0x38>)
 8001ff6:	4c0d      	ldr	r4, [pc, #52]	; (800202c <__libc_init_array+0x3c>)
 8001ff8:	1b64      	subs	r4, r4, r5
 8001ffa:	10a4      	asrs	r4, r4, #2
 8001ffc:	42a6      	cmp	r6, r4
 8001ffe:	d109      	bne.n	8002014 <__libc_init_array+0x24>
 8002000:	f000 f822 	bl	8002048 <_init>
 8002004:	2600      	movs	r6, #0
 8002006:	4d0a      	ldr	r5, [pc, #40]	; (8002030 <__libc_init_array+0x40>)
 8002008:	4c0a      	ldr	r4, [pc, #40]	; (8002034 <__libc_init_array+0x44>)
 800200a:	1b64      	subs	r4, r4, r5
 800200c:	10a4      	asrs	r4, r4, #2
 800200e:	42a6      	cmp	r6, r4
 8002010:	d105      	bne.n	800201e <__libc_init_array+0x2e>
 8002012:	bd70      	pop	{r4, r5, r6, pc}
 8002014:	f855 3b04 	ldr.w	r3, [r5], #4
 8002018:	4798      	blx	r3
 800201a:	3601      	adds	r6, #1
 800201c:	e7ee      	b.n	8001ffc <__libc_init_array+0xc>
 800201e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002022:	4798      	blx	r3
 8002024:	3601      	adds	r6, #1
 8002026:	e7f2      	b.n	800200e <__libc_init_array+0x1e>
 8002028:	08002190 	.word	0x08002190
 800202c:	08002190 	.word	0x08002190
 8002030:	08002190 	.word	0x08002190
 8002034:	08002194 	.word	0x08002194

08002038 <memset>:
 8002038:	4603      	mov	r3, r0
 800203a:	4402      	add	r2, r0
 800203c:	4293      	cmp	r3, r2
 800203e:	d100      	bne.n	8002042 <memset+0xa>
 8002040:	4770      	bx	lr
 8002042:	f803 1b01 	strb.w	r1, [r3], #1
 8002046:	e7f9      	b.n	800203c <memset+0x4>

08002048 <_init>:
 8002048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800204a:	bf00      	nop
 800204c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800204e:	bc08      	pop	{r3}
 8002050:	469e      	mov	lr, r3
 8002052:	4770      	bx	lr

08002054 <_fini>:
 8002054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002056:	bf00      	nop
 8002058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800205a:	bc08      	pop	{r3}
 800205c:	469e      	mov	lr, r3
 800205e:	4770      	bx	lr
